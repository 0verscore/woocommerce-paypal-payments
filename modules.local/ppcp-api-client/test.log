PHPUnit 9.1.1 by Sebastian Bergmann and contributors.

F                                                                   1 / 1 (100%)

Time: 531 ms, Memory: 20.00 MB

There was 1 failure:

1) Inpsyde\PayPalCommerce\ApiClient\Factory\PurchaseUnitFactoryTest::testWcCartShippingGetsDroppendWhenNoCountryCode
Failed asserting that Mockery_13_Inpsyde_PayPalCommerce_ApiClient_Entity_Shipping Object &0000000021e1f8f7000000005777935d (
    '_mockery_expectations' => Array &0 (
        'address' => Mockery\ExpectationDirector Object &0000000021e1f89b000000005777935d (
            '_name' => 'address'
            '_mock' => Mockery_13_Inpsyde_PayPalCommerce_ApiClient_Entity_Shipping Object &0000000021e1f8f7000000005777935d
            '_expectations' => Array &1 (
                0 => Mockery\Expectation Object &0000000021e1f93f000000005777935d (
                    '_mock' => Mockery_13_Inpsyde_PayPalCommerce_ApiClient_Entity_Shipping Object &0000000021e1f8f7000000005777935d
                    '_name' => 'address'
                    '_because' => null
                    '_expectedArgs' => Array &2 (
                        0 => Mockery\Matcher\AnyArgs Object &0000000021e1f93e000000005777935d (
                            '_expected' => null
                        )
                    )
                    '_countValidators' => Array &3 ()
                    '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                    '_actualCount' => 2
                    '_returnValue' => null
                    '_returnQueue' => Array &4 (
                        0 => Mockery_12_Inpsyde_PayPalCommerce_ApiClient_Entity_Address Object &0000000021e1f884000000005777935d (
                            '_mockery_expectations' => Array &5 (
                                'countryCode' => Mockery\ExpectationDirector Object &0000000021e1ff2e000000005777935d (
                                    '_name' => 'countryCode'
                                    '_mock' => Mockery_12_Inpsyde_PayPalCommerce_ApiClient_Entity_Address Object &0000000021e1f884000000005777935d
                                    '_expectations' => Array &6 (
                                        0 => Mockery\Expectation Object &0000000021e1f8c8000000005777935d (
                                            '_mock' => Mockery_12_Inpsyde_PayPalCommerce_ApiClient_Entity_Address Object &0000000021e1f884000000005777935d
                                            '_name' => 'countryCode'
                                            '_because' => null
                                            '_expectedArgs' => Array &7 (
                                                0 => Mockery\Matcher\AnyArgs Object &0000000021e1f8c7000000005777935d (
                                                    '_expected' => null
                                                )
                                            )
                                            '_countValidators' => Array &8 ()
                                            '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                            '_actualCount' => 2
                                            '_returnValue' => null
                                            '_returnQueue' => Array &9 (
                                                0 => ''
                                            )
                                            '_closureQueue' => Array &10 ()
                                            '_setQueue' => Array &11 ()
                                            '_orderNumber' => null
                                            '_globalOrderNumber' => null
                                            '_throw' => false
                                            '_globally' => false
                                            '_passthru' => false
                                        )
                                    )
                                    '_expectedOrder' => null
                                    '_defaults' => Array &12 ()
                                )
                            )
                            '_mockery_expectations_count' => 0
                            '_mockery_ignoreMissing' => false
                            '_mockery_deferMissing' => false
                            '_mockery_verified' => false
                            '_mockery_name' => null
                            '_mockery_allocatedOrder' => 0
                            '_mockery_currentOrder' => 0
                            '_mockery_groups' => Array &13 ()
                            '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d (
                                '_mocks' => Array &14 (
                                    'Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fff7000000005777935d (
                                        '_mockery_expectations' => Array &15 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1ffca000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fff7000000005777935d
                                                '_expectations' => Array &16 (
                                                    0 => Mockery\Expectation Object &0000000021e1fc3f000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fff7000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &17 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fc3e000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &18 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &19 (
                                                            0 => 10
                                                        )
                                                        '_closureQueue' => Array &20 ()
                                                        '_setQueue' => Array &21 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &22 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &23 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &24 ()
                                        '_mockery_mockableMethods' => Array &25 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &26 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fc3a000000005777935d (
                                        '_mockery_expectations' => Array &27 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fc3d000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fc3a000000005777935d
                                                '_expectations' => Array &28 (
                                                    0 => Mockery\Expectation Object &0000000021e1fc3b000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fc3a000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &29 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fc3c000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &30 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &31 (
                                                            0 => 3
                                                        )
                                                        '_closureQueue' => Array &32 ()
                                                        '_setQueue' => Array &33 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &34 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &35 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &36 ()
                                        '_mockery_mockableMethods' => Array &37 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &38 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    'Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fc20000000005777935d (
                                        '_mockery_expectations' => Array &39 (
                                            'unitAmount' => Mockery\ExpectationDirector Object &0000000021e1ffc8000000005777935d (
                                                '_name' => 'unitAmount'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fc20000000005777935d
                                                '_expectations' => Array &40 (
                                                    0 => Mockery\Expectation Object &0000000021e1fc63000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fc20000000005777935d
                                                        '_name' => 'unitAmount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &41 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fc62000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &42 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &43 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fff7000000005777935d
                                                        )
                                                        '_closureQueue' => Array &44 ()
                                                        '_setQueue' => Array &45 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &46 ()
                                            )
                                            'tax' => Mockery\ExpectationDirector Object &0000000021e1fc61000000005777935d (
                                                '_name' => 'tax'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fc20000000005777935d
                                                '_expectations' => Array &47 (
                                                    0 => Mockery\Expectation Object &0000000021e1fc60000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fc20000000005777935d
                                                        '_name' => 'tax'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &48 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fc9f000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &49 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &50 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fc3a000000005777935d
                                                        )
                                                        '_closureQueue' => Array &51 ()
                                                        '_setQueue' => Array &52 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &53 ()
                                            )
                                            'quantity' => Mockery\ExpectationDirector Object &0000000021e1fc9e000000005777935d (
                                                '_name' => 'quantity'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fc20000000005777935d
                                                '_expectations' => Array &54 (
                                                    0 => Mockery\Expectation Object &0000000021e1fc9d000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fc20000000005777935d
                                                        '_name' => 'quantity'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &55 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fc9c000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &56 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &57 (
                                                            0 => 2
                                                        )
                                                        '_closureQueue' => Array &58 ()
                                                        '_setQueue' => Array &59 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &60 ()
                                            )
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fc9b000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fc20000000005777935d
                                                '_expectations' => Array &61 (
                                                    0 => Mockery\Expectation Object &0000000021e1fc9a000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fc20000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &62 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fc99000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &63 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &64 (
                                                            0 => Array &65 ()
                                                        )
                                                        '_closureQueue' => Array &66 ()
                                                        '_setQueue' => Array &67 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &68 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &69 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &70 ()
                                        '_mockery_mockableMethods' => Array &71 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &72 ()
                                        '_mockery_instanceMock' => false
                                        'name' => null
                                        'unitAmount' => null
                                        'quantity' => null
                                        'description' => null
                                        'tax' => null
                                        'sku' => null
                                        'category' => null
                                    )
                                    'Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fcbf000000005777935d (
                                        '_mockery_expectations' => Array &73 (
                                            'itemTotal' => Mockery\ExpectationDirector Object &0000000021e1ffc5000000005777935d (
                                                '_name' => 'itemTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fcbf000000005777935d
                                                '_expectations' => Array &74 (
                                                    0 => Mockery\Expectation Object &0000000021e1fcc2000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fcbf000000005777935d
                                                        '_name' => 'itemTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &75 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fcc1000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &76 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &77 ()
                                                        '_closureQueue' => Array &78 (
                                                            0 => Closure Object &0000000021e1fc39000000005777935d (
                                                                0 => Closure Object &0000000021e1fc39000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &79 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &80 ()
                                            )
                                            'taxTotal' => Mockery\ExpectationDirector Object &0000000021e1fcff000000005777935d (
                                                '_name' => 'taxTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fcbf000000005777935d
                                                '_expectations' => Array &81 (
                                                    0 => Mockery\Expectation Object &0000000021e1fcfe000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fcbf000000005777935d
                                                        '_name' => 'taxTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &82 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fcfd000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &83 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &84 ()
                                                        '_closureQueue' => Array &85 (
                                                            0 => Closure Object &0000000021e1fc98000000005777935d (
                                                                0 => Closure Object &0000000021e1fc98000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &86 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &87 ()
                                            )
                                            'shipping' => Mockery\ExpectationDirector Object &0000000021e1fcfb000000005777935d (
                                                '_name' => 'shipping'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fcbf000000005777935d
                                                '_expectations' => Array &88 (
                                                    0 => Mockery\Expectation Object &0000000021e1fcfa000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fcbf000000005777935d
                                                        '_name' => 'shipping'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &89 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fcf9000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &90 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &91 ()
                                                        '_closureQueue' => Array &92 (
                                                            0 => Closure Object &0000000021e1fc97000000005777935d (
                                                                0 => Closure Object &0000000021e1fc97000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &93 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &94 ()
                                            )
                                            'discount' => Mockery\ExpectationDirector Object &0000000021e1fcf7000000005777935d (
                                                '_name' => 'discount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fcbf000000005777935d
                                                '_expectations' => Array &95 (
                                                    0 => Mockery\Expectation Object &0000000021e1fcf6000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fcbf000000005777935d
                                                        '_name' => 'discount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &96 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fcf5000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &97 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &98 ()
                                                        '_closureQueue' => Array &99 (
                                                            0 => Closure Object &0000000021e1fcc0000000005777935d (
                                                                0 => Closure Object &0000000021e1fcc0000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &100 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &101 ()
                                            )
                                            'shippingDiscount' => Mockery\ExpectationDirector Object &0000000021e1fcf3000000005777935d (
                                                '_name' => 'shippingDiscount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fcbf000000005777935d
                                                '_expectations' => Array &102 (
                                                    0 => Mockery\Expectation Object &0000000021e1fcf2000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fcbf000000005777935d
                                                        '_name' => 'shippingDiscount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &103 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fcf1000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &104 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &105 ()
                                                        '_closureQueue' => Array &106 (
                                                            0 => Closure Object &0000000021e1fcfc000000005777935d (
                                                                0 => Closure Object &0000000021e1fcfc000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &107 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &108 ()
                                            )
                                            'handling' => Mockery\ExpectationDirector Object &0000000021e1fcef000000005777935d (
                                                '_name' => 'handling'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fcbf000000005777935d
                                                '_expectations' => Array &109 (
                                                    0 => Mockery\Expectation Object &0000000021e1fcee000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fcbf000000005777935d
                                                        '_name' => 'handling'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &110 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fced000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &111 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &112 ()
                                                        '_closureQueue' => Array &113 (
                                                            0 => Closure Object &0000000021e1fcf8000000005777935d (
                                                                0 => Closure Object &0000000021e1fcf8000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &114 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &115 ()
                                            )
                                            'insurance' => Mockery\ExpectationDirector Object &0000000021e1fceb000000005777935d (
                                                '_name' => 'insurance'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fcbf000000005777935d
                                                '_expectations' => Array &116 (
                                                    0 => Mockery\Expectation Object &0000000021e1fcea000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fcbf000000005777935d
                                                        '_name' => 'insurance'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &117 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fce9000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &118 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &119 ()
                                                        '_closureQueue' => Array &120 (
                                                            0 => Closure Object &0000000021e1fcf4000000005777935d (
                                                                0 => Closure Object &0000000021e1fcf4000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &121 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &122 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &123 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &124 ()
                                        '_mockery_mockableMethods' => Array &125 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &126 ()
                                        '_mockery_instanceMock' => false
                                        'itemTotal' => null
                                        'shipping' => null
                                        'taxTotal' => null
                                        'handling' => null
                                        'insurance' => null
                                        'shippingDiscount' => null
                                        'discount' => null
                                    )
                                    'Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fd16000000005777935d (
                                        '_mockery_expectations' => Array &127 (
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fcf0000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fd16000000005777935d
                                                '_expectations' => Array &128 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd5d000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fd16000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &129 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd5c000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &130 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &131 (
                                                            0 => Array &132 (
                                                                'value' => Array &133 ()
                                                                'breakdown' => Array &134 ()
                                                            )
                                                        )
                                                        '_closureQueue' => Array &135 ()
                                                        '_setQueue' => Array &136 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &137 ()
                                            )
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fd5b000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fd16000000005777935d
                                                '_expectations' => Array &138 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd5a000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fd16000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &139 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd59000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &140 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &141 (
                                                            0 => 26
                                                        )
                                                        '_closureQueue' => Array &142 ()
                                                        '_setQueue' => Array &143 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &144 ()
                                            )
                                            'breakdown' => Mockery\ExpectationDirector Object &0000000021e1fd58000000005777935d (
                                                '_name' => 'breakdown'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fd16000000005777935d
                                                '_expectations' => Array &145 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd57000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fd16000000005777935d
                                                        '_name' => 'breakdown'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &146 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd56000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &147 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &148 (
                                                            0 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fcbf000000005777935d
                                                        )
                                                        '_closureQueue' => Array &149 ()
                                                        '_setQueue' => Array &150 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &151 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &152 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &153 ()
                                        '_mockery_mockableMethods' => Array &154 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &155 ()
                                        '_mockery_instanceMock' => false
                                        'money' => null
                                        'breakdown' => null
                                    )
                                    1 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fd52000000005777935d (
                                        '_mockery_expectations' => Array &156 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fd55000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fd52000000005777935d
                                                '_expectations' => Array &157 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd53000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fd52000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &158 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd54000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &159 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &160 (
                                                            0 => 10
                                                        )
                                                        '_closureQueue' => Array &161 ()
                                                        '_setQueue' => Array &162 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &163 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &164 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &165 ()
                                        '_mockery_mockableMethods' => Array &166 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &167 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    2 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fd4e000000005777935d (
                                        '_mockery_expectations' => Array &168 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fd51000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fd4e000000005777935d
                                                '_expectations' => Array &169 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd4f000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fd4e000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &170 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd50000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &171 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &172 (
                                                            0 => 3
                                                        )
                                                        '_closureQueue' => Array &173 ()
                                                        '_setQueue' => Array &174 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &175 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &176 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &177 ()
                                        '_mockery_mockableMethods' => Array &178 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &179 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    3 => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fd4a000000005777935d (
                                        '_mockery_expectations' => Array &180 (
                                            'unitAmount' => Mockery\ExpectationDirector Object &0000000021e1fd4d000000005777935d (
                                                '_name' => 'unitAmount'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fd4a000000005777935d
                                                '_expectations' => Array &181 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd4b000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fd4a000000005777935d
                                                        '_name' => 'unitAmount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &182 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd4c000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &183 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &184 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fd52000000005777935d
                                                        )
                                                        '_closureQueue' => Array &185 ()
                                                        '_setQueue' => Array &186 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &187 ()
                                            )
                                            'tax' => Mockery\ExpectationDirector Object &0000000021e1fd49000000005777935d (
                                                '_name' => 'tax'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fd4a000000005777935d
                                                '_expectations' => Array &188 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd48000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fd4a000000005777935d
                                                        '_name' => 'tax'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &189 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd47000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &190 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &191 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fd4e000000005777935d
                                                        )
                                                        '_closureQueue' => Array &192 ()
                                                        '_setQueue' => Array &193 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &194 ()
                                            )
                                            'quantity' => Mockery\ExpectationDirector Object &0000000021e1fd46000000005777935d (
                                                '_name' => 'quantity'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fd4a000000005777935d
                                                '_expectations' => Array &195 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd45000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fd4a000000005777935d
                                                        '_name' => 'quantity'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &196 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd44000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &197 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &198 (
                                                            0 => 2
                                                        )
                                                        '_closureQueue' => Array &199 ()
                                                        '_setQueue' => Array &200 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &201 ()
                                            )
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fd43000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fd4a000000005777935d
                                                '_expectations' => Array &202 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd42000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fd4a000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &203 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd41000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &204 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &205 (
                                                            0 => Array &206 ()
                                                        )
                                                        '_closureQueue' => Array &207 ()
                                                        '_setQueue' => Array &208 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &209 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &210 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &211 ()
                                        '_mockery_mockableMethods' => Array &212 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &213 ()
                                        '_mockery_instanceMock' => false
                                        'name' => null
                                        'unitAmount' => null
                                        'quantity' => null
                                        'description' => null
                                        'tax' => null
                                        'sku' => null
                                        'category' => null
                                    )
                                    4 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd7d000000005777935d (
                                        '_mockery_expectations' => Array &214 (
                                            'itemTotal' => Mockery\ExpectationDirector Object &0000000021e1fd40000000005777935d (
                                                '_name' => 'itemTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd7d000000005777935d
                                                '_expectations' => Array &215 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd7e000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd7d000000005777935d
                                                        '_name' => 'itemTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &216 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd7f000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &217 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &218 ()
                                                        '_closureQueue' => Array &219 (
                                                            0 => Closure Object &0000000021e1fce6000000005777935d (
                                                                0 => Closure Object &0000000021e1fce6000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &220 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &221 ()
                                            )
                                            'taxTotal' => Mockery\ExpectationDirector Object &0000000021e1fd7b000000005777935d (
                                                '_name' => 'taxTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd7d000000005777935d
                                                '_expectations' => Array &222 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd7a000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd7d000000005777935d
                                                        '_name' => 'taxTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &223 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd79000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &224 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &225 ()
                                                        '_closureQueue' => Array &226 (
                                                            0 => Closure Object &0000000021e1fce7000000005777935d (
                                                                0 => Closure Object &0000000021e1fce7000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &227 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &228 ()
                                            )
                                            'shipping' => Mockery\ExpectationDirector Object &0000000021e1fd77000000005777935d (
                                                '_name' => 'shipping'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd7d000000005777935d
                                                '_expectations' => Array &229 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd76000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd7d000000005777935d
                                                        '_name' => 'shipping'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &230 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd75000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &231 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &232 ()
                                                        '_closureQueue' => Array &233 (
                                                            0 => Closure Object &0000000021e1fcec000000005777935d (
                                                                0 => Closure Object &0000000021e1fcec000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &234 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &235 ()
                                            )
                                            'discount' => Mockery\ExpectationDirector Object &0000000021e1fd73000000005777935d (
                                                '_name' => 'discount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd7d000000005777935d
                                                '_expectations' => Array &236 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd72000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd7d000000005777935d
                                                        '_name' => 'discount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &237 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd71000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &238 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &239 ()
                                                        '_closureQueue' => Array &240 (
                                                            0 => Closure Object &0000000021e1fd7c000000005777935d (
                                                                0 => Closure Object &0000000021e1fd7c000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &241 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &242 ()
                                            )
                                            'shippingDiscount' => Mockery\ExpectationDirector Object &0000000021e1fd6f000000005777935d (
                                                '_name' => 'shippingDiscount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd7d000000005777935d
                                                '_expectations' => Array &243 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd6e000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd7d000000005777935d
                                                        '_name' => 'shippingDiscount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &244 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd6d000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &245 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &246 ()
                                                        '_closureQueue' => Array &247 (
                                                            0 => Closure Object &0000000021e1fd78000000005777935d (
                                                                0 => Closure Object &0000000021e1fd78000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &248 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &249 ()
                                            )
                                            'handling' => Mockery\ExpectationDirector Object &0000000021e1fd6b000000005777935d (
                                                '_name' => 'handling'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd7d000000005777935d
                                                '_expectations' => Array &250 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd6a000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd7d000000005777935d
                                                        '_name' => 'handling'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &251 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd69000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &252 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &253 ()
                                                        '_closureQueue' => Array &254 (
                                                            0 => Closure Object &0000000021e1fd74000000005777935d (
                                                                0 => Closure Object &0000000021e1fd74000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &255 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &256 ()
                                            )
                                            'insurance' => Mockery\ExpectationDirector Object &0000000021e1fd67000000005777935d (
                                                '_name' => 'insurance'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd7d000000005777935d
                                                '_expectations' => Array &257 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd66000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd7d000000005777935d
                                                        '_name' => 'insurance'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &258 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd65000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &259 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &260 ()
                                                        '_closureQueue' => Array &261 (
                                                            0 => Closure Object &0000000021e1fd70000000005777935d (
                                                                0 => Closure Object &0000000021e1fd70000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &262 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &263 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &264 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &265 ()
                                        '_mockery_mockableMethods' => Array &266 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &267 ()
                                        '_mockery_instanceMock' => false
                                        'itemTotal' => null
                                        'shipping' => null
                                        'taxTotal' => null
                                        'handling' => null
                                        'insurance' => null
                                        'shippingDiscount' => null
                                        'discount' => null
                                    )
                                    5 => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fd60000000005777935d (
                                        '_mockery_expectations' => Array &268 (
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fd63000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fd60000000005777935d
                                                '_expectations' => Array &269 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd61000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fd60000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &270 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd62000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &271 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &272 (
                                                            0 => Array &273 (
                                                                'value' => Array &274 ()
                                                                'breakdown' => Array &275 ()
                                                            )
                                                        )
                                                        '_closureQueue' => Array &276 ()
                                                        '_setQueue' => Array &277 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &278 ()
                                            )
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fd9f000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fd60000000005777935d
                                                '_expectations' => Array &279 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd9e000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fd60000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &280 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd9d000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &281 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &282 (
                                                            0 => 23
                                                        )
                                                        '_closureQueue' => Array &283 ()
                                                        '_setQueue' => Array &284 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &285 ()
                                            )
                                            'breakdown' => Mockery\ExpectationDirector Object &0000000021e1fd9c000000005777935d (
                                                '_name' => 'breakdown'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fd60000000005777935d
                                                '_expectations' => Array &286 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd9b000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fd60000000005777935d
                                                        '_name' => 'breakdown'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &287 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd9a000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &288 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &289 (
                                                            0 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd7d000000005777935d
                                                        )
                                                        '_closureQueue' => Array &290 ()
                                                        '_setQueue' => Array &291 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &292 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &293 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &294 ()
                                        '_mockery_mockableMethods' => Array &295 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &296 ()
                                        '_mockery_instanceMock' => false
                                        'money' => null
                                        'breakdown' => null
                                    )
                                    6 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fd96000000005777935d (
                                        '_mockery_expectations' => Array &297 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fd99000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fd96000000005777935d
                                                '_expectations' => Array &298 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd97000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fd96000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &299 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd98000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &300 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &301 (
                                                            0 => 10
                                                        )
                                                        '_closureQueue' => Array &302 ()
                                                        '_setQueue' => Array &303 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &304 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &305 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &306 ()
                                        '_mockery_mockableMethods' => Array &307 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &308 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    7 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fd92000000005777935d (
                                        '_mockery_expectations' => Array &309 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fd95000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fd92000000005777935d
                                                '_expectations' => Array &310 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd93000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fd92000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &311 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd94000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &312 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &313 (
                                                            0 => 3
                                                        )
                                                        '_closureQueue' => Array &314 ()
                                                        '_setQueue' => Array &315 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &316 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &317 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &318 ()
                                        '_mockery_mockableMethods' => Array &319 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &320 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    8 => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fd8e000000005777935d (
                                        '_mockery_expectations' => Array &321 (
                                            'unitAmount' => Mockery\ExpectationDirector Object &0000000021e1fd91000000005777935d (
                                                '_name' => 'unitAmount'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fd8e000000005777935d
                                                '_expectations' => Array &322 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd8f000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fd8e000000005777935d
                                                        '_name' => 'unitAmount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &323 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd90000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &324 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &325 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fd96000000005777935d
                                                        )
                                                        '_closureQueue' => Array &326 ()
                                                        '_setQueue' => Array &327 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &328 ()
                                            )
                                            'tax' => Mockery\ExpectationDirector Object &0000000021e1fd8d000000005777935d (
                                                '_name' => 'tax'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fd8e000000005777935d
                                                '_expectations' => Array &329 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd8c000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fd8e000000005777935d
                                                        '_name' => 'tax'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &330 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd8b000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &331 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &332 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fd92000000005777935d
                                                        )
                                                        '_closureQueue' => Array &333 ()
                                                        '_setQueue' => Array &334 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &335 ()
                                            )
                                            'quantity' => Mockery\ExpectationDirector Object &0000000021e1fd8a000000005777935d (
                                                '_name' => 'quantity'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fd8e000000005777935d
                                                '_expectations' => Array &336 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd89000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fd8e000000005777935d
                                                        '_name' => 'quantity'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &337 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd88000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &338 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &339 (
                                                            0 => 2
                                                        )
                                                        '_closureQueue' => Array &340 ()
                                                        '_setQueue' => Array &341 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &342 ()
                                            )
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fd87000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fd8e000000005777935d
                                                '_expectations' => Array &343 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd86000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fd8e000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &344 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd85000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &345 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &346 (
                                                            0 => Array &347 ()
                                                        )
                                                        '_closureQueue' => Array &348 ()
                                                        '_setQueue' => Array &349 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &350 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &351 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &352 ()
                                        '_mockery_mockableMethods' => Array &353 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &354 ()
                                        '_mockery_instanceMock' => false
                                        'name' => null
                                        'unitAmount' => null
                                        'quantity' => null
                                        'description' => null
                                        'tax' => null
                                        'sku' => null
                                        'category' => null
                                    )
                                    9 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd81000000005777935d (
                                        '_mockery_expectations' => Array &355 (
                                            'itemTotal' => Mockery\ExpectationDirector Object &0000000021e1fd84000000005777935d (
                                                '_name' => 'itemTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd81000000005777935d
                                                '_expectations' => Array &356 (
                                                    0 => Mockery\Expectation Object &0000000021e1fd82000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd81000000005777935d
                                                        '_name' => 'itemTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &357 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fd83000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &358 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &359 ()
                                                        '_closureQueue' => Array &360 (
                                                            0 => Closure Object &0000000021e1fd6c000000005777935d (
                                                                0 => Closure Object &0000000021e1fd6c000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &361 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &362 ()
                                            )
                                            'taxTotal' => Mockery\ExpectationDirector Object &0000000021e1fdbf000000005777935d (
                                                '_name' => 'taxTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd81000000005777935d
                                                '_expectations' => Array &363 (
                                                    0 => Mockery\Expectation Object &0000000021e1fdbe000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd81000000005777935d
                                                        '_name' => 'taxTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &364 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fdbd000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &365 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &366 ()
                                                        '_closureQueue' => Array &367 (
                                                            0 => Closure Object &0000000021e1fd68000000005777935d (
                                                                0 => Closure Object &0000000021e1fd68000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &368 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &369 ()
                                            )
                                            'shipping' => Mockery\ExpectationDirector Object &0000000021e1fdbb000000005777935d (
                                                '_name' => 'shipping'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd81000000005777935d
                                                '_expectations' => Array &370 (
                                                    0 => Mockery\Expectation Object &0000000021e1fdba000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd81000000005777935d
                                                        '_name' => 'shipping'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &371 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fdb9000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &372 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &373 ()
                                                        '_closureQueue' => Array &374 (
                                                            0 => Closure Object &0000000021e1fd64000000005777935d (
                                                                0 => Closure Object &0000000021e1fd64000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &375 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &376 ()
                                            )
                                            'discount' => Mockery\ExpectationDirector Object &0000000021e1fdb7000000005777935d (
                                                '_name' => 'discount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd81000000005777935d
                                                '_expectations' => Array &377 (
                                                    0 => Mockery\Expectation Object &0000000021e1fdb6000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd81000000005777935d
                                                        '_name' => 'discount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &378 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fdb5000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &379 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &380 ()
                                                        '_closureQueue' => Array &381 (
                                                            0 => Closure Object &0000000021e1fd80000000005777935d (
                                                                0 => Closure Object &0000000021e1fd80000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &382 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &383 ()
                                            )
                                            'shippingDiscount' => Mockery\ExpectationDirector Object &0000000021e1fdb3000000005777935d (
                                                '_name' => 'shippingDiscount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd81000000005777935d
                                                '_expectations' => Array &384 (
                                                    0 => Mockery\Expectation Object &0000000021e1fdb2000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd81000000005777935d
                                                        '_name' => 'shippingDiscount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &385 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fdb1000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &386 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &387 ()
                                                        '_closureQueue' => Array &388 (
                                                            0 => Closure Object &0000000021e1fdbc000000005777935d (
                                                                0 => Closure Object &0000000021e1fdbc000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &389 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &390 ()
                                            )
                                            'handling' => Mockery\ExpectationDirector Object &0000000021e1fdaf000000005777935d (
                                                '_name' => 'handling'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd81000000005777935d
                                                '_expectations' => Array &391 (
                                                    0 => Mockery\Expectation Object &0000000021e1fdae000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd81000000005777935d
                                                        '_name' => 'handling'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &392 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fdad000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &393 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &394 ()
                                                        '_closureQueue' => Array &395 (
                                                            0 => Closure Object &0000000021e1fdb8000000005777935d (
                                                                0 => Closure Object &0000000021e1fdb8000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &396 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &397 ()
                                            )
                                            'insurance' => Mockery\ExpectationDirector Object &0000000021e1fdab000000005777935d (
                                                '_name' => 'insurance'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd81000000005777935d
                                                '_expectations' => Array &398 (
                                                    0 => Mockery\Expectation Object &0000000021e1fdaa000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd81000000005777935d
                                                        '_name' => 'insurance'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &399 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fda9000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &400 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &401 ()
                                                        '_closureQueue' => Array &402 (
                                                            0 => Closure Object &0000000021e1fdb4000000005777935d (
                                                                0 => Closure Object &0000000021e1fdb4000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &403 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &404 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &405 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &406 ()
                                        '_mockery_mockableMethods' => Array &407 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &408 ()
                                        '_mockery_instanceMock' => false
                                        'itemTotal' => null
                                        'shipping' => null
                                        'taxTotal' => null
                                        'handling' => null
                                        'insurance' => null
                                        'shippingDiscount' => null
                                        'discount' => null
                                    )
                                    10 => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fda4000000005777935d (
                                        '_mockery_expectations' => Array &409 (
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fda7000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fda4000000005777935d
                                                '_expectations' => Array &410 (
                                                    0 => Mockery\Expectation Object &0000000021e1fda5000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fda4000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &411 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fda6000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &412 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &413 (
                                                            0 => Array &414 (
                                                                'value' => Array &415 ()
                                                                'breakdown' => Array &416 ()
                                                            )
                                                        )
                                                        '_closureQueue' => Array &417 ()
                                                        '_setQueue' => Array &418 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &419 ()
                                            )
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fda3000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fda4000000005777935d
                                                '_expectations' => Array &420 (
                                                    0 => Mockery\Expectation Object &0000000021e1fda2000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fda4000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &421 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fda1000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &422 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &423 (
                                                            0 => 25
                                                        )
                                                        '_closureQueue' => Array &424 ()
                                                        '_setQueue' => Array &425 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &426 ()
                                            )
                                            'breakdown' => Mockery\ExpectationDirector Object &0000000021e1fda0000000005777935d (
                                                '_name' => 'breakdown'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fda4000000005777935d
                                                '_expectations' => Array &427 (
                                                    0 => Mockery\Expectation Object &0000000021e1fddf000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fda4000000005777935d
                                                        '_name' => 'breakdown'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &428 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fdde000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &429 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &430 (
                                                            0 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fd81000000005777935d
                                                        )
                                                        '_closureQueue' => Array &431 ()
                                                        '_setQueue' => Array &432 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &433 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &434 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &435 ()
                                        '_mockery_mockableMethods' => Array &436 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &437 ()
                                        '_mockery_instanceMock' => false
                                        'money' => null
                                        'breakdown' => null
                                    )
                                    11 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fdda000000005777935d (
                                        '_mockery_expectations' => Array &438 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fddd000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fdda000000005777935d
                                                '_expectations' => Array &439 (
                                                    0 => Mockery\Expectation Object &0000000021e1fddb000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fdda000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &440 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fddc000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &441 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &442 (
                                                            0 => 10
                                                        )
                                                        '_closureQueue' => Array &443 ()
                                                        '_setQueue' => Array &444 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &445 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &446 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &447 ()
                                        '_mockery_mockableMethods' => Array &448 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &449 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    12 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fdd6000000005777935d (
                                        '_mockery_expectations' => Array &450 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fdd9000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fdd6000000005777935d
                                                '_expectations' => Array &451 (
                                                    0 => Mockery\Expectation Object &0000000021e1fdd7000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fdd6000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &452 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fdd8000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &453 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &454 (
                                                            0 => 3
                                                        )
                                                        '_closureQueue' => Array &455 ()
                                                        '_setQueue' => Array &456 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &457 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &458 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &459 ()
                                        '_mockery_mockableMethods' => Array &460 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &461 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    13 => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fdd2000000005777935d (
                                        '_mockery_expectations' => Array &462 (
                                            'unitAmount' => Mockery\ExpectationDirector Object &0000000021e1fdd5000000005777935d (
                                                '_name' => 'unitAmount'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fdd2000000005777935d
                                                '_expectations' => Array &463 (
                                                    0 => Mockery\Expectation Object &0000000021e1fdd3000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fdd2000000005777935d
                                                        '_name' => 'unitAmount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &464 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fdd4000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &465 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &466 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fdda000000005777935d
                                                        )
                                                        '_closureQueue' => Array &467 ()
                                                        '_setQueue' => Array &468 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &469 ()
                                            )
                                            'tax' => Mockery\ExpectationDirector Object &0000000021e1fdd1000000005777935d (
                                                '_name' => 'tax'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fdd2000000005777935d
                                                '_expectations' => Array &470 (
                                                    0 => Mockery\Expectation Object &0000000021e1fdd0000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fdd2000000005777935d
                                                        '_name' => 'tax'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &471 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fdcf000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &472 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &473 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fdd6000000005777935d
                                                        )
                                                        '_closureQueue' => Array &474 ()
                                                        '_setQueue' => Array &475 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &476 ()
                                            )
                                            'quantity' => Mockery\ExpectationDirector Object &0000000021e1fdce000000005777935d (
                                                '_name' => 'quantity'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fdd2000000005777935d
                                                '_expectations' => Array &477 (
                                                    0 => Mockery\Expectation Object &0000000021e1fdcd000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fdd2000000005777935d
                                                        '_name' => 'quantity'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &478 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fdcc000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &479 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &480 (
                                                            0 => 2
                                                        )
                                                        '_closureQueue' => Array &481 ()
                                                        '_setQueue' => Array &482 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &483 ()
                                            )
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fdcb000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fdd2000000005777935d
                                                '_expectations' => Array &484 (
                                                    0 => Mockery\Expectation Object &0000000021e1fdca000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fdd2000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &485 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fdc9000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &486 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &487 (
                                                            0 => Array &488 ()
                                                        )
                                                        '_closureQueue' => Array &489 ()
                                                        '_setQueue' => Array &490 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &491 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &492 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &493 ()
                                        '_mockery_mockableMethods' => Array &494 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &495 ()
                                        '_mockery_instanceMock' => false
                                        'name' => null
                                        'unitAmount' => null
                                        'quantity' => null
                                        'description' => null
                                        'tax' => null
                                        'sku' => null
                                        'category' => null
                                    )
                                    14 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fdc5000000005777935d (
                                        '_mockery_expectations' => Array &496 (
                                            'itemTotal' => Mockery\ExpectationDirector Object &0000000021e1fdc8000000005777935d (
                                                '_name' => 'itemTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fdc5000000005777935d
                                                '_expectations' => Array &497 (
                                                    0 => Mockery\Expectation Object &0000000021e1fdc6000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fdc5000000005777935d
                                                        '_name' => 'itemTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &498 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fdc7000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &499 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &500 ()
                                                        '_closureQueue' => Array &501 (
                                                            0 => Closure Object &0000000021e1fdb0000000005777935d (
                                                                0 => Closure Object &0000000021e1fdb0000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &502 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &503 ()
                                            )
                                            'taxTotal' => Mockery\ExpectationDirector Object &0000000021e1fdc3000000005777935d (
                                                '_name' => 'taxTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fdc5000000005777935d
                                                '_expectations' => Array &504 (
                                                    0 => Mockery\Expectation Object &0000000021e1fdc2000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fdc5000000005777935d
                                                        '_name' => 'taxTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &505 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fdc1000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &506 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &507 ()
                                                        '_closureQueue' => Array &508 (
                                                            0 => Closure Object &0000000021e1fdac000000005777935d (
                                                                0 => Closure Object &0000000021e1fdac000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &509 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &510 ()
                                            )
                                            'shipping' => Mockery\ExpectationDirector Object &0000000021e1fdff000000005777935d (
                                                '_name' => 'shipping'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fdc5000000005777935d
                                                '_expectations' => Array &511 (
                                                    0 => Mockery\Expectation Object &0000000021e1fdfe000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fdc5000000005777935d
                                                        '_name' => 'shipping'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &512 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fdfd000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &513 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &514 ()
                                                        '_closureQueue' => Array &515 (
                                                            0 => Closure Object &0000000021e1fda8000000005777935d (
                                                                0 => Closure Object &0000000021e1fda8000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &516 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &517 ()
                                            )
                                            'discount' => Mockery\ExpectationDirector Object &0000000021e1fdfb000000005777935d (
                                                '_name' => 'discount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fdc5000000005777935d
                                                '_expectations' => Array &518 (
                                                    0 => Mockery\Expectation Object &0000000021e1fdfa000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fdc5000000005777935d
                                                        '_name' => 'discount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &519 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fdf9000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &520 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &521 ()
                                                        '_closureQueue' => Array &522 (
                                                            0 => Closure Object &0000000021e1fdc4000000005777935d (
                                                                0 => Closure Object &0000000021e1fdc4000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &523 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &524 ()
                                            )
                                            'shippingDiscount' => Mockery\ExpectationDirector Object &0000000021e1fdf7000000005777935d (
                                                '_name' => 'shippingDiscount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fdc5000000005777935d
                                                '_expectations' => Array &525 (
                                                    0 => Mockery\Expectation Object &0000000021e1fdf6000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fdc5000000005777935d
                                                        '_name' => 'shippingDiscount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &526 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fdf5000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &527 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &528 ()
                                                        '_closureQueue' => Array &529 (
                                                            0 => Closure Object &0000000021e1fdc0000000005777935d (
                                                                0 => Closure Object &0000000021e1fdc0000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &530 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &531 ()
                                            )
                                            'handling' => Mockery\ExpectationDirector Object &0000000021e1fdf3000000005777935d (
                                                '_name' => 'handling'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fdc5000000005777935d
                                                '_expectations' => Array &532 (
                                                    0 => Mockery\Expectation Object &0000000021e1fdf2000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fdc5000000005777935d
                                                        '_name' => 'handling'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &533 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fdf1000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &534 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &535 ()
                                                        '_closureQueue' => Array &536 (
                                                            0 => Closure Object &0000000021e1fdfc000000005777935d (
                                                                0 => Closure Object &0000000021e1fdfc000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &537 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &538 ()
                                            )
                                            'insurance' => Mockery\ExpectationDirector Object &0000000021e1fdef000000005777935d (
                                                '_name' => 'insurance'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fdc5000000005777935d
                                                '_expectations' => Array &539 (
                                                    0 => Mockery\Expectation Object &0000000021e1fdee000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fdc5000000005777935d
                                                        '_name' => 'insurance'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &540 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fded000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &541 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &542 ()
                                                        '_closureQueue' => Array &543 (
                                                            0 => Closure Object &0000000021e1fdf8000000005777935d (
                                                                0 => Closure Object &0000000021e1fdf8000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &544 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &545 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &546 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &547 ()
                                        '_mockery_mockableMethods' => Array &548 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &549 ()
                                        '_mockery_instanceMock' => false
                                        'itemTotal' => null
                                        'shipping' => null
                                        'taxTotal' => null
                                        'handling' => null
                                        'insurance' => null
                                        'shippingDiscount' => null
                                        'discount' => null
                                    )
                                    15 => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fde8000000005777935d (
                                        '_mockery_expectations' => Array &550 (
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fdeb000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fde8000000005777935d
                                                '_expectations' => Array &551 (
                                                    0 => Mockery\Expectation Object &0000000021e1fde9000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fde8000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &552 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fdea000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &553 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &554 (
                                                            0 => Array &555 (
                                                                'value' => Array &556 ()
                                                                'breakdown' => Array &557 ()
                                                            )
                                                        )
                                                        '_closureQueue' => Array &558 ()
                                                        '_setQueue' => Array &559 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &560 ()
                                            )
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fde7000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fde8000000005777935d
                                                '_expectations' => Array &561 (
                                                    0 => Mockery\Expectation Object &0000000021e1fde6000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fde8000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &562 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fde5000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &563 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &564 (
                                                            0 => 23
                                                        )
                                                        '_closureQueue' => Array &565 ()
                                                        '_setQueue' => Array &566 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &567 ()
                                            )
                                            'breakdown' => Mockery\ExpectationDirector Object &0000000021e1fde4000000005777935d (
                                                '_name' => 'breakdown'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fde8000000005777935d
                                                '_expectations' => Array &568 (
                                                    0 => Mockery\Expectation Object &0000000021e1fde3000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fde8000000005777935d
                                                        '_name' => 'breakdown'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &569 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fde2000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &570 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &571 (
                                                            0 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fdc5000000005777935d
                                                        )
                                                        '_closureQueue' => Array &572 ()
                                                        '_setQueue' => Array &573 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &574 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &575 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &576 ()
                                        '_mockery_mockableMethods' => Array &577 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &578 ()
                                        '_mockery_instanceMock' => false
                                        'money' => null
                                        'breakdown' => null
                                    )
                                    16 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa1e000000005777935d (
                                        '_mockery_expectations' => Array &579 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fde1000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa1e000000005777935d
                                                '_expectations' => Array &580 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa1f000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa1e000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &581 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fde0000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &582 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &583 (
                                                            0 => 10
                                                        )
                                                        '_closureQueue' => Array &584 ()
                                                        '_setQueue' => Array &585 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &586 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &587 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &588 ()
                                        '_mockery_mockableMethods' => Array &589 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &590 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    17 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa1a000000005777935d (
                                        '_mockery_expectations' => Array &591 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fa1d000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa1a000000005777935d
                                                '_expectations' => Array &592 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa1b000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa1a000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &593 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa1c000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &594 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &595 (
                                                            0 => 3
                                                        )
                                                        '_closureQueue' => Array &596 ()
                                                        '_setQueue' => Array &597 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &598 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &599 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &600 ()
                                        '_mockery_mockableMethods' => Array &601 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &602 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    18 => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa16000000005777935d (
                                        '_mockery_expectations' => Array &603 (
                                            'unitAmount' => Mockery\ExpectationDirector Object &0000000021e1fa19000000005777935d (
                                                '_name' => 'unitAmount'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa16000000005777935d
                                                '_expectations' => Array &604 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa17000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa16000000005777935d
                                                        '_name' => 'unitAmount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &605 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa18000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &606 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &607 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa1e000000005777935d
                                                        )
                                                        '_closureQueue' => Array &608 ()
                                                        '_setQueue' => Array &609 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &610 ()
                                            )
                                            'tax' => Mockery\ExpectationDirector Object &0000000021e1fa15000000005777935d (
                                                '_name' => 'tax'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa16000000005777935d
                                                '_expectations' => Array &611 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa14000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa16000000005777935d
                                                        '_name' => 'tax'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &612 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa13000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &613 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &614 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa1a000000005777935d
                                                        )
                                                        '_closureQueue' => Array &615 ()
                                                        '_setQueue' => Array &616 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &617 ()
                                            )
                                            'quantity' => Mockery\ExpectationDirector Object &0000000021e1fa12000000005777935d (
                                                '_name' => 'quantity'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa16000000005777935d
                                                '_expectations' => Array &618 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa11000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa16000000005777935d
                                                        '_name' => 'quantity'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &619 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa10000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &620 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &621 (
                                                            0 => 2
                                                        )
                                                        '_closureQueue' => Array &622 ()
                                                        '_setQueue' => Array &623 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &624 ()
                                            )
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fa0f000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa16000000005777935d
                                                '_expectations' => Array &625 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa0e000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa16000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &626 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa0d000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &627 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &628 (
                                                            0 => Array &629 ()
                                                        )
                                                        '_closureQueue' => Array &630 ()
                                                        '_setQueue' => Array &631 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &632 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &633 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &634 ()
                                        '_mockery_mockableMethods' => Array &635 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &636 ()
                                        '_mockery_instanceMock' => false
                                        'name' => null
                                        'unitAmount' => null
                                        'quantity' => null
                                        'description' => null
                                        'tax' => null
                                        'sku' => null
                                        'category' => null
                                    )
                                    19 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa09000000005777935d (
                                        '_mockery_expectations' => Array &637 (
                                            'itemTotal' => Mockery\ExpectationDirector Object &0000000021e1fa0c000000005777935d (
                                                '_name' => 'itemTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa09000000005777935d
                                                '_expectations' => Array &638 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa0a000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa09000000005777935d
                                                        '_name' => 'itemTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &639 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa0b000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &640 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &641 ()
                                                        '_closureQueue' => Array &642 (
                                                            0 => Closure Object &0000000021e1fdf4000000005777935d (
                                                                0 => Closure Object &0000000021e1fdf4000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &643 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &644 ()
                                            )
                                            'taxTotal' => Mockery\ExpectationDirector Object &0000000021e1fa07000000005777935d (
                                                '_name' => 'taxTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa09000000005777935d
                                                '_expectations' => Array &645 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa06000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa09000000005777935d
                                                        '_name' => 'taxTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &646 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa05000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &647 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &648 ()
                                                        '_closureQueue' => Array &649 (
                                                            0 => Closure Object &0000000021e1fdf0000000005777935d (
                                                                0 => Closure Object &0000000021e1fdf0000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &650 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &651 ()
                                            )
                                            'shipping' => Mockery\ExpectationDirector Object &0000000021e1fa03000000005777935d (
                                                '_name' => 'shipping'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa09000000005777935d
                                                '_expectations' => Array &652 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa02000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa09000000005777935d
                                                        '_name' => 'shipping'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &653 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa01000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &654 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &655 ()
                                                        '_closureQueue' => Array &656 (
                                                            0 => Closure Object &0000000021e1fdec000000005777935d (
                                                                0 => Closure Object &0000000021e1fdec000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &657 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &658 ()
                                            )
                                            'discount' => Mockery\ExpectationDirector Object &0000000021e1fa3f000000005777935d (
                                                '_name' => 'discount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa09000000005777935d
                                                '_expectations' => Array &659 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa3e000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa09000000005777935d
                                                        '_name' => 'discount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &660 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa3d000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &661 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &662 ()
                                                        '_closureQueue' => Array &663 (
                                                            0 => Closure Object &0000000021e1fa08000000005777935d (
                                                                0 => Closure Object &0000000021e1fa08000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &664 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &665 ()
                                            )
                                            'shippingDiscount' => Mockery\ExpectationDirector Object &0000000021e1fa3b000000005777935d (
                                                '_name' => 'shippingDiscount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa09000000005777935d
                                                '_expectations' => Array &666 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa3a000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa09000000005777935d
                                                        '_name' => 'shippingDiscount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &667 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa39000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &668 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &669 ()
                                                        '_closureQueue' => Array &670 (
                                                            0 => Closure Object &0000000021e1fa04000000005777935d (
                                                                0 => Closure Object &0000000021e1fa04000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &671 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &672 ()
                                            )
                                            'handling' => Mockery\ExpectationDirector Object &0000000021e1fa37000000005777935d (
                                                '_name' => 'handling'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa09000000005777935d
                                                '_expectations' => Array &673 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa36000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa09000000005777935d
                                                        '_name' => 'handling'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &674 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa35000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &675 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &676 ()
                                                        '_closureQueue' => Array &677 (
                                                            0 => Closure Object &0000000021e1fa00000000005777935d (
                                                                0 => Closure Object &0000000021e1fa00000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &678 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &679 ()
                                            )
                                            'insurance' => Mockery\ExpectationDirector Object &0000000021e1fa33000000005777935d (
                                                '_name' => 'insurance'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa09000000005777935d
                                                '_expectations' => Array &680 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa32000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa09000000005777935d
                                                        '_name' => 'insurance'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &681 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa31000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &682 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &683 ()
                                                        '_closureQueue' => Array &684 (
                                                            0 => Closure Object &0000000021e1fa3c000000005777935d (
                                                                0 => Closure Object &0000000021e1fa3c000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &685 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &686 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &687 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &688 ()
                                        '_mockery_mockableMethods' => Array &689 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &690 ()
                                        '_mockery_instanceMock' => false
                                        'itemTotal' => null
                                        'shipping' => null
                                        'taxTotal' => null
                                        'handling' => null
                                        'insurance' => null
                                        'shippingDiscount' => null
                                        'discount' => null
                                    )
                                    20 => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fa2c000000005777935d (
                                        '_mockery_expectations' => Array &691 (
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fa2f000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fa2c000000005777935d
                                                '_expectations' => Array &692 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa2d000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fa2c000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &693 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa2e000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &694 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &695 (
                                                            0 => Array &696 (
                                                                'value' => Array &697 ()
                                                                'breakdown' => Array &698 ()
                                                            )
                                                        )
                                                        '_closureQueue' => Array &699 ()
                                                        '_setQueue' => Array &700 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &701 ()
                                            )
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fa2b000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fa2c000000005777935d
                                                '_expectations' => Array &702 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa2a000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fa2c000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &703 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa29000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &704 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &705 (
                                                            0 => 26
                                                        )
                                                        '_closureQueue' => Array &706 ()
                                                        '_setQueue' => Array &707 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &708 ()
                                            )
                                            'breakdown' => Mockery\ExpectationDirector Object &0000000021e1fa28000000005777935d (
                                                '_name' => 'breakdown'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fa2c000000005777935d
                                                '_expectations' => Array &709 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa27000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fa2c000000005777935d
                                                        '_name' => 'breakdown'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &710 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa26000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &711 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &712 (
                                                            0 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa09000000005777935d
                                                        )
                                                        '_closureQueue' => Array &713 ()
                                                        '_setQueue' => Array &714 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &715 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &716 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &717 ()
                                        '_mockery_mockableMethods' => Array &718 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &719 ()
                                        '_mockery_instanceMock' => false
                                        'money' => null
                                        'breakdown' => null
                                    )
                                    21 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa22000000005777935d (
                                        '_mockery_expectations' => Array &720 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fa25000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa22000000005777935d
                                                '_expectations' => Array &721 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa23000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa22000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &722 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa24000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &723 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &724 (
                                                            0 => 10
                                                        )
                                                        '_closureQueue' => Array &725 ()
                                                        '_setQueue' => Array &726 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &727 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &728 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &729 ()
                                        '_mockery_mockableMethods' => Array &730 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &731 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    22 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa5e000000005777935d (
                                        '_mockery_expectations' => Array &732 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fa21000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa5e000000005777935d
                                                '_expectations' => Array &733 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa5f000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa5e000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &734 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa20000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &735 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &736 (
                                                            0 => 3
                                                        )
                                                        '_closureQueue' => Array &737 ()
                                                        '_setQueue' => Array &738 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &739 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &740 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &741 ()
                                        '_mockery_mockableMethods' => Array &742 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &743 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    23 => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa5a000000005777935d (
                                        '_mockery_expectations' => Array &744 (
                                            'unitAmount' => Mockery\ExpectationDirector Object &0000000021e1fa5d000000005777935d (
                                                '_name' => 'unitAmount'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa5a000000005777935d
                                                '_expectations' => Array &745 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa5b000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa5a000000005777935d
                                                        '_name' => 'unitAmount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &746 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa5c000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &747 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &748 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa22000000005777935d
                                                        )
                                                        '_closureQueue' => Array &749 ()
                                                        '_setQueue' => Array &750 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &751 ()
                                            )
                                            'tax' => Mockery\ExpectationDirector Object &0000000021e1fa59000000005777935d (
                                                '_name' => 'tax'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa5a000000005777935d
                                                '_expectations' => Array &752 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa58000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa5a000000005777935d
                                                        '_name' => 'tax'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &753 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa57000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &754 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &755 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa5e000000005777935d
                                                        )
                                                        '_closureQueue' => Array &756 ()
                                                        '_setQueue' => Array &757 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &758 ()
                                            )
                                            'quantity' => Mockery\ExpectationDirector Object &0000000021e1fa56000000005777935d (
                                                '_name' => 'quantity'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa5a000000005777935d
                                                '_expectations' => Array &759 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa55000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa5a000000005777935d
                                                        '_name' => 'quantity'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &760 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa54000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &761 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &762 (
                                                            0 => 2
                                                        )
                                                        '_closureQueue' => Array &763 ()
                                                        '_setQueue' => Array &764 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &765 ()
                                            )
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fa53000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa5a000000005777935d
                                                '_expectations' => Array &766 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa52000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa5a000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &767 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa51000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &768 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &769 (
                                                            0 => Array &770 ()
                                                        )
                                                        '_closureQueue' => Array &771 ()
                                                        '_setQueue' => Array &772 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &773 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &774 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &775 ()
                                        '_mockery_mockableMethods' => Array &776 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &777 ()
                                        '_mockery_instanceMock' => false
                                        'name' => null
                                        'unitAmount' => null
                                        'quantity' => null
                                        'description' => null
                                        'tax' => null
                                        'sku' => null
                                        'category' => null
                                    )
                                    24 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa4d000000005777935d (
                                        '_mockery_expectations' => Array &778 (
                                            'itemTotal' => Mockery\ExpectationDirector Object &0000000021e1fa50000000005777935d (
                                                '_name' => 'itemTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa4d000000005777935d
                                                '_expectations' => Array &779 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa4e000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa4d000000005777935d
                                                        '_name' => 'itemTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &780 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa4f000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &781 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &782 ()
                                                        '_closureQueue' => Array &783 (
                                                            0 => Closure Object &0000000021e1fa38000000005777935d (
                                                                0 => Closure Object &0000000021e1fa38000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &784 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &785 ()
                                            )
                                            'taxTotal' => Mockery\ExpectationDirector Object &0000000021e1fa4b000000005777935d (
                                                '_name' => 'taxTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa4d000000005777935d
                                                '_expectations' => Array &786 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa4a000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa4d000000005777935d
                                                        '_name' => 'taxTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &787 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa49000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &788 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &789 ()
                                                        '_closureQueue' => Array &790 (
                                                            0 => Closure Object &0000000021e1fa34000000005777935d (
                                                                0 => Closure Object &0000000021e1fa34000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &791 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &792 ()
                                            )
                                            'shipping' => Mockery\ExpectationDirector Object &0000000021e1fa47000000005777935d (
                                                '_name' => 'shipping'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa4d000000005777935d
                                                '_expectations' => Array &793 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa46000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa4d000000005777935d
                                                        '_name' => 'shipping'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &794 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa45000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &795 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &796 ()
                                                        '_closureQueue' => Array &797 (
                                                            0 => Closure Object &0000000021e1fa30000000005777935d (
                                                                0 => Closure Object &0000000021e1fa30000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &798 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &799 ()
                                            )
                                            'discount' => Mockery\ExpectationDirector Object &0000000021e1fa43000000005777935d (
                                                '_name' => 'discount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa4d000000005777935d
                                                '_expectations' => Array &800 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa42000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa4d000000005777935d
                                                        '_name' => 'discount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &801 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa41000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &802 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &803 ()
                                                        '_closureQueue' => Array &804 (
                                                            0 => Closure Object &0000000021e1fa4c000000005777935d (
                                                                0 => Closure Object &0000000021e1fa4c000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &805 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &806 ()
                                            )
                                            'shippingDiscount' => Mockery\ExpectationDirector Object &0000000021e1fa7f000000005777935d (
                                                '_name' => 'shippingDiscount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa4d000000005777935d
                                                '_expectations' => Array &807 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa7e000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa4d000000005777935d
                                                        '_name' => 'shippingDiscount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &808 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa7d000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &809 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &810 ()
                                                        '_closureQueue' => Array &811 (
                                                            0 => Closure Object &0000000021e1fa48000000005777935d (
                                                                0 => Closure Object &0000000021e1fa48000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &812 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &813 ()
                                            )
                                            'handling' => Mockery\ExpectationDirector Object &0000000021e1fa7b000000005777935d (
                                                '_name' => 'handling'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa4d000000005777935d
                                                '_expectations' => Array &814 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa7a000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa4d000000005777935d
                                                        '_name' => 'handling'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &815 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa79000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &816 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &817 ()
                                                        '_closureQueue' => Array &818 (
                                                            0 => Closure Object &0000000021e1fa44000000005777935d (
                                                                0 => Closure Object &0000000021e1fa44000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &819 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &820 ()
                                            )
                                            'insurance' => Mockery\ExpectationDirector Object &0000000021e1fa77000000005777935d (
                                                '_name' => 'insurance'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa4d000000005777935d
                                                '_expectations' => Array &821 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa76000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa4d000000005777935d
                                                        '_name' => 'insurance'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &822 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa75000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &823 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &824 ()
                                                        '_closureQueue' => Array &825 (
                                                            0 => Closure Object &0000000021e1fa40000000005777935d (
                                                                0 => Closure Object &0000000021e1fa40000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &826 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &827 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &828 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &829 ()
                                        '_mockery_mockableMethods' => Array &830 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &831 ()
                                        '_mockery_instanceMock' => false
                                        'itemTotal' => null
                                        'shipping' => null
                                        'taxTotal' => null
                                        'handling' => null
                                        'insurance' => null
                                        'shippingDiscount' => null
                                        'discount' => null
                                    )
                                    25 => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fa70000000005777935d (
                                        '_mockery_expectations' => Array &832 (
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fa73000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fa70000000005777935d
                                                '_expectations' => Array &833 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa71000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fa70000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &834 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa72000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &835 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &836 (
                                                            0 => Array &837 (
                                                                'value' => Array &838 ()
                                                                'breakdown' => Array &839 ()
                                                            )
                                                        )
                                                        '_closureQueue' => Array &840 ()
                                                        '_setQueue' => Array &841 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &842 ()
                                            )
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fa6f000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fa70000000005777935d
                                                '_expectations' => Array &843 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa6e000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fa70000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &844 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa6d000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &845 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &846 (
                                                            0 => 29
                                                        )
                                                        '_closureQueue' => Array &847 ()
                                                        '_setQueue' => Array &848 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &849 ()
                                            )
                                            'breakdown' => Mockery\ExpectationDirector Object &0000000021e1fa6c000000005777935d (
                                                '_name' => 'breakdown'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fa70000000005777935d
                                                '_expectations' => Array &850 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa6b000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fa70000000005777935d
                                                        '_name' => 'breakdown'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &851 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa6a000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &852 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &853 (
                                                            0 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa4d000000005777935d
                                                        )
                                                        '_closureQueue' => Array &854 ()
                                                        '_setQueue' => Array &855 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &856 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &857 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &858 ()
                                        '_mockery_mockableMethods' => Array &859 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &860 ()
                                        '_mockery_instanceMock' => false
                                        'money' => null
                                        'breakdown' => null
                                    )
                                    26 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa66000000005777935d (
                                        '_mockery_expectations' => Array &861 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fa69000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa66000000005777935d
                                                '_expectations' => Array &862 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa67000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa66000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &863 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa68000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &864 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &865 (
                                                            0 => 10
                                                        )
                                                        '_closureQueue' => Array &866 ()
                                                        '_setQueue' => Array &867 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &868 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &869 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &870 ()
                                        '_mockery_mockableMethods' => Array &871 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &872 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    27 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa62000000005777935d (
                                        '_mockery_expectations' => Array &873 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fa65000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa62000000005777935d
                                                '_expectations' => Array &874 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa63000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa62000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &875 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa64000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &876 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &877 (
                                                            0 => 3
                                                        )
                                                        '_closureQueue' => Array &878 ()
                                                        '_setQueue' => Array &879 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &880 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &881 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &882 ()
                                        '_mockery_mockableMethods' => Array &883 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &884 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    28 => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa9e000000005777935d (
                                        '_mockery_expectations' => Array &885 (
                                            'unitAmount' => Mockery\ExpectationDirector Object &0000000021e1fa61000000005777935d (
                                                '_name' => 'unitAmount'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa9e000000005777935d
                                                '_expectations' => Array &886 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa9f000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa9e000000005777935d
                                                        '_name' => 'unitAmount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &887 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa60000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &888 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &889 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa66000000005777935d
                                                        )
                                                        '_closureQueue' => Array &890 ()
                                                        '_setQueue' => Array &891 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &892 ()
                                            )
                                            'tax' => Mockery\ExpectationDirector Object &0000000021e1fa9d000000005777935d (
                                                '_name' => 'tax'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa9e000000005777935d
                                                '_expectations' => Array &893 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa9c000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa9e000000005777935d
                                                        '_name' => 'tax'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &894 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa9b000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &895 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &896 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fa62000000005777935d
                                                        )
                                                        '_closureQueue' => Array &897 ()
                                                        '_setQueue' => Array &898 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &899 ()
                                            )
                                            'quantity' => Mockery\ExpectationDirector Object &0000000021e1fa9a000000005777935d (
                                                '_name' => 'quantity'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa9e000000005777935d
                                                '_expectations' => Array &900 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa99000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa9e000000005777935d
                                                        '_name' => 'quantity'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &901 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa98000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &902 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &903 (
                                                            0 => 2
                                                        )
                                                        '_closureQueue' => Array &904 ()
                                                        '_setQueue' => Array &905 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &906 ()
                                            )
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fa97000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa9e000000005777935d
                                                '_expectations' => Array &907 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa96000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fa9e000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &908 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa95000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &909 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &910 (
                                                            0 => Array &911 ()
                                                        )
                                                        '_closureQueue' => Array &912 ()
                                                        '_setQueue' => Array &913 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &914 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &915 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &916 ()
                                        '_mockery_mockableMethods' => Array &917 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &918 ()
                                        '_mockery_instanceMock' => false
                                        'name' => null
                                        'unitAmount' => null
                                        'quantity' => null
                                        'description' => null
                                        'tax' => null
                                        'sku' => null
                                        'category' => null
                                    )
                                    29 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa91000000005777935d (
                                        '_mockery_expectations' => Array &919 (
                                            'itemTotal' => Mockery\ExpectationDirector Object &0000000021e1fa94000000005777935d (
                                                '_name' => 'itemTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa91000000005777935d
                                                '_expectations' => Array &920 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa92000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa91000000005777935d
                                                        '_name' => 'itemTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &921 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa93000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &922 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &923 ()
                                                        '_closureQueue' => Array &924 (
                                                            0 => Closure Object &0000000021e1fa7c000000005777935d (
                                                                0 => Closure Object &0000000021e1fa7c000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &925 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &926 ()
                                            )
                                            'taxTotal' => Mockery\ExpectationDirector Object &0000000021e1fa8f000000005777935d (
                                                '_name' => 'taxTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa91000000005777935d
                                                '_expectations' => Array &927 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa8e000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa91000000005777935d
                                                        '_name' => 'taxTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &928 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa8d000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &929 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &930 ()
                                                        '_closureQueue' => Array &931 (
                                                            0 => Closure Object &0000000021e1fa78000000005777935d (
                                                                0 => Closure Object &0000000021e1fa78000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &932 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &933 ()
                                            )
                                            'shipping' => Mockery\ExpectationDirector Object &0000000021e1fa8b000000005777935d (
                                                '_name' => 'shipping'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa91000000005777935d
                                                '_expectations' => Array &934 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa8a000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa91000000005777935d
                                                        '_name' => 'shipping'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &935 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa89000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &936 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &937 ()
                                                        '_closureQueue' => Array &938 (
                                                            0 => Closure Object &0000000021e1fa74000000005777935d (
                                                                0 => Closure Object &0000000021e1fa74000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &939 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &940 ()
                                            )
                                            'discount' => Mockery\ExpectationDirector Object &0000000021e1fa87000000005777935d (
                                                '_name' => 'discount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa91000000005777935d
                                                '_expectations' => Array &941 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa86000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa91000000005777935d
                                                        '_name' => 'discount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &942 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa85000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &943 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &944 ()
                                                        '_closureQueue' => Array &945 (
                                                            0 => Closure Object &0000000021e1fa90000000005777935d (
                                                                0 => Closure Object &0000000021e1fa90000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &946 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &947 ()
                                            )
                                            'shippingDiscount' => Mockery\ExpectationDirector Object &0000000021e1fa83000000005777935d (
                                                '_name' => 'shippingDiscount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa91000000005777935d
                                                '_expectations' => Array &948 (
                                                    0 => Mockery\Expectation Object &0000000021e1fa82000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa91000000005777935d
                                                        '_name' => 'shippingDiscount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &949 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fa81000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &950 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &951 ()
                                                        '_closureQueue' => Array &952 (
                                                            0 => Closure Object &0000000021e1fa8c000000005777935d (
                                                                0 => Closure Object &0000000021e1fa8c000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &953 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &954 ()
                                            )
                                            'handling' => Mockery\ExpectationDirector Object &0000000021e1fabf000000005777935d (
                                                '_name' => 'handling'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa91000000005777935d
                                                '_expectations' => Array &955 (
                                                    0 => Mockery\Expectation Object &0000000021e1fabe000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa91000000005777935d
                                                        '_name' => 'handling'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &956 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fabd000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &957 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &958 ()
                                                        '_closureQueue' => Array &959 (
                                                            0 => Closure Object &0000000021e1fa88000000005777935d (
                                                                0 => Closure Object &0000000021e1fa88000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &960 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &961 ()
                                            )
                                            'insurance' => Mockery\ExpectationDirector Object &0000000021e1fabb000000005777935d (
                                                '_name' => 'insurance'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa91000000005777935d
                                                '_expectations' => Array &962 (
                                                    0 => Mockery\Expectation Object &0000000021e1faba000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa91000000005777935d
                                                        '_name' => 'insurance'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &963 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fab9000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &964 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &965 ()
                                                        '_closureQueue' => Array &966 (
                                                            0 => Closure Object &0000000021e1fa84000000005777935d (
                                                                0 => Closure Object &0000000021e1fa84000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &967 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &968 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &969 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &970 ()
                                        '_mockery_mockableMethods' => Array &971 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &972 ()
                                        '_mockery_instanceMock' => false
                                        'itemTotal' => null
                                        'shipping' => null
                                        'taxTotal' => null
                                        'handling' => null
                                        'insurance' => null
                                        'shippingDiscount' => null
                                        'discount' => null
                                    )
                                    30 => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fab4000000005777935d (
                                        '_mockery_expectations' => Array &973 (
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fab7000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fab4000000005777935d
                                                '_expectations' => Array &974 (
                                                    0 => Mockery\Expectation Object &0000000021e1fab5000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fab4000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &975 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fab6000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &976 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &977 (
                                                            0 => Array &978 (
                                                                'value' => Array &979 ()
                                                                'breakdown' => Array &980 ()
                                                            )
                                                        )
                                                        '_closureQueue' => Array &981 ()
                                                        '_setQueue' => Array &982 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &983 ()
                                            )
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fab3000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fab4000000005777935d
                                                '_expectations' => Array &984 (
                                                    0 => Mockery\Expectation Object &0000000021e1fab2000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fab4000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &985 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fab1000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &986 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &987 (
                                                            0 => 26
                                                        )
                                                        '_closureQueue' => Array &988 ()
                                                        '_setQueue' => Array &989 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &990 ()
                                            )
                                            'breakdown' => Mockery\ExpectationDirector Object &0000000021e1fab0000000005777935d (
                                                '_name' => 'breakdown'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fab4000000005777935d
                                                '_expectations' => Array &991 (
                                                    0 => Mockery\Expectation Object &0000000021e1faaf000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fab4000000005777935d
                                                        '_name' => 'breakdown'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &992 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1faae000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &993 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &994 (
                                                            0 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fa91000000005777935d
                                                        )
                                                        '_closureQueue' => Array &995 ()
                                                        '_setQueue' => Array &996 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &997 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &998 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &999 ()
                                        '_mockery_mockableMethods' => Array &1000 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1001 ()
                                        '_mockery_instanceMock' => false
                                        'money' => null
                                        'breakdown' => null
                                    )
                                    31 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1faaa000000005777935d (
                                        '_mockery_expectations' => Array &1002 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1faad000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1faaa000000005777935d
                                                '_expectations' => Array &1003 (
                                                    0 => Mockery\Expectation Object &0000000021e1faab000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1faaa000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1004 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1faac000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1005 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1006 (
                                                            0 => 10
                                                        )
                                                        '_closureQueue' => Array &1007 ()
                                                        '_setQueue' => Array &1008 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1009 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1010 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1011 ()
                                        '_mockery_mockableMethods' => Array &1012 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1013 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    32 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1faa6000000005777935d (
                                        '_mockery_expectations' => Array &1014 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1faa9000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1faa6000000005777935d
                                                '_expectations' => Array &1015 (
                                                    0 => Mockery\Expectation Object &0000000021e1faa7000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1faa6000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1016 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1faa8000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1017 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1018 (
                                                            0 => 3
                                                        )
                                                        '_closureQueue' => Array &1019 ()
                                                        '_setQueue' => Array &1020 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1021 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1022 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1023 ()
                                        '_mockery_mockableMethods' => Array &1024 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1025 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    33 => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1faa2000000005777935d (
                                        '_mockery_expectations' => Array &1026 (
                                            'unitAmount' => Mockery\ExpectationDirector Object &0000000021e1faa5000000005777935d (
                                                '_name' => 'unitAmount'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1faa2000000005777935d
                                                '_expectations' => Array &1027 (
                                                    0 => Mockery\Expectation Object &0000000021e1faa3000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1faa2000000005777935d
                                                        '_name' => 'unitAmount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1028 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1faa4000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1029 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1030 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1faaa000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1031 ()
                                                        '_setQueue' => Array &1032 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1033 ()
                                            )
                                            'tax' => Mockery\ExpectationDirector Object &0000000021e1faa1000000005777935d (
                                                '_name' => 'tax'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1faa2000000005777935d
                                                '_expectations' => Array &1034 (
                                                    0 => Mockery\Expectation Object &0000000021e1faa0000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1faa2000000005777935d
                                                        '_name' => 'tax'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1035 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fadf000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1036 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1037 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1faa6000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1038 ()
                                                        '_setQueue' => Array &1039 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1040 ()
                                            )
                                            'quantity' => Mockery\ExpectationDirector Object &0000000021e1fade000000005777935d (
                                                '_name' => 'quantity'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1faa2000000005777935d
                                                '_expectations' => Array &1041 (
                                                    0 => Mockery\Expectation Object &0000000021e1fadd000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1faa2000000005777935d
                                                        '_name' => 'quantity'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1042 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fadc000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1043 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1044 (
                                                            0 => 2
                                                        )
                                                        '_closureQueue' => Array &1045 ()
                                                        '_setQueue' => Array &1046 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1047 ()
                                            )
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fadb000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1faa2000000005777935d
                                                '_expectations' => Array &1048 (
                                                    0 => Mockery\Expectation Object &0000000021e1fada000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1faa2000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1049 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fad9000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1050 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1051 (
                                                            0 => Array &1052 ()
                                                        )
                                                        '_closureQueue' => Array &1053 ()
                                                        '_setQueue' => Array &1054 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1055 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1056 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1057 ()
                                        '_mockery_mockableMethods' => Array &1058 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1059 ()
                                        '_mockery_instanceMock' => false
                                        'name' => null
                                        'unitAmount' => null
                                        'quantity' => null
                                        'description' => null
                                        'tax' => null
                                        'sku' => null
                                        'category' => null
                                    )
                                    34 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fad5000000005777935d (
                                        '_mockery_expectations' => Array &1060 (
                                            'itemTotal' => Mockery\ExpectationDirector Object &0000000021e1fad8000000005777935d (
                                                '_name' => 'itemTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fad5000000005777935d
                                                '_expectations' => Array &1061 (
                                                    0 => Mockery\Expectation Object &0000000021e1fad6000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fad5000000005777935d
                                                        '_name' => 'itemTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1062 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fad7000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1063 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1064 ()
                                                        '_closureQueue' => Array &1065 (
                                                            0 => Closure Object &0000000021e1fa80000000005777935d (
                                                                0 => Closure Object &0000000021e1fa80000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1066 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1067 ()
                                            )
                                            'taxTotal' => Mockery\ExpectationDirector Object &0000000021e1fad3000000005777935d (
                                                '_name' => 'taxTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fad5000000005777935d
                                                '_expectations' => Array &1068 (
                                                    0 => Mockery\Expectation Object &0000000021e1fad2000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fad5000000005777935d
                                                        '_name' => 'taxTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1069 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fad1000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1070 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1071 ()
                                                        '_closureQueue' => Array &1072 (
                                                            0 => Closure Object &0000000021e1fabc000000005777935d (
                                                                0 => Closure Object &0000000021e1fabc000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1073 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1074 ()
                                            )
                                            'shipping' => Mockery\ExpectationDirector Object &0000000021e1facf000000005777935d (
                                                '_name' => 'shipping'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fad5000000005777935d
                                                '_expectations' => Array &1075 (
                                                    0 => Mockery\Expectation Object &0000000021e1face000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fad5000000005777935d
                                                        '_name' => 'shipping'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1076 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1facd000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1077 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1078 ()
                                                        '_closureQueue' => Array &1079 (
                                                            0 => Closure Object &0000000021e1fab8000000005777935d (
                                                                0 => Closure Object &0000000021e1fab8000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1080 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1081 ()
                                            )
                                            'discount' => Mockery\ExpectationDirector Object &0000000021e1facb000000005777935d (
                                                '_name' => 'discount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fad5000000005777935d
                                                '_expectations' => Array &1082 (
                                                    0 => Mockery\Expectation Object &0000000021e1faca000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fad5000000005777935d
                                                        '_name' => 'discount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1083 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fac9000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1084 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1085 ()
                                                        '_closureQueue' => Array &1086 (
                                                            0 => Closure Object &0000000021e1fad4000000005777935d (
                                                                0 => Closure Object &0000000021e1fad4000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1087 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1088 ()
                                            )
                                            'shippingDiscount' => Mockery\ExpectationDirector Object &0000000021e1fac7000000005777935d (
                                                '_name' => 'shippingDiscount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fad5000000005777935d
                                                '_expectations' => Array &1089 (
                                                    0 => Mockery\Expectation Object &0000000021e1fac6000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fad5000000005777935d
                                                        '_name' => 'shippingDiscount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1090 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fac5000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1091 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1092 ()
                                                        '_closureQueue' => Array &1093 (
                                                            0 => Closure Object &0000000021e1fad0000000005777935d (
                                                                0 => Closure Object &0000000021e1fad0000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1094 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1095 ()
                                            )
                                            'handling' => Mockery\ExpectationDirector Object &0000000021e1fac3000000005777935d (
                                                '_name' => 'handling'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fad5000000005777935d
                                                '_expectations' => Array &1096 (
                                                    0 => Mockery\Expectation Object &0000000021e1fac2000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fad5000000005777935d
                                                        '_name' => 'handling'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1097 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fac1000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1098 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1099 ()
                                                        '_closureQueue' => Array &1100 (
                                                            0 => Closure Object &0000000021e1facc000000005777935d (
                                                                0 => Closure Object &0000000021e1facc000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1101 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1102 ()
                                            )
                                            'insurance' => Mockery\ExpectationDirector Object &0000000021e1faff000000005777935d (
                                                '_name' => 'insurance'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fad5000000005777935d
                                                '_expectations' => Array &1103 (
                                                    0 => Mockery\Expectation Object &0000000021e1fafe000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fad5000000005777935d
                                                        '_name' => 'insurance'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1104 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fafd000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1105 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1106 ()
                                                        '_closureQueue' => Array &1107 (
                                                            0 => Closure Object &0000000021e1fac8000000005777935d (
                                                                0 => Closure Object &0000000021e1fac8000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1108 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1109 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1110 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1111 ()
                                        '_mockery_mockableMethods' => Array &1112 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1113 ()
                                        '_mockery_instanceMock' => false
                                        'itemTotal' => null
                                        'shipping' => null
                                        'taxTotal' => null
                                        'handling' => null
                                        'insurance' => null
                                        'shippingDiscount' => null
                                        'discount' => null
                                    )
                                    35 => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1faf8000000005777935d (
                                        '_mockery_expectations' => Array &1114 (
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fafb000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1faf8000000005777935d
                                                '_expectations' => Array &1115 (
                                                    0 => Mockery\Expectation Object &0000000021e1faf9000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1faf8000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1116 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fafa000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1117 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1118 (
                                                            0 => Array &1119 (
                                                                'value' => Array &1120 ()
                                                                'breakdown' => Array &1121 ()
                                                            )
                                                        )
                                                        '_closureQueue' => Array &1122 ()
                                                        '_setQueue' => Array &1123 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1124 ()
                                            )
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1faf7000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1faf8000000005777935d
                                                '_expectations' => Array &1125 (
                                                    0 => Mockery\Expectation Object &0000000021e1faf6000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1faf8000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1126 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1faf5000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1127 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1128 (
                                                            0 => 29
                                                        )
                                                        '_closureQueue' => Array &1129 ()
                                                        '_setQueue' => Array &1130 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1131 ()
                                            )
                                            'breakdown' => Mockery\ExpectationDirector Object &0000000021e1faf4000000005777935d (
                                                '_name' => 'breakdown'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1faf8000000005777935d
                                                '_expectations' => Array &1132 (
                                                    0 => Mockery\Expectation Object &0000000021e1faf3000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1faf8000000005777935d
                                                        '_name' => 'breakdown'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1133 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1faf2000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1134 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1135 (
                                                            0 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fad5000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1136 ()
                                                        '_setQueue' => Array &1137 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1138 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1139 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1140 ()
                                        '_mockery_mockableMethods' => Array &1141 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1142 ()
                                        '_mockery_instanceMock' => false
                                        'money' => null
                                        'breakdown' => null
                                    )
                                    36 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1faee000000005777935d (
                                        '_mockery_expectations' => Array &1143 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1faf1000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1faee000000005777935d
                                                '_expectations' => Array &1144 (
                                                    0 => Mockery\Expectation Object &0000000021e1faef000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1faee000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1145 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1faf0000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1146 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1147 (
                                                            0 => 10
                                                        )
                                                        '_closureQueue' => Array &1148 ()
                                                        '_setQueue' => Array &1149 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1150 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1151 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1152 ()
                                        '_mockery_mockableMethods' => Array &1153 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1154 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    37 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1faea000000005777935d (
                                        '_mockery_expectations' => Array &1155 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1faed000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1faea000000005777935d
                                                '_expectations' => Array &1156 (
                                                    0 => Mockery\Expectation Object &0000000021e1faeb000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1faea000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1157 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1faec000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1158 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1159 (
                                                            0 => 3
                                                        )
                                                        '_closureQueue' => Array &1160 ()
                                                        '_setQueue' => Array &1161 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1162 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1163 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1164 ()
                                        '_mockery_mockableMethods' => Array &1165 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1166 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    38 => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fae6000000005777935d (
                                        '_mockery_expectations' => Array &1167 (
                                            'unitAmount' => Mockery\ExpectationDirector Object &0000000021e1fae9000000005777935d (
                                                '_name' => 'unitAmount'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fae6000000005777935d
                                                '_expectations' => Array &1168 (
                                                    0 => Mockery\Expectation Object &0000000021e1fae7000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fae6000000005777935d
                                                        '_name' => 'unitAmount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1169 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fae8000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1170 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1171 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1faee000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1172 ()
                                                        '_setQueue' => Array &1173 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1174 ()
                                            )
                                            'tax' => Mockery\ExpectationDirector Object &0000000021e1fae5000000005777935d (
                                                '_name' => 'tax'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fae6000000005777935d
                                                '_expectations' => Array &1175 (
                                                    0 => Mockery\Expectation Object &0000000021e1fae4000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fae6000000005777935d
                                                        '_name' => 'tax'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1176 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fae3000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1177 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1178 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1faea000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1179 ()
                                                        '_setQueue' => Array &1180 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1181 ()
                                            )
                                            'quantity' => Mockery\ExpectationDirector Object &0000000021e1fae2000000005777935d (
                                                '_name' => 'quantity'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fae6000000005777935d
                                                '_expectations' => Array &1182 (
                                                    0 => Mockery\Expectation Object &0000000021e1fae1000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fae6000000005777935d
                                                        '_name' => 'quantity'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1183 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fae0000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1184 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1185 (
                                                            0 => 2
                                                        )
                                                        '_closureQueue' => Array &1186 ()
                                                        '_setQueue' => Array &1187 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1188 ()
                                            )
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fb1f000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fae6000000005777935d
                                                '_expectations' => Array &1189 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb1e000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fae6000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1190 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb1d000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1191 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1192 (
                                                            0 => Array &1193 ()
                                                        )
                                                        '_closureQueue' => Array &1194 ()
                                                        '_setQueue' => Array &1195 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1196 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1197 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1198 ()
                                        '_mockery_mockableMethods' => Array &1199 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1200 ()
                                        '_mockery_instanceMock' => false
                                        'name' => null
                                        'unitAmount' => null
                                        'quantity' => null
                                        'description' => null
                                        'tax' => null
                                        'sku' => null
                                        'category' => null
                                    )
                                    39 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb19000000005777935d (
                                        '_mockery_expectations' => Array &1201 (
                                            'itemTotal' => Mockery\ExpectationDirector Object &0000000021e1fb1c000000005777935d (
                                                '_name' => 'itemTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb19000000005777935d
                                                '_expectations' => Array &1202 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb1a000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb19000000005777935d
                                                        '_name' => 'itemTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1203 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb1b000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1204 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1205 ()
                                                        '_closureQueue' => Array &1206 (
                                                            0 => Closure Object &0000000021e1fac4000000005777935d (
                                                                0 => Closure Object &0000000021e1fac4000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1207 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1208 ()
                                            )
                                            'taxTotal' => Mockery\ExpectationDirector Object &0000000021e1fb17000000005777935d (
                                                '_name' => 'taxTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb19000000005777935d
                                                '_expectations' => Array &1209 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb16000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb19000000005777935d
                                                        '_name' => 'taxTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1210 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb15000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1211 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1212 ()
                                                        '_closureQueue' => Array &1213 (
                                                            0 => Closure Object &0000000021e1fac0000000005777935d (
                                                                0 => Closure Object &0000000021e1fac0000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1214 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1215 ()
                                            )
                                            'shipping' => Mockery\ExpectationDirector Object &0000000021e1fb13000000005777935d (
                                                '_name' => 'shipping'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb19000000005777935d
                                                '_expectations' => Array &1216 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb12000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb19000000005777935d
                                                        '_name' => 'shipping'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1217 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb11000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1218 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1219 ()
                                                        '_closureQueue' => Array &1220 (
                                                            0 => Closure Object &0000000021e1fafc000000005777935d (
                                                                0 => Closure Object &0000000021e1fafc000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1221 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1222 ()
                                            )
                                            'discount' => Mockery\ExpectationDirector Object &0000000021e1fb0f000000005777935d (
                                                '_name' => 'discount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb19000000005777935d
                                                '_expectations' => Array &1223 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb0e000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb19000000005777935d
                                                        '_name' => 'discount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1224 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb0d000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1225 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1226 ()
                                                        '_closureQueue' => Array &1227 (
                                                            0 => Closure Object &0000000021e1fb18000000005777935d (
                                                                0 => Closure Object &0000000021e1fb18000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1228 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1229 ()
                                            )
                                            'shippingDiscount' => Mockery\ExpectationDirector Object &0000000021e1fb0b000000005777935d (
                                                '_name' => 'shippingDiscount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb19000000005777935d
                                                '_expectations' => Array &1230 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb0a000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb19000000005777935d
                                                        '_name' => 'shippingDiscount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1231 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb09000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1232 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1233 ()
                                                        '_closureQueue' => Array &1234 (
                                                            0 => Closure Object &0000000021e1fb14000000005777935d (
                                                                0 => Closure Object &0000000021e1fb14000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1235 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1236 ()
                                            )
                                            'handling' => Mockery\ExpectationDirector Object &0000000021e1fb07000000005777935d (
                                                '_name' => 'handling'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb19000000005777935d
                                                '_expectations' => Array &1237 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb06000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb19000000005777935d
                                                        '_name' => 'handling'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1238 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb05000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1239 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1240 ()
                                                        '_closureQueue' => Array &1241 (
                                                            0 => Closure Object &0000000021e1fb10000000005777935d (
                                                                0 => Closure Object &0000000021e1fb10000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1242 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1243 ()
                                            )
                                            'insurance' => Mockery\ExpectationDirector Object &0000000021e1fb03000000005777935d (
                                                '_name' => 'insurance'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb19000000005777935d
                                                '_expectations' => Array &1244 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb02000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb19000000005777935d
                                                        '_name' => 'insurance'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1245 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb01000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1246 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1247 ()
                                                        '_closureQueue' => Array &1248 (
                                                            0 => Closure Object &0000000021e1fb0c000000005777935d (
                                                                0 => Closure Object &0000000021e1fb0c000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1249 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1250 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1251 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1252 ()
                                        '_mockery_mockableMethods' => Array &1253 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1254 ()
                                        '_mockery_instanceMock' => false
                                        'itemTotal' => null
                                        'shipping' => null
                                        'taxTotal' => null
                                        'handling' => null
                                        'insurance' => null
                                        'shippingDiscount' => null
                                        'discount' => null
                                    )
                                    40 => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb3c000000005777935d (
                                        '_mockery_expectations' => Array &1255 (
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fb3f000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb3c000000005777935d
                                                '_expectations' => Array &1256 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb3d000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb3c000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1257 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb3e000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1258 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1259 (
                                                            0 => Array &1260 (
                                                                'value' => Array &1261 ()
                                                                'breakdown' => Array &1262 ()
                                                            )
                                                        )
                                                        '_closureQueue' => Array &1263 ()
                                                        '_setQueue' => Array &1264 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1265 ()
                                            )
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fb3b000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb3c000000005777935d
                                                '_expectations' => Array &1266 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb3a000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb3c000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1267 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb39000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1268 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1269 (
                                                            0 => 25
                                                        )
                                                        '_closureQueue' => Array &1270 ()
                                                        '_setQueue' => Array &1271 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1272 ()
                                            )
                                            'breakdown' => Mockery\ExpectationDirector Object &0000000021e1fb38000000005777935d (
                                                '_name' => 'breakdown'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb3c000000005777935d
                                                '_expectations' => Array &1273 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb37000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb3c000000005777935d
                                                        '_name' => 'breakdown'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1274 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb36000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1275 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1276 (
                                                            0 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb19000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1277 ()
                                                        '_setQueue' => Array &1278 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1279 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1280 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1281 ()
                                        '_mockery_mockableMethods' => Array &1282 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1283 ()
                                        '_mockery_instanceMock' => false
                                        'money' => null
                                        'breakdown' => null
                                    )
                                    41 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fb32000000005777935d (
                                        '_mockery_expectations' => Array &1284 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fb35000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fb32000000005777935d
                                                '_expectations' => Array &1285 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb33000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fb32000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1286 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb34000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1287 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1288 (
                                                            0 => 10
                                                        )
                                                        '_closureQueue' => Array &1289 ()
                                                        '_setQueue' => Array &1290 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1291 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1292 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1293 ()
                                        '_mockery_mockableMethods' => Array &1294 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1295 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    42 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fb2e000000005777935d (
                                        '_mockery_expectations' => Array &1296 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fb31000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fb2e000000005777935d
                                                '_expectations' => Array &1297 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb2f000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fb2e000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1298 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb30000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1299 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1300 (
                                                            0 => 3
                                                        )
                                                        '_closureQueue' => Array &1301 ()
                                                        '_setQueue' => Array &1302 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1303 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1304 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1305 ()
                                        '_mockery_mockableMethods' => Array &1306 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1307 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    43 => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fb2a000000005777935d (
                                        '_mockery_expectations' => Array &1308 (
                                            'unitAmount' => Mockery\ExpectationDirector Object &0000000021e1fb2d000000005777935d (
                                                '_name' => 'unitAmount'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fb2a000000005777935d
                                                '_expectations' => Array &1309 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb2b000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fb2a000000005777935d
                                                        '_name' => 'unitAmount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1310 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb2c000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1311 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1312 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fb32000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1313 ()
                                                        '_setQueue' => Array &1314 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1315 ()
                                            )
                                            'tax' => Mockery\ExpectationDirector Object &0000000021e1fb29000000005777935d (
                                                '_name' => 'tax'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fb2a000000005777935d
                                                '_expectations' => Array &1316 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb28000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fb2a000000005777935d
                                                        '_name' => 'tax'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1317 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb27000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1318 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1319 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fb2e000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1320 ()
                                                        '_setQueue' => Array &1321 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1322 ()
                                            )
                                            'quantity' => Mockery\ExpectationDirector Object &0000000021e1fb26000000005777935d (
                                                '_name' => 'quantity'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fb2a000000005777935d
                                                '_expectations' => Array &1323 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb25000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fb2a000000005777935d
                                                        '_name' => 'quantity'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1324 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb24000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1325 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1326 (
                                                            0 => 2
                                                        )
                                                        '_closureQueue' => Array &1327 ()
                                                        '_setQueue' => Array &1328 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1329 ()
                                            )
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fb23000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fb2a000000005777935d
                                                '_expectations' => Array &1330 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb22000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fb2a000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1331 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb21000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1332 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1333 (
                                                            0 => Array &1334 ()
                                                        )
                                                        '_closureQueue' => Array &1335 ()
                                                        '_setQueue' => Array &1336 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1337 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1338 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1339 ()
                                        '_mockery_mockableMethods' => Array &1340 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1341 ()
                                        '_mockery_instanceMock' => false
                                        'name' => null
                                        'unitAmount' => null
                                        'quantity' => null
                                        'description' => null
                                        'tax' => null
                                        'sku' => null
                                        'category' => null
                                    )
                                    44 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb5d000000005777935d (
                                        '_mockery_expectations' => Array &1342 (
                                            'itemTotal' => Mockery\ExpectationDirector Object &0000000021e1fb20000000005777935d (
                                                '_name' => 'itemTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb5d000000005777935d
                                                '_expectations' => Array &1343 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb5e000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb5d000000005777935d
                                                        '_name' => 'itemTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1344 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb5f000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1345 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1346 ()
                                                        '_closureQueue' => Array &1347 (
                                                            0 => Closure Object &0000000021e1fb08000000005777935d (
                                                                0 => Closure Object &0000000021e1fb08000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1348 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1349 ()
                                            )
                                            'taxTotal' => Mockery\ExpectationDirector Object &0000000021e1fb5b000000005777935d (
                                                '_name' => 'taxTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb5d000000005777935d
                                                '_expectations' => Array &1350 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb5a000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb5d000000005777935d
                                                        '_name' => 'taxTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1351 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb59000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1352 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1353 ()
                                                        '_closureQueue' => Array &1354 (
                                                            0 => Closure Object &0000000021e1fb04000000005777935d (
                                                                0 => Closure Object &0000000021e1fb04000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1355 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1356 ()
                                            )
                                            'shipping' => Mockery\ExpectationDirector Object &0000000021e1fb57000000005777935d (
                                                '_name' => 'shipping'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb5d000000005777935d
                                                '_expectations' => Array &1357 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb56000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb5d000000005777935d
                                                        '_name' => 'shipping'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1358 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb55000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1359 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1360 ()
                                                        '_closureQueue' => Array &1361 (
                                                            0 => Closure Object &0000000021e1fb00000000005777935d (
                                                                0 => Closure Object &0000000021e1fb00000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1362 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1363 ()
                                            )
                                            'discount' => Mockery\ExpectationDirector Object &0000000021e1fb53000000005777935d (
                                                '_name' => 'discount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb5d000000005777935d
                                                '_expectations' => Array &1364 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb52000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb5d000000005777935d
                                                        '_name' => 'discount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1365 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb51000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1366 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1367 ()
                                                        '_closureQueue' => Array &1368 (
                                                            0 => Closure Object &0000000021e1fb5c000000005777935d (
                                                                0 => Closure Object &0000000021e1fb5c000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1369 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1370 ()
                                            )
                                            'shippingDiscount' => Mockery\ExpectationDirector Object &0000000021e1fb4f000000005777935d (
                                                '_name' => 'shippingDiscount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb5d000000005777935d
                                                '_expectations' => Array &1371 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb4e000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb5d000000005777935d
                                                        '_name' => 'shippingDiscount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1372 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb4d000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1373 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1374 ()
                                                        '_closureQueue' => Array &1375 (
                                                            0 => Closure Object &0000000021e1fb58000000005777935d (
                                                                0 => Closure Object &0000000021e1fb58000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1376 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1377 ()
                                            )
                                            'handling' => Mockery\ExpectationDirector Object &0000000021e1fb4b000000005777935d (
                                                '_name' => 'handling'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb5d000000005777935d
                                                '_expectations' => Array &1378 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb4a000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb5d000000005777935d
                                                        '_name' => 'handling'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1379 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb49000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1380 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1381 ()
                                                        '_closureQueue' => Array &1382 (
                                                            0 => Closure Object &0000000021e1fb54000000005777935d (
                                                                0 => Closure Object &0000000021e1fb54000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1383 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1384 ()
                                            )
                                            'insurance' => Mockery\ExpectationDirector Object &0000000021e1fb47000000005777935d (
                                                '_name' => 'insurance'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb5d000000005777935d
                                                '_expectations' => Array &1385 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb46000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb5d000000005777935d
                                                        '_name' => 'insurance'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1386 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb45000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1387 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1388 ()
                                                        '_closureQueue' => Array &1389 (
                                                            0 => Closure Object &0000000021e1fb50000000005777935d (
                                                                0 => Closure Object &0000000021e1fb50000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1390 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1391 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1392 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1393 ()
                                        '_mockery_mockableMethods' => Array &1394 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1395 ()
                                        '_mockery_instanceMock' => false
                                        'itemTotal' => null
                                        'shipping' => null
                                        'taxTotal' => null
                                        'handling' => null
                                        'insurance' => null
                                        'shippingDiscount' => null
                                        'discount' => null
                                    )
                                    45 => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb40000000005777935d (
                                        '_mockery_expectations' => Array &1396 (
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fb43000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb40000000005777935d
                                                '_expectations' => Array &1397 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb41000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb40000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1398 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb42000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1399 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1400 (
                                                            0 => Array &1401 (
                                                                'value' => Array &1402 ()
                                                                'breakdown' => Array &1403 ()
                                                            )
                                                        )
                                                        '_closureQueue' => Array &1404 ()
                                                        '_setQueue' => Array &1405 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1406 ()
                                            )
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fb7f000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb40000000005777935d
                                                '_expectations' => Array &1407 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb7e000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb40000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1408 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb7d000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1409 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1410 (
                                                            0 => 29
                                                        )
                                                        '_closureQueue' => Array &1411 ()
                                                        '_setQueue' => Array &1412 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1413 ()
                                            )
                                            'breakdown' => Mockery\ExpectationDirector Object &0000000021e1fb7c000000005777935d (
                                                '_name' => 'breakdown'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb40000000005777935d
                                                '_expectations' => Array &1414 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb7b000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb40000000005777935d
                                                        '_name' => 'breakdown'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1415 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb7a000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1416 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1417 (
                                                            0 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb5d000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1418 ()
                                                        '_setQueue' => Array &1419 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1420 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1421 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1422 ()
                                        '_mockery_mockableMethods' => Array &1423 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1424 ()
                                        '_mockery_instanceMock' => false
                                        'money' => null
                                        'breakdown' => null
                                    )
                                    46 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fb76000000005777935d (
                                        '_mockery_expectations' => Array &1425 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fb79000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fb76000000005777935d
                                                '_expectations' => Array &1426 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb77000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fb76000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1427 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb78000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1428 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1429 (
                                                            0 => 10
                                                        )
                                                        '_closureQueue' => Array &1430 ()
                                                        '_setQueue' => Array &1431 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1432 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1433 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1434 ()
                                        '_mockery_mockableMethods' => Array &1435 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1436 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    47 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fb72000000005777935d (
                                        '_mockery_expectations' => Array &1437 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fb75000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fb72000000005777935d
                                                '_expectations' => Array &1438 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb73000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fb72000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1439 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb74000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1440 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1441 (
                                                            0 => 3
                                                        )
                                                        '_closureQueue' => Array &1442 ()
                                                        '_setQueue' => Array &1443 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1444 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1445 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1446 ()
                                        '_mockery_mockableMethods' => Array &1447 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1448 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    48 => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fb6e000000005777935d (
                                        '_mockery_expectations' => Array &1449 (
                                            'unitAmount' => Mockery\ExpectationDirector Object &0000000021e1fb71000000005777935d (
                                                '_name' => 'unitAmount'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fb6e000000005777935d
                                                '_expectations' => Array &1450 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb6f000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fb6e000000005777935d
                                                        '_name' => 'unitAmount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1451 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb70000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1452 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1453 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fb76000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1454 ()
                                                        '_setQueue' => Array &1455 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1456 ()
                                            )
                                            'tax' => Mockery\ExpectationDirector Object &0000000021e1fb6d000000005777935d (
                                                '_name' => 'tax'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fb6e000000005777935d
                                                '_expectations' => Array &1457 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb6c000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fb6e000000005777935d
                                                        '_name' => 'tax'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1458 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb6b000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1459 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1460 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fb72000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1461 ()
                                                        '_setQueue' => Array &1462 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1463 ()
                                            )
                                            'quantity' => Mockery\ExpectationDirector Object &0000000021e1fb6a000000005777935d (
                                                '_name' => 'quantity'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fb6e000000005777935d
                                                '_expectations' => Array &1464 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb69000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fb6e000000005777935d
                                                        '_name' => 'quantity'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1465 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb68000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1466 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1467 (
                                                            0 => 2
                                                        )
                                                        '_closureQueue' => Array &1468 ()
                                                        '_setQueue' => Array &1469 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1470 ()
                                            )
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fb67000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fb6e000000005777935d
                                                '_expectations' => Array &1471 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb66000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fb6e000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1472 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb65000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1473 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1474 (
                                                            0 => Array &1475 ()
                                                        )
                                                        '_closureQueue' => Array &1476 ()
                                                        '_setQueue' => Array &1477 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1478 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1479 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1480 ()
                                        '_mockery_mockableMethods' => Array &1481 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1482 ()
                                        '_mockery_instanceMock' => false
                                        'name' => null
                                        'unitAmount' => null
                                        'quantity' => null
                                        'description' => null
                                        'tax' => null
                                        'sku' => null
                                        'category' => null
                                    )
                                    49 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb61000000005777935d (
                                        '_mockery_expectations' => Array &1483 (
                                            'itemTotal' => Mockery\ExpectationDirector Object &0000000021e1fb64000000005777935d (
                                                '_name' => 'itemTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb61000000005777935d
                                                '_expectations' => Array &1484 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb62000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb61000000005777935d
                                                        '_name' => 'itemTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1485 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb63000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1486 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1487 ()
                                                        '_closureQueue' => Array &1488 (
                                                            0 => Closure Object &0000000021e1fb4c000000005777935d (
                                                                0 => Closure Object &0000000021e1fb4c000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1489 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1490 ()
                                            )
                                            'taxTotal' => Mockery\ExpectationDirector Object &0000000021e1fb9f000000005777935d (
                                                '_name' => 'taxTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb61000000005777935d
                                                '_expectations' => Array &1491 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb9e000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb61000000005777935d
                                                        '_name' => 'taxTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1492 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb9d000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1493 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1494 ()
                                                        '_closureQueue' => Array &1495 (
                                                            0 => Closure Object &0000000021e1fb48000000005777935d (
                                                                0 => Closure Object &0000000021e1fb48000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1496 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1497 ()
                                            )
                                            'shipping' => Mockery\ExpectationDirector Object &0000000021e1fb9b000000005777935d (
                                                '_name' => 'shipping'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb61000000005777935d
                                                '_expectations' => Array &1498 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb9a000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb61000000005777935d
                                                        '_name' => 'shipping'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1499 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb99000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1500 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1501 ()
                                                        '_closureQueue' => Array &1502 (
                                                            0 => Closure Object &0000000021e1fb44000000005777935d (
                                                                0 => Closure Object &0000000021e1fb44000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1503 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1504 ()
                                            )
                                            'discount' => Mockery\ExpectationDirector Object &0000000021e1fb97000000005777935d (
                                                '_name' => 'discount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb61000000005777935d
                                                '_expectations' => Array &1505 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb96000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb61000000005777935d
                                                        '_name' => 'discount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1506 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb95000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1507 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1508 ()
                                                        '_closureQueue' => Array &1509 (
                                                            0 => Closure Object &0000000021e1fb60000000005777935d (
                                                                0 => Closure Object &0000000021e1fb60000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1510 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1511 ()
                                            )
                                            'shippingDiscount' => Mockery\ExpectationDirector Object &0000000021e1fb93000000005777935d (
                                                '_name' => 'shippingDiscount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb61000000005777935d
                                                '_expectations' => Array &1512 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb92000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb61000000005777935d
                                                        '_name' => 'shippingDiscount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1513 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb91000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1514 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1515 ()
                                                        '_closureQueue' => Array &1516 (
                                                            0 => Closure Object &0000000021e1fb9c000000005777935d (
                                                                0 => Closure Object &0000000021e1fb9c000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1517 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1518 ()
                                            )
                                            'handling' => Mockery\ExpectationDirector Object &0000000021e1fb8f000000005777935d (
                                                '_name' => 'handling'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb61000000005777935d
                                                '_expectations' => Array &1519 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb8e000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb61000000005777935d
                                                        '_name' => 'handling'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1520 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb8d000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1521 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1522 ()
                                                        '_closureQueue' => Array &1523 (
                                                            0 => Closure Object &0000000021e1fb98000000005777935d (
                                                                0 => Closure Object &0000000021e1fb98000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1524 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1525 ()
                                            )
                                            'insurance' => Mockery\ExpectationDirector Object &0000000021e1fb8b000000005777935d (
                                                '_name' => 'insurance'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb61000000005777935d
                                                '_expectations' => Array &1526 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb8a000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb61000000005777935d
                                                        '_name' => 'insurance'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1527 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb89000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1528 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1529 ()
                                                        '_closureQueue' => Array &1530 (
                                                            0 => Closure Object &0000000021e1fb94000000005777935d (
                                                                0 => Closure Object &0000000021e1fb94000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1531 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1532 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1533 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1534 ()
                                        '_mockery_mockableMethods' => Array &1535 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1536 ()
                                        '_mockery_instanceMock' => false
                                        'itemTotal' => null
                                        'shipping' => null
                                        'taxTotal' => null
                                        'handling' => null
                                        'insurance' => null
                                        'shippingDiscount' => null
                                        'discount' => null
                                    )
                                    50 => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb84000000005777935d (
                                        '_mockery_expectations' => Array &1537 (
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fb87000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb84000000005777935d
                                                '_expectations' => Array &1538 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb85000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb84000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1539 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb86000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1540 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1541 (
                                                            0 => Array &1542 (
                                                                'value' => Array &1543 ()
                                                                'breakdown' => Array &1544 ()
                                                            )
                                                        )
                                                        '_closureQueue' => Array &1545 ()
                                                        '_setQueue' => Array &1546 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1547 ()
                                            )
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fb83000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb84000000005777935d
                                                '_expectations' => Array &1548 (
                                                    0 => Mockery\Expectation Object &0000000021e1fb82000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb84000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1549 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fb81000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1550 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1551 (
                                                            0 => 28
                                                        )
                                                        '_closureQueue' => Array &1552 ()
                                                        '_setQueue' => Array &1553 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1554 ()
                                            )
                                            'breakdown' => Mockery\ExpectationDirector Object &0000000021e1fb80000000005777935d (
                                                '_name' => 'breakdown'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb84000000005777935d
                                                '_expectations' => Array &1555 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbbf000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fb84000000005777935d
                                                        '_name' => 'breakdown'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1556 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbbe000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1557 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1558 (
                                                            0 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fb61000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1559 ()
                                                        '_setQueue' => Array &1560 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1561 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1562 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1563 ()
                                        '_mockery_mockableMethods' => Array &1564 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1565 ()
                                        '_mockery_instanceMock' => false
                                        'money' => null
                                        'breakdown' => null
                                    )
                                    51 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fbba000000005777935d (
                                        '_mockery_expectations' => Array &1566 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fbbd000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fbba000000005777935d
                                                '_expectations' => Array &1567 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbbb000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fbba000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1568 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbbc000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1569 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1570 (
                                                            0 => 10
                                                        )
                                                        '_closureQueue' => Array &1571 ()
                                                        '_setQueue' => Array &1572 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1573 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1574 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1575 ()
                                        '_mockery_mockableMethods' => Array &1576 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1577 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    52 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fbb6000000005777935d (
                                        '_mockery_expectations' => Array &1578 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fbb9000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fbb6000000005777935d
                                                '_expectations' => Array &1579 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbb7000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fbb6000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1580 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbb8000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1581 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1582 (
                                                            0 => 3
                                                        )
                                                        '_closureQueue' => Array &1583 ()
                                                        '_setQueue' => Array &1584 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1585 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1586 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1587 ()
                                        '_mockery_mockableMethods' => Array &1588 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1589 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    53 => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fbb2000000005777935d (
                                        '_mockery_expectations' => Array &1590 (
                                            'unitAmount' => Mockery\ExpectationDirector Object &0000000021e1fbb5000000005777935d (
                                                '_name' => 'unitAmount'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fbb2000000005777935d
                                                '_expectations' => Array &1591 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbb3000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fbb2000000005777935d
                                                        '_name' => 'unitAmount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1592 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbb4000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1593 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1594 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fbba000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1595 ()
                                                        '_setQueue' => Array &1596 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1597 ()
                                            )
                                            'tax' => Mockery\ExpectationDirector Object &0000000021e1fbb1000000005777935d (
                                                '_name' => 'tax'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fbb2000000005777935d
                                                '_expectations' => Array &1598 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbb0000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fbb2000000005777935d
                                                        '_name' => 'tax'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1599 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbaf000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1600 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1601 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fbb6000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1602 ()
                                                        '_setQueue' => Array &1603 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1604 ()
                                            )
                                            'quantity' => Mockery\ExpectationDirector Object &0000000021e1fbae000000005777935d (
                                                '_name' => 'quantity'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fbb2000000005777935d
                                                '_expectations' => Array &1605 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbad000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fbb2000000005777935d
                                                        '_name' => 'quantity'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1606 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbac000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1607 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1608 (
                                                            0 => 2
                                                        )
                                                        '_closureQueue' => Array &1609 ()
                                                        '_setQueue' => Array &1610 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1611 ()
                                            )
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fbab000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fbb2000000005777935d
                                                '_expectations' => Array &1612 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbaa000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fbb2000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1613 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fba9000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1614 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1615 (
                                                            0 => Array &1616 ()
                                                        )
                                                        '_closureQueue' => Array &1617 ()
                                                        '_setQueue' => Array &1618 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1619 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1620 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1621 ()
                                        '_mockery_mockableMethods' => Array &1622 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1623 ()
                                        '_mockery_instanceMock' => false
                                        'name' => null
                                        'unitAmount' => null
                                        'quantity' => null
                                        'description' => null
                                        'tax' => null
                                        'sku' => null
                                        'category' => null
                                    )
                                    54 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fba5000000005777935d (
                                        '_mockery_expectations' => Array &1624 (
                                            'itemTotal' => Mockery\ExpectationDirector Object &0000000021e1fba8000000005777935d (
                                                '_name' => 'itemTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fba5000000005777935d
                                                '_expectations' => Array &1625 (
                                                    0 => Mockery\Expectation Object &0000000021e1fba6000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fba5000000005777935d
                                                        '_name' => 'itemTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1626 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fba7000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1627 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1628 ()
                                                        '_closureQueue' => Array &1629 (
                                                            0 => Closure Object &0000000021e1fb90000000005777935d (
                                                                0 => Closure Object &0000000021e1fb90000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1630 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1631 ()
                                            )
                                            'taxTotal' => Mockery\ExpectationDirector Object &0000000021e1fba3000000005777935d (
                                                '_name' => 'taxTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fba5000000005777935d
                                                '_expectations' => Array &1632 (
                                                    0 => Mockery\Expectation Object &0000000021e1fba2000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fba5000000005777935d
                                                        '_name' => 'taxTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1633 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fba1000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1634 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1635 ()
                                                        '_closureQueue' => Array &1636 (
                                                            0 => Closure Object &0000000021e1fb8c000000005777935d (
                                                                0 => Closure Object &0000000021e1fb8c000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1637 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1638 ()
                                            )
                                            'shipping' => Mockery\ExpectationDirector Object &0000000021e1fbdf000000005777935d (
                                                '_name' => 'shipping'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fba5000000005777935d
                                                '_expectations' => Array &1639 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbde000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fba5000000005777935d
                                                        '_name' => 'shipping'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1640 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbdd000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1641 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1642 ()
                                                        '_closureQueue' => Array &1643 (
                                                            0 => Closure Object &0000000021e1fb88000000005777935d (
                                                                0 => Closure Object &0000000021e1fb88000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1644 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1645 ()
                                            )
                                            'discount' => Mockery\ExpectationDirector Object &0000000021e1fbdb000000005777935d (
                                                '_name' => 'discount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fba5000000005777935d
                                                '_expectations' => Array &1646 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbda000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fba5000000005777935d
                                                        '_name' => 'discount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1647 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbd9000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1648 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1649 ()
                                                        '_closureQueue' => Array &1650 (
                                                            0 => Closure Object &0000000021e1fba4000000005777935d (
                                                                0 => Closure Object &0000000021e1fba4000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1651 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1652 ()
                                            )
                                            'shippingDiscount' => Mockery\ExpectationDirector Object &0000000021e1fbd7000000005777935d (
                                                '_name' => 'shippingDiscount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fba5000000005777935d
                                                '_expectations' => Array &1653 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbd6000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fba5000000005777935d
                                                        '_name' => 'shippingDiscount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1654 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbd5000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1655 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1656 ()
                                                        '_closureQueue' => Array &1657 (
                                                            0 => Closure Object &0000000021e1fba0000000005777935d (
                                                                0 => Closure Object &0000000021e1fba0000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1658 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1659 ()
                                            )
                                            'handling' => Mockery\ExpectationDirector Object &0000000021e1fbd3000000005777935d (
                                                '_name' => 'handling'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fba5000000005777935d
                                                '_expectations' => Array &1660 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbd2000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fba5000000005777935d
                                                        '_name' => 'handling'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1661 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbd1000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1662 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1663 ()
                                                        '_closureQueue' => Array &1664 (
                                                            0 => Closure Object &0000000021e1fbdc000000005777935d (
                                                                0 => Closure Object &0000000021e1fbdc000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1665 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1666 ()
                                            )
                                            'insurance' => Mockery\ExpectationDirector Object &0000000021e1fbcf000000005777935d (
                                                '_name' => 'insurance'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fba5000000005777935d
                                                '_expectations' => Array &1667 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbce000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fba5000000005777935d
                                                        '_name' => 'insurance'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1668 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbcd000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1669 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1670 ()
                                                        '_closureQueue' => Array &1671 (
                                                            0 => Closure Object &0000000021e1fbd8000000005777935d (
                                                                0 => Closure Object &0000000021e1fbd8000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1672 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1673 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1674 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1675 ()
                                        '_mockery_mockableMethods' => Array &1676 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1677 ()
                                        '_mockery_instanceMock' => false
                                        'itemTotal' => null
                                        'shipping' => null
                                        'taxTotal' => null
                                        'handling' => null
                                        'insurance' => null
                                        'shippingDiscount' => null
                                        'discount' => null
                                    )
                                    55 => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fbc8000000005777935d (
                                        '_mockery_expectations' => Array &1678 (
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fbcb000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fbc8000000005777935d
                                                '_expectations' => Array &1679 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbc9000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fbc8000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1680 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbca000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1681 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1682 (
                                                            0 => Array &1683 (
                                                                'value' => Array &1684 ()
                                                                'breakdown' => Array &1685 ()
                                                            )
                                                        )
                                                        '_closureQueue' => Array &1686 ()
                                                        '_setQueue' => Array &1687 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1688 ()
                                            )
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fbc7000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fbc8000000005777935d
                                                '_expectations' => Array &1689 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbc6000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fbc8000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1690 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbc5000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1691 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1692 (
                                                            0 => 26
                                                        )
                                                        '_closureQueue' => Array &1693 ()
                                                        '_setQueue' => Array &1694 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1695 ()
                                            )
                                            'breakdown' => Mockery\ExpectationDirector Object &0000000021e1fbc4000000005777935d (
                                                '_name' => 'breakdown'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fbc8000000005777935d
                                                '_expectations' => Array &1696 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbc3000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fbc8000000005777935d
                                                        '_name' => 'breakdown'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1697 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbc2000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1698 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1699 (
                                                            0 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fba5000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1700 ()
                                                        '_setQueue' => Array &1701 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1702 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1703 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1704 ()
                                        '_mockery_mockableMethods' => Array &1705 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1706 ()
                                        '_mockery_instanceMock' => false
                                        'money' => null
                                        'breakdown' => null
                                    )
                                    56 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fbfe000000005777935d (
                                        '_mockery_expectations' => Array &1707 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fbc1000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fbfe000000005777935d
                                                '_expectations' => Array &1708 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbff000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fbfe000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1709 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbc0000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1710 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1711 (
                                                            0 => 10
                                                        )
                                                        '_closureQueue' => Array &1712 ()
                                                        '_setQueue' => Array &1713 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1714 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1715 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1716 ()
                                        '_mockery_mockableMethods' => Array &1717 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1718 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    57 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fbfa000000005777935d (
                                        '_mockery_expectations' => Array &1719 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1fbfd000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fbfa000000005777935d
                                                '_expectations' => Array &1720 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbfb000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fbfa000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1721 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbfc000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1722 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1723 (
                                                            0 => 3
                                                        )
                                                        '_closureQueue' => Array &1724 ()
                                                        '_setQueue' => Array &1725 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1726 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1727 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1728 ()
                                        '_mockery_mockableMethods' => Array &1729 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1730 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    58 => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fbf6000000005777935d (
                                        '_mockery_expectations' => Array &1731 (
                                            'unitAmount' => Mockery\ExpectationDirector Object &0000000021e1fbf9000000005777935d (
                                                '_name' => 'unitAmount'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fbf6000000005777935d
                                                '_expectations' => Array &1732 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbf7000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fbf6000000005777935d
                                                        '_name' => 'unitAmount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1733 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbf8000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1734 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1735 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fbfe000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1736 ()
                                                        '_setQueue' => Array &1737 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1738 ()
                                            )
                                            'tax' => Mockery\ExpectationDirector Object &0000000021e1fbf5000000005777935d (
                                                '_name' => 'tax'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fbf6000000005777935d
                                                '_expectations' => Array &1739 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbf4000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fbf6000000005777935d
                                                        '_name' => 'tax'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1740 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbf3000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1741 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1742 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1fbfa000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1743 ()
                                                        '_setQueue' => Array &1744 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1745 ()
                                            )
                                            'quantity' => Mockery\ExpectationDirector Object &0000000021e1fbf2000000005777935d (
                                                '_name' => 'quantity'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fbf6000000005777935d
                                                '_expectations' => Array &1746 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbf1000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fbf6000000005777935d
                                                        '_name' => 'quantity'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1747 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbf0000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1748 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1749 (
                                                            0 => 2
                                                        )
                                                        '_closureQueue' => Array &1750 ()
                                                        '_setQueue' => Array &1751 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1752 ()
                                            )
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1fbef000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fbf6000000005777935d
                                                '_expectations' => Array &1753 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbee000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1fbf6000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1754 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbed000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1755 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1756 (
                                                            0 => Array &1757 ()
                                                        )
                                                        '_closureQueue' => Array &1758 ()
                                                        '_setQueue' => Array &1759 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1760 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1761 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1762 ()
                                        '_mockery_mockableMethods' => Array &1763 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1764 ()
                                        '_mockery_instanceMock' => false
                                        'name' => null
                                        'unitAmount' => null
                                        'quantity' => null
                                        'description' => null
                                        'tax' => null
                                        'sku' => null
                                        'category' => null
                                    )
                                    59 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fbe9000000005777935d (
                                        '_mockery_expectations' => Array &1765 (
                                            'itemTotal' => Mockery\ExpectationDirector Object &0000000021e1fbec000000005777935d (
                                                '_name' => 'itemTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fbe9000000005777935d
                                                '_expectations' => Array &1766 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbea000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fbe9000000005777935d
                                                        '_name' => 'itemTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1767 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbeb000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1768 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1769 ()
                                                        '_closureQueue' => Array &1770 (
                                                            0 => Closure Object &0000000021e1fbd4000000005777935d (
                                                                0 => Closure Object &0000000021e1fbd4000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1771 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1772 ()
                                            )
                                            'taxTotal' => Mockery\ExpectationDirector Object &0000000021e1fbe7000000005777935d (
                                                '_name' => 'taxTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fbe9000000005777935d
                                                '_expectations' => Array &1773 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbe6000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fbe9000000005777935d
                                                        '_name' => 'taxTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1774 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbe5000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1775 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1776 ()
                                                        '_closureQueue' => Array &1777 (
                                                            0 => Closure Object &0000000021e1fbd0000000005777935d (
                                                                0 => Closure Object &0000000021e1fbd0000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1778 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1779 ()
                                            )
                                            'shipping' => Mockery\ExpectationDirector Object &0000000021e1fbe3000000005777935d (
                                                '_name' => 'shipping'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fbe9000000005777935d
                                                '_expectations' => Array &1780 (
                                                    0 => Mockery\Expectation Object &0000000021e1fbe2000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fbe9000000005777935d
                                                        '_name' => 'shipping'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1781 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fbe1000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1782 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1783 ()
                                                        '_closureQueue' => Array &1784 (
                                                            0 => Closure Object &0000000021e1fbcc000000005777935d (
                                                                0 => Closure Object &0000000021e1fbcc000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1785 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1786 ()
                                            )
                                            'discount' => Mockery\ExpectationDirector Object &0000000021e1f81f000000005777935d (
                                                '_name' => 'discount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fbe9000000005777935d
                                                '_expectations' => Array &1787 (
                                                    0 => Mockery\Expectation Object &0000000021e1f81e000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fbe9000000005777935d
                                                        '_name' => 'discount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1788 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f81d000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1789 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1790 ()
                                                        '_closureQueue' => Array &1791 (
                                                            0 => Closure Object &0000000021e1fbe8000000005777935d (
                                                                0 => Closure Object &0000000021e1fbe8000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1792 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1793 ()
                                            )
                                            'shippingDiscount' => Mockery\ExpectationDirector Object &0000000021e1f81b000000005777935d (
                                                '_name' => 'shippingDiscount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fbe9000000005777935d
                                                '_expectations' => Array &1794 (
                                                    0 => Mockery\Expectation Object &0000000021e1f81a000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fbe9000000005777935d
                                                        '_name' => 'shippingDiscount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1795 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f819000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1796 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1797 ()
                                                        '_closureQueue' => Array &1798 (
                                                            0 => Closure Object &0000000021e1fbe4000000005777935d (
                                                                0 => Closure Object &0000000021e1fbe4000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1799 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1800 ()
                                            )
                                            'handling' => Mockery\ExpectationDirector Object &0000000021e1f817000000005777935d (
                                                '_name' => 'handling'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fbe9000000005777935d
                                                '_expectations' => Array &1801 (
                                                    0 => Mockery\Expectation Object &0000000021e1f816000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fbe9000000005777935d
                                                        '_name' => 'handling'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1802 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f815000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1803 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1804 ()
                                                        '_closureQueue' => Array &1805 (
                                                            0 => Closure Object &0000000021e1fbe0000000005777935d (
                                                                0 => Closure Object &0000000021e1fbe0000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1806 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1807 ()
                                            )
                                            'insurance' => Mockery\ExpectationDirector Object &0000000021e1f813000000005777935d (
                                                '_name' => 'insurance'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fbe9000000005777935d
                                                '_expectations' => Array &1808 (
                                                    0 => Mockery\Expectation Object &0000000021e1f812000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fbe9000000005777935d
                                                        '_name' => 'insurance'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1809 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f811000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1810 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1811 ()
                                                        '_closureQueue' => Array &1812 (
                                                            0 => Closure Object &0000000021e1f81c000000005777935d (
                                                                0 => Closure Object &0000000021e1f81c000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1813 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1814 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1815 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1816 ()
                                        '_mockery_mockableMethods' => Array &1817 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1818 ()
                                        '_mockery_instanceMock' => false
                                        'itemTotal' => null
                                        'shipping' => null
                                        'taxTotal' => null
                                        'handling' => null
                                        'insurance' => null
                                        'shippingDiscount' => null
                                        'discount' => null
                                    )
                                    60 => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1f80c000000005777935d (
                                        '_mockery_expectations' => Array &1819 (
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1f80f000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1f80c000000005777935d
                                                '_expectations' => Array &1820 (
                                                    0 => Mockery\Expectation Object &0000000021e1f80d000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1f80c000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1821 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f80e000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1822 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1823 (
                                                            0 => Array &1824 (
                                                                'value' => Array &1825 ()
                                                                'breakdown' => Array &1826 ()
                                                            )
                                                        )
                                                        '_closureQueue' => Array &1827 ()
                                                        '_setQueue' => Array &1828 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1829 ()
                                            )
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1f80b000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1f80c000000005777935d
                                                '_expectations' => Array &1830 (
                                                    0 => Mockery\Expectation Object &0000000021e1f80a000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1f80c000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1831 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f809000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1832 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1833 (
                                                            0 => 26
                                                        )
                                                        '_closureQueue' => Array &1834 ()
                                                        '_setQueue' => Array &1835 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1836 ()
                                            )
                                            'breakdown' => Mockery\ExpectationDirector Object &0000000021e1f808000000005777935d (
                                                '_name' => 'breakdown'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1f80c000000005777935d
                                                '_expectations' => Array &1837 (
                                                    0 => Mockery\Expectation Object &0000000021e1f807000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1f80c000000005777935d
                                                        '_name' => 'breakdown'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1838 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f806000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1839 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1840 (
                                                            0 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1fbe9000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1841 ()
                                                        '_setQueue' => Array &1842 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1843 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1844 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1845 ()
                                        '_mockery_mockableMethods' => Array &1846 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1847 ()
                                        '_mockery_instanceMock' => false
                                        'money' => null
                                        'breakdown' => null
                                    )
                                    61 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1f802000000005777935d (
                                        '_mockery_expectations' => Array &1848 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1f805000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1f802000000005777935d
                                                '_expectations' => Array &1849 (
                                                    0 => Mockery\Expectation Object &0000000021e1f803000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1f802000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1850 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f804000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1851 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1852 (
                                                            0 => 10
                                                        )
                                                        '_closureQueue' => Array &1853 ()
                                                        '_setQueue' => Array &1854 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1855 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1856 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1857 ()
                                        '_mockery_mockableMethods' => Array &1858 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1859 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    62 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1f83e000000005777935d (
                                        '_mockery_expectations' => Array &1860 (
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1f801000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1f83e000000005777935d
                                                '_expectations' => Array &1861 (
                                                    0 => Mockery\Expectation Object &0000000021e1f83f000000005777935d (
                                                        '_mock' => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1f83e000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1862 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f800000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1863 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1864 (
                                                            0 => 3
                                                        )
                                                        '_closureQueue' => Array &1865 ()
                                                        '_setQueue' => Array &1866 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1867 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1868 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1869 ()
                                        '_mockery_mockableMethods' => Array &1870 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1871 ()
                                        '_mockery_instanceMock' => false
                                        'currencyCode' => null
                                        'value' => null
                                    )
                                    63 => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1f83a000000005777935d (
                                        '_mockery_expectations' => Array &1872 (
                                            'unitAmount' => Mockery\ExpectationDirector Object &0000000021e1f83d000000005777935d (
                                                '_name' => 'unitAmount'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1f83a000000005777935d
                                                '_expectations' => Array &1873 (
                                                    0 => Mockery\Expectation Object &0000000021e1f83b000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1f83a000000005777935d
                                                        '_name' => 'unitAmount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1874 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f83c000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1875 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1876 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1f802000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1877 ()
                                                        '_setQueue' => Array &1878 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1879 ()
                                            )
                                            'tax' => Mockery\ExpectationDirector Object &0000000021e1f839000000005777935d (
                                                '_name' => 'tax'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1f83a000000005777935d
                                                '_expectations' => Array &1880 (
                                                    0 => Mockery\Expectation Object &0000000021e1f838000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1f83a000000005777935d
                                                        '_name' => 'tax'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1881 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f837000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1882 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1883 (
                                                            0 => Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money Object &0000000021e1f83e000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1884 ()
                                                        '_setQueue' => Array &1885 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1886 ()
                                            )
                                            'quantity' => Mockery\ExpectationDirector Object &0000000021e1f836000000005777935d (
                                                '_name' => 'quantity'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1f83a000000005777935d
                                                '_expectations' => Array &1887 (
                                                    0 => Mockery\Expectation Object &0000000021e1f835000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1f83a000000005777935d
                                                        '_name' => 'quantity'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1888 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f834000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1889 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1890 (
                                                            0 => 2
                                                        )
                                                        '_closureQueue' => Array &1891 ()
                                                        '_setQueue' => Array &1892 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1893 ()
                                            )
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1f833000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1f83a000000005777935d
                                                '_expectations' => Array &1894 (
                                                    0 => Mockery\Expectation Object &0000000021e1f832000000005777935d (
                                                        '_mock' => Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item Object &0000000021e1f83a000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1895 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f831000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1896 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1897 (
                                                            0 => Array &1898 ()
                                                        )
                                                        '_closureQueue' => Array &1899 ()
                                                        '_setQueue' => Array &1900 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1901 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1902 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1903 ()
                                        '_mockery_mockableMethods' => Array &1904 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1905 ()
                                        '_mockery_instanceMock' => false
                                        'name' => null
                                        'unitAmount' => null
                                        'quantity' => null
                                        'description' => null
                                        'tax' => null
                                        'sku' => null
                                        'category' => null
                                    )
                                    64 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1f82d000000005777935d (
                                        '_mockery_expectations' => Array &1906 (
                                            'itemTotal' => Mockery\ExpectationDirector Object &0000000021e1f830000000005777935d (
                                                '_name' => 'itemTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1f82d000000005777935d
                                                '_expectations' => Array &1907 (
                                                    0 => Mockery\Expectation Object &0000000021e1f82e000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1f82d000000005777935d
                                                        '_name' => 'itemTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1908 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f82f000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1909 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1910 ()
                                                        '_closureQueue' => Array &1911 (
                                                            0 => Closure Object &0000000021e1f818000000005777935d (
                                                                0 => Closure Object &0000000021e1f818000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1912 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1913 ()
                                            )
                                            'taxTotal' => Mockery\ExpectationDirector Object &0000000021e1f82b000000005777935d (
                                                '_name' => 'taxTotal'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1f82d000000005777935d
                                                '_expectations' => Array &1914 (
                                                    0 => Mockery\Expectation Object &0000000021e1f82a000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1f82d000000005777935d
                                                        '_name' => 'taxTotal'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1915 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f829000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1916 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1917 ()
                                                        '_closureQueue' => Array &1918 (
                                                            0 => Closure Object &0000000021e1f814000000005777935d (
                                                                0 => Closure Object &0000000021e1f814000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1919 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1920 ()
                                            )
                                            'shipping' => Mockery\ExpectationDirector Object &0000000021e1f827000000005777935d (
                                                '_name' => 'shipping'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1f82d000000005777935d
                                                '_expectations' => Array &1921 (
                                                    0 => Mockery\Expectation Object &0000000021e1f826000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1f82d000000005777935d
                                                        '_name' => 'shipping'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1922 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f825000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1923 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1924 ()
                                                        '_closureQueue' => Array &1925 (
                                                            0 => Closure Object &0000000021e1f810000000005777935d (
                                                                0 => Closure Object &0000000021e1f810000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1926 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1927 ()
                                            )
                                            'discount' => Mockery\ExpectationDirector Object &0000000021e1f823000000005777935d (
                                                '_name' => 'discount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1f82d000000005777935d
                                                '_expectations' => Array &1928 (
                                                    0 => Mockery\Expectation Object &0000000021e1f822000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1f82d000000005777935d
                                                        '_name' => 'discount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1929 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f821000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1930 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1931 ()
                                                        '_closureQueue' => Array &1932 (
                                                            0 => Closure Object &0000000021e1f82c000000005777935d (
                                                                0 => Closure Object &0000000021e1f82c000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1933 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1934 ()
                                            )
                                            'shippingDiscount' => Mockery\ExpectationDirector Object &0000000021e1f85f000000005777935d (
                                                '_name' => 'shippingDiscount'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1f82d000000005777935d
                                                '_expectations' => Array &1935 (
                                                    0 => Mockery\Expectation Object &0000000021e1f85e000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1f82d000000005777935d
                                                        '_name' => 'shippingDiscount'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1936 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f85d000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1937 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1938 ()
                                                        '_closureQueue' => Array &1939 (
                                                            0 => Closure Object &0000000021e1f828000000005777935d (
                                                                0 => Closure Object &0000000021e1f828000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1940 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1941 ()
                                            )
                                            'handling' => Mockery\ExpectationDirector Object &0000000021e1f85b000000005777935d (
                                                '_name' => 'handling'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1f82d000000005777935d
                                                '_expectations' => Array &1942 (
                                                    0 => Mockery\Expectation Object &0000000021e1f85a000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1f82d000000005777935d
                                                        '_name' => 'handling'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1943 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f859000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1944 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1945 ()
                                                        '_closureQueue' => Array &1946 (
                                                            0 => Closure Object &0000000021e1f824000000005777935d (
                                                                0 => Closure Object &0000000021e1f824000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1947 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1948 ()
                                            )
                                            'insurance' => Mockery\ExpectationDirector Object &0000000021e1f857000000005777935d (
                                                '_name' => 'insurance'
                                                '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1f82d000000005777935d
                                                '_expectations' => Array &1949 (
                                                    0 => Mockery\Expectation Object &0000000021e1f856000000005777935d (
                                                        '_mock' => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1f82d000000005777935d
                                                        '_name' => 'insurance'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1950 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f855000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1951 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1952 ()
                                                        '_closureQueue' => Array &1953 (
                                                            0 => Closure Object &0000000021e1f820000000005777935d (
                                                                0 => Closure Object &0000000021e1f820000000005777935d
                                                            )
                                                        )
                                                        '_setQueue' => Array &1954 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1955 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1956 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1957 ()
                                        '_mockery_mockableMethods' => Array &1958 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1959 ()
                                        '_mockery_instanceMock' => false
                                        'itemTotal' => null
                                        'shipping' => null
                                        'taxTotal' => null
                                        'handling' => null
                                        'insurance' => null
                                        'shippingDiscount' => null
                                        'discount' => null
                                    )
                                    65 => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1f850000000005777935d (
                                        '_mockery_expectations' => Array &1960 (
                                            'toArray' => Mockery\ExpectationDirector Object &0000000021e1f853000000005777935d (
                                                '_name' => 'toArray'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1f850000000005777935d
                                                '_expectations' => Array &1961 (
                                                    0 => Mockery\Expectation Object &0000000021e1f851000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1f850000000005777935d
                                                        '_name' => 'toArray'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1962 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f852000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1963 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1964 (
                                                            0 => Array &1965 (
                                                                'value' => Array &1966 ()
                                                                'breakdown' => Array &1967 ()
                                                            )
                                                        )
                                                        '_closureQueue' => Array &1968 ()
                                                        '_setQueue' => Array &1969 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1970 ()
                                            )
                                            'value' => Mockery\ExpectationDirector Object &0000000021e1f84f000000005777935d (
                                                '_name' => 'value'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1f850000000005777935d
                                                '_expectations' => Array &1971 (
                                                    0 => Mockery\Expectation Object &0000000021e1f84e000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1f850000000005777935d
                                                        '_name' => 'value'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1972 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f84d000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1973 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1974 (
                                                            0 => 260
                                                        )
                                                        '_closureQueue' => Array &1975 ()
                                                        '_setQueue' => Array &1976 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1977 ()
                                            )
                                            'breakdown' => Mockery\ExpectationDirector Object &0000000021e1f84c000000005777935d (
                                                '_name' => 'breakdown'
                                                '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1f850000000005777935d
                                                '_expectations' => Array &1978 (
                                                    0 => Mockery\Expectation Object &0000000021e1f84b000000005777935d (
                                                        '_mock' => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1f850000000005777935d
                                                        '_name' => 'breakdown'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1979 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f84a000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1980 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1981 (
                                                            0 => Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown Object &0000000021e1f82d000000005777935d
                                                        )
                                                        '_closureQueue' => Array &1982 ()
                                                        '_setQueue' => Array &1983 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &1984 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &1985 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &1986 ()
                                        '_mockery_mockableMethods' => Array &1987 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &1988 ()
                                        '_mockery_instanceMock' => false
                                        'money' => null
                                        'breakdown' => null
                                    )
                                    'Mockery_4' => Mockery_4 Object &0000000021e1fe5d000000005777935d (
                                        '_mockery_expectations' => Array &1989 (
                                            'WC' => Mockery\ExpectationDirector Object &0000000021e1fe5e000000005777935d (
                                                '_name' => 'WC'
                                                '_mock' => Mockery_4 Object &0000000021e1fe5d000000005777935d
                                                '_expectations' => Array &1990 (
                                                    0 => Mockery\Expectation Object &0000000021e1fe99000000005777935d (
                                                        '_mock' => Mockery_4 Object &0000000021e1fe5d000000005777935d
                                                        '_name' => 'WC'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &1991 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fe9a000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &1992 ()
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 2
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &1993 (
                                                            0 => stdClass Object &0000000021e1fe60000000005777935d (
                                                                'customer' => Mockery_5__WC_Customer Object &0000000021e1fe98000000005777935d (
                                                                    '_mockery_expectations' => Array &1994 ()
                                                                    '_mockery_expectations_count' => 0
                                                                    '_mockery_ignoreMissing' => false
                                                                    '_mockery_deferMissing' => false
                                                                    '_mockery_verified' => false
                                                                    '_mockery_name' => null
                                                                    '_mockery_allocatedOrder' => 0
                                                                    '_mockery_currentOrder' => 0
                                                                    '_mockery_groups' => Array &1995 ()
                                                                    '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                                                    '_mockery_partial' => null
                                                                    '_mockery_disableExpectationMatching' => false
                                                                    '_mockery_mockableProperties' => Array &1996 ()
                                                                    '_mockery_mockableMethods' => Array &1997 ()
                                                                    '_mockery_allowMockingProtectedMethods' => false
                                                                    '_mockery_receivedMethodCalls' => null
                                                                    '_mockery_defaultReturnValue' => null
                                                                    '_mockery_thrownExceptions' => Array &1998 ()
                                                                    '_mockery_instanceMock' => false
                                                                )
                                                            )
                                                        )
                                                        '_closureQueue' => Array &1999 ()
                                                        '_setQueue' => Array &2000 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &2001 (
                                                    0 => Mockery\Expectation Object &0000000021e1fe68000000005777935d (
                                                        '_mock' => Mockery_4 Object &0000000021e1fe5d000000005777935d
                                                        '_name' => 'WC'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &2002 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1fe67000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &2003 (
                                                            'Mockery\CountValidator\AtLeast' => Mockery\CountValidator\AtLeast Object &0000000021e1fe24000000005777935d (
                                                                '_expectation' => Mockery\Expectation Object &0000000021e1fe68000000005777935d
                                                                '_limit' => 1
                                                            )
                                                        )
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 0
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &2004 ()
                                                        '_closureQueue' => Array &2005 ()
                                                        '_setQueue' => Array &2006 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &2007 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &2008 ()
                                        '_mockery_mockableMethods' => Array &2009 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => Mockery\ReceivedMethodCalls Object &0000000021e1f96f000000005777935d (
                                            'methodCalls' => Array &2010 (
                                                0 => Mockery\MethodCall Object &0000000021e1f96e000000005777935d (
                                                    'method' => 'WC'
                                                    'args' => Array &2011 ()
                                                )
                                                1 => Mockery\MethodCall Object &0000000021e1f96d000000005777935d (
                                                    'method' => 'WC'
                                                    'args' => Array &2012 ()
                                                )
                                            )
                                        )
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &2013 ()
                                        '_mockery_instanceMock' => false
                                    )
                                    'Mockery_5__WC_Customer' => Mockery_5__WC_Customer Object &0000000021e1fe98000000005777935d
                                    'Mockery_6__WC_Cart' => Mockery_6__WC_Cart Object &0000000021e1fe91000000005777935d (
                                        '_mockery_expectations' => Array &2014 ()
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &2015 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &2016 ()
                                        '_mockery_mockableMethods' => Array &2017 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &2018 ()
                                        '_mockery_instanceMock' => false
                                    )
                                    66 => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fe90000000005777935d (
                                        '_mockery_expectations' => Array &2019 ()
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &2020 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &2021 ()
                                        '_mockery_mockableMethods' => Array &2022 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &2023 ()
                                        '_mockery_instanceMock' => false
                                        'money' => null
                                        'breakdown' => null
                                    )
                                    'Mockery_7_Inpsyde_PayPalCommerce_ApiClient_Factory_AmountFactory' => Mockery_7_Inpsyde_PayPalCommerce_ApiClient_Factory_AmountFactory Object &0000000021e1fe81000000005777935d (
                                        '_mockery_expectations' => Array &2024 (
                                            'fromWcCart' => Mockery\ExpectationDirector Object &0000000021e1fe25000000005777935d (
                                                '_name' => 'fromWcCart'
                                                '_mock' => Mockery_7_Inpsyde_PayPalCommerce_ApiClient_Factory_AmountFactory Object &0000000021e1fe81000000005777935d
                                                '_expectations' => Array &2025 (
                                                    0 => Mockery\Expectation Object &0000000021e1fec8000000005777935d (
                                                        '_mock' => Mockery_7_Inpsyde_PayPalCommerce_ApiClient_Factory_AmountFactory Object &0000000021e1fe81000000005777935d
                                                        '_name' => 'fromWcCart'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &2026 (
                                                            0 => Mockery_6__WC_Cart Object &0000000021e1fe91000000005777935d
                                                        )
                                                        '_countValidators' => Array &2027 (
                                                            'Mockery\CountValidator\Exact' => Mockery\CountValidator\Exact Object &0000000021e1fe97000000005777935d (
                                                                '_expectation' => Mockery\Expectation Object &0000000021e1fec8000000005777935d
                                                                '_limit' => 1
                                                            )
                                                        )
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 1
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &2028 (
                                                            0 => Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount Object &0000000021e1fe90000000005777935d
                                                        )
                                                        '_closureQueue' => Array &2029 ()
                                                        '_setQueue' => Array &2030 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &2031 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &2032 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &2033 ()
                                        '_mockery_mockableMethods' => Array &2034 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => Mockery\ReceivedMethodCalls Object &0000000021e1f93c000000005777935d (
                                            'methodCalls' => Array &2035 (
                                                0 => Mockery\MethodCall Object &0000000021e1f974000000005777935d (
                                                    'method' => 'fromWcCart'
                                                    'args' => Array &2036 (
                                                        0 => Mockery_6__WC_Cart Object &0000000021e1fe91000000005777935d
                                                    )
                                                )
                                            )
                                        )
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &2037 ()
                                        '_mockery_instanceMock' => false
                                        'itemFactory' => null
                                    )
                                    'Mockery_8_Inpsyde_PayPalCommerce_ApiClient_Factory_PayeeFactory' => Mockery_8_Inpsyde_PayPalCommerce_ApiClient_Factory_PayeeFactory Object &0000000021e1fefc000000005777935d (
                                        '_mockery_expectations' => Array &2038 ()
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &2039 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &2040 ()
                                        '_mockery_mockableMethods' => Array &2041 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => null
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &2042 ()
                                        '_mockery_instanceMock' => false
                                    )
                                    'Mockery_9_Inpsyde_PayPalCommerce_ApiClient_Repository_PayeeRepository' => Mockery_9_Inpsyde_PayPalCommerce_ApiClient_Repository_PayeeRepository Object &0000000021e1fef6000000005777935d (
                                        '_mockery_expectations' => Array &2043 (
                                            'payee' => Mockery\ExpectationDirector Object &0000000021e1fec6000000005777935d (
                                                '_name' => 'payee'
                                                '_mock' => Mockery_9_Inpsyde_PayPalCommerce_ApiClient_Repository_PayeeRepository Object &0000000021e1fef6000000005777935d
                                                '_expectations' => Array &2044 (
                                                    0 => Mockery\Expectation Object &0000000021e1ff31000000005777935d (
                                                        '_mock' => Mockery_9_Inpsyde_PayPalCommerce_ApiClient_Repository_PayeeRepository Object &0000000021e1fef6000000005777935d
                                                        '_name' => 'payee'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &2045 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1ff30000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &2046 (
                                                            'Mockery\CountValidator\Exact' => Mockery\CountValidator\Exact Object &0000000021e1fe94000000005777935d (
                                                                '_expectation' => Mockery\Expectation Object &0000000021e1ff31000000005777935d
                                                                '_limit' => 1
                                                            )
                                                        )
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 1
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &2047 (
                                                            0 => Mockery_10_Inpsyde_PayPalCommerce_ApiClient_Entity_Payee Object &0000000021e1fee7000000005777935d (
                                                                '_mockery_expectations' => Array &2048 ()
                                                                '_mockery_expectations_count' => 0
                                                                '_mockery_ignoreMissing' => false
                                                                '_mockery_deferMissing' => false
                                                                '_mockery_verified' => false
                                                                '_mockery_name' => null
                                                                '_mockery_allocatedOrder' => 0
                                                                '_mockery_currentOrder' => 0
                                                                '_mockery_groups' => Array &2049 ()
                                                                '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                                                '_mockery_partial' => null
                                                                '_mockery_disableExpectationMatching' => false
                                                                '_mockery_mockableProperties' => Array &2050 ()
                                                                '_mockery_mockableMethods' => Array &2051 ()
                                                                '_mockery_allowMockingProtectedMethods' => false
                                                                '_mockery_receivedMethodCalls' => null
                                                                '_mockery_defaultReturnValue' => null
                                                                '_mockery_thrownExceptions' => Array &2052 ()
                                                                '_mockery_instanceMock' => false
                                                                'email' => null
                                                                'merchantId' => null
                                                            )
                                                        )
                                                        '_closureQueue' => Array &2053 ()
                                                        '_setQueue' => Array &2054 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &2055 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &2056 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &2057 ()
                                        '_mockery_mockableMethods' => Array &2058 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => Mockery\ReceivedMethodCalls Object &0000000021e1f966000000005777935d (
                                            'methodCalls' => Array &2059 (
                                                0 => Mockery\MethodCall Object &0000000021e1f965000000005777935d (
                                                    'method' => 'payee'
                                                    'args' => Array &2060 ()
                                                )
                                            )
                                        )
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &2061 ()
                                        '_mockery_instanceMock' => false
                                        'config' => null
                                    )
                                    'Mockery_10_Inpsyde_PayPalCommerce_ApiClient_Entity_Payee' => Mockery_10_Inpsyde_PayPalCommerce_ApiClient_Entity_Payee Object &0000000021e1fee7000000005777935d
                                    'Mockery_11_Inpsyde_PayPalCommerce_ApiClient_Factory_ItemFactory' => Mockery_11_Inpsyde_PayPalCommerce_ApiClient_Factory_ItemFactory Object &0000000021e1ff5d000000005777935d (
                                        '_mockery_expectations' => Array &2062 (
                                            'fromWcCart' => Mockery\ExpectationDirector Object &0000000021e1fec7000000005777935d (
                                                '_name' => 'fromWcCart'
                                                '_mock' => Mockery_11_Inpsyde_PayPalCommerce_ApiClient_Factory_ItemFactory Object &0000000021e1ff5d000000005777935d
                                                '_expectations' => Array &2063 (
                                                    0 => Mockery\Expectation Object &0000000021e1f89d000000005777935d (
                                                        '_mock' => Mockery_11_Inpsyde_PayPalCommerce_ApiClient_Factory_ItemFactory Object &0000000021e1ff5d000000005777935d
                                                        '_name' => 'fromWcCart'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &2064 (
                                                            0 => Mockery_6__WC_Cart Object &0000000021e1fe91000000005777935d
                                                        )
                                                        '_countValidators' => Array &2065 (
                                                            'Mockery\CountValidator\Exact' => Mockery\CountValidator\Exact Object &0000000021e1fef3000000005777935d (
                                                                '_expectation' => Mockery\Expectation Object &0000000021e1f89d000000005777935d
                                                                '_limit' => 1
                                                            )
                                                        )
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 1
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &2066 (
                                                            0 => Array &2067 ()
                                                        )
                                                        '_closureQueue' => Array &2068 ()
                                                        '_setQueue' => Array &2069 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &2070 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &2071 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &2072 ()
                                        '_mockery_mockableMethods' => Array &2073 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => Mockery\ReceivedMethodCalls Object &0000000021e1f973000000005777935d (
                                            'methodCalls' => Array &2074 (
                                                0 => Mockery\MethodCall Object &0000000021e1f972000000005777935d (
                                                    'method' => 'fromWcCart'
                                                    'args' => Array &2075 (
                                                        0 => Mockery_6__WC_Cart Object &0000000021e1fe91000000005777935d
                                                    )
                                                )
                                            )
                                        )
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &2076 ()
                                        '_mockery_instanceMock' => false
                                    )
                                    'Mockery_12_Inpsyde_PayPalCommerce_ApiClient_Entity_Address' => Mockery_12_Inpsyde_PayPalCommerce_ApiClient_Entity_Address Object &0000000021e1f884000000005777935d
                                    'Mockery_13_Inpsyde_PayPalCommerce_ApiClient_Entity_Shipping' => Mockery_13_Inpsyde_PayPalCommerce_ApiClient_Entity_Shipping Object &0000000021e1f8f7000000005777935d
                                    'Mockery_14_Inpsyde_PayPalCommerce_ApiClient_Factory_ShippingFactory' => Mockery_14_Inpsyde_PayPalCommerce_ApiClient_Factory_ShippingFactory Object &0000000021e1f92e000000005777935d (
                                        '_mockery_expectations' => Array &2077 (
                                            'fromWcCustomer' => Mockery\ExpectationDirector Object &0000000021e1f8c6000000005777935d (
                                                '_name' => 'fromWcCustomer'
                                                '_mock' => Mockery_14_Inpsyde_PayPalCommerce_ApiClient_Factory_ShippingFactory Object &0000000021e1f92e000000005777935d
                                                '_expectations' => Array &2078 (
                                                    0 => Mockery\Expectation Object &0000000021e1f976000000005777935d (
                                                        '_mock' => Mockery_14_Inpsyde_PayPalCommerce_ApiClient_Factory_ShippingFactory Object &0000000021e1f92e000000005777935d
                                                        '_name' => 'fromWcCustomer'
                                                        '_because' => null
                                                        '_expectedArgs' => Array &2079 (
                                                            0 => Mockery\Matcher\AnyArgs Object &0000000021e1f975000000005777935d (
                                                                '_expected' => null
                                                            )
                                                        )
                                                        '_countValidators' => Array &2080 (
                                                            'Mockery\CountValidator\Exact' => Mockery\CountValidator\Exact Object &0000000021e1f89c000000005777935d (
                                                                '_expectation' => Mockery\Expectation Object &0000000021e1f976000000005777935d
                                                                '_limit' => 1
                                                            )
                                                        )
                                                        '_countValidatorClass' => 'Mockery\CountValidator\Exact'
                                                        '_actualCount' => 1
                                                        '_returnValue' => null
                                                        '_returnQueue' => Array &2081 (
                                                            0 => Mockery_13_Inpsyde_PayPalCommerce_ApiClient_Entity_Shipping Object &0000000021e1f8f7000000005777935d
                                                        )
                                                        '_closureQueue' => Array &2082 ()
                                                        '_setQueue' => Array &2083 ()
                                                        '_orderNumber' => null
                                                        '_globalOrderNumber' => null
                                                        '_throw' => false
                                                        '_globally' => false
                                                        '_passthru' => false
                                                    )
                                                )
                                                '_expectedOrder' => null
                                                '_defaults' => Array &2084 ()
                                            )
                                        )
                                        '_mockery_expectations_count' => 0
                                        '_mockery_ignoreMissing' => false
                                        '_mockery_deferMissing' => false
                                        '_mockery_verified' => false
                                        '_mockery_name' => null
                                        '_mockery_allocatedOrder' => 0
                                        '_mockery_currentOrder' => 0
                                        '_mockery_groups' => Array &2085 ()
                                        '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
                                        '_mockery_partial' => null
                                        '_mockery_disableExpectationMatching' => false
                                        '_mockery_mockableProperties' => Array &2086 ()
                                        '_mockery_mockableMethods' => Array &2087 ()
                                        '_mockery_allowMockingProtectedMethods' => false
                                        '_mockery_receivedMethodCalls' => Mockery\ReceivedMethodCalls Object &0000000021e1f971000000005777935d (
                                            'methodCalls' => Array &2088 (
                                                0 => Mockery\MethodCall Object &0000000021e1f970000000005777935d (
                                                    'method' => 'fromWcCustomer'
                                                    'args' => Array &2089 (
                                                        0 => Mockery_5__WC_Customer Object &0000000021e1fe98000000005777935d
                                                    )
                                                )
                                            )
                                        )
                                        '_mockery_defaultReturnValue' => null
                                        '_mockery_thrownExceptions' => Array &2090 ()
                                        '_mockery_instanceMock' => false
                                        'addressFactory' => null
                                    )
                                )
                                '_allocatedOrder' => 0
                                '_currentOrder' => 0
                                '_groups' => Array &2091 ()
                                '_generator' => Mockery\Generator\CachingGenerator Object &0000000021e1ffda000000005777935d (
                                    'generator' => Mockery\Generator\StringManipulationGenerator Object &0000000021e1ffd9000000005777935d (
                                        'passes' => Array &2092 (
                                            0 => Mockery\Generator\StringManipulation\Pass\CallTypeHintPass Object &0000000021e1ffd8000000005777935d ()
                                            1 => Mockery\Generator\StringManipulation\Pass\MagicMethodTypeHintsPass Object &0000000021e1ffd7000000005777935d (
                                                'mockMagicMethods' => Array &2093 (
                                                    0 => '__construct'
                                                    1 => '__destruct'
                                                    2 => '__call'
                                                    3 => '__callStatic'
                                                    4 => '__get'
                                                    5 => '__set'
                                                    6 => '__isset'
                                                    7 => '__unset'
                                                    8 => '__sleep'
                                                    9 => '__wakeup'
                                                    10 => '__toString'
                                                    11 => '__invoke'
                                                    12 => '__set_state'
                                                    13 => '__clone'
                                                    14 => '__debugInfo'
                                                )
                                            )
                                            2 => Mockery\Generator\StringManipulation\Pass\ClassPass Object &0000000021e1ffd6000000005777935d ()
                                            3 => Mockery\Generator\StringManipulation\Pass\TraitPass Object &0000000021e1ffd5000000005777935d ()
                                            4 => Mockery\Generator\StringManipulation\Pass\ClassNamePass Object &0000000021e1ffd4000000005777935d ()
                                            5 => Mockery\Generator\StringManipulation\Pass\InstanceMockPass Object &0000000021e1ffd3000000005777935d ()
                                            6 => Mockery\Generator\StringManipulation\Pass\InterfacePass Object &0000000021e1ffd2000000005777935d ()
                                            7 => Mockery\Generator\StringManipulation\Pass\AvoidMethodClashPass Object &0000000021e1ffd1000000005777935d ()
                                            8 => Mockery\Generator\StringManipulation\Pass\MethodDefinitionPass Object &0000000021e1ffd0000000005777935d ()
                                            9 => Mockery\Generator\StringManipulation\Pass\RemoveUnserializeForInternalSerializableClassesPass Object &0000000021e1ffcf000000005777935d ()
                                            10 => Mockery\Generator\StringManipulation\Pass\RemoveBuiltinMethodsThatAreFinalPass Object &0000000021e1ffce000000005777935d (
                                                'methods' => Array &2094 (
                                                    '__wakeup' => '/public function __wakeup\(\)\s+\{.*?\}/sm'
                                                )
                                            )
                                            11 => Mockery\Generator\StringManipulation\Pass\RemoveDestructorPass Object &0000000021e1ffcd000000005777935d ()
                                            12 => Mockery\Generator\StringManipulation\Pass\ConstantsPass Object &0000000021e1ffcc000000005777935d ()
                                        )
                                    )
                                    'cache' => Array &2095 (
                                        '3dff37eed31e7d4f56c34b5f5c12d3dd' => Mockery\Generator\MockDefinition Object &0000000021e1fff8000000005777935d (
                                            'config' => Mockery\Generator\MockConfiguration Object &0000000021e1ffc7000000005777935d (
                                                'targetClass' => Mockery\Generator\DefinedTargetClass Object &0000000021e1ffc4000000005777935d (
                                                    'rfc' => ReflectionClass Object &0000000021e1ffc3000000005777935d (
                                                        'name' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Money'
                                                    )
                                                )
                                                'targetClassName' => '\Inpsyde\PayPalCommerce\ApiClient\Entity\Money'
                                                'targetInterfaces' => Array &2096 ()
                                                'targetInterfaceNames' => Array &2097 ()
                                                'targetTraits' => Array &2098 ()
                                                'targetTraitNames' => Array &2099 ()
                                                'targetObject' => null
                                                'name' => 'Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money'
                                                'blackListedMethods' => Array &2100 (
                                                    0 => '__call'
                                                    1 => '__callStatic'
                                                    2 => '__clone'
                                                    3 => '__wakeup'
                                                    4 => '__set'
                                                    5 => '__get'
                                                    6 => '__toString'
                                                    7 => '__isset'
                                                    8 => '__destruct'
                                                    9 => '__debugInfo'
                                                    10 => '__halt_compiler'
                                                    30 => 'empty'
                                                    37 => 'eval'
                                                    53 => 'isset'
                                                    70 => 'unset'
                                                )
                                                'whiteListedMethods' => Array &2101 ()
                                                'instanceMock' => false
                                                'parameterOverrides' => Array &2102 ()
                                                'allMethods' => Array &2103 (
                                                    0 => Mockery\Generator\Method Object &0000000021e1fffd000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1ffc1000000005777935d (
                                                            'name' => '__construct'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Money'
                                                        )
                                                    )
                                                    1 => Mockery\Generator\Method Object &0000000021e1fffc000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1ffc0000000005777935d (
                                                            'name' => 'value'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Money'
                                                        )
                                                    )
                                                    2 => Mockery\Generator\Method Object &0000000021e1fffb000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1ffff000000005777935d (
                                                            'name' => 'currencyCode'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Money'
                                                        )
                                                    )
                                                    3 => Mockery\Generator\Method Object &0000000021e1fffa000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fffe000000005777935d (
                                                            'name' => 'toArray'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Money'
                                                        )
                                                    )
                                                )
                                                'mockOriginalDestructor' => true
                                                'constantsMap' => Array &2104 ()
                                            )
                                            'code' => '<?php\n
/**\n
 * Mockery\n
 *\n
 * LICENSE\n
 *\n
 * This source file is subject to the new BSD license that is bundled\n
 * with this package in the file LICENSE.txt.\n
 * It is also available through the world-wide-web at this URL:\n
 * http://github.com/padraic/mockery/blob/master/LICENSE\n
 * If you did not receive a copy of the license and are unable to\n
 * obtain it through the world-wide-web, please send an email\n
 * to padraic@php.net so we can send you a copy immediately.\n
 *\n
 * @category   Mockery\n
 * @package    Mockery\n
 * @copyright  Copyright (c) 2010 Pádraic Brady (http://blog.astrumfutura.com)\n
 * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License\n
 */\n
\n
\n
\n
use Mockery\HigherOrderMessage;\n
use Mockery\MockInterface;\n
use Mockery\LegacyMockInterface;\n
use Mockery\ExpectsHigherOrderMessage;\n
use Mockery\Exception\BadMethodCallException;\n
\n
class Mockery_0_Inpsyde_PayPalCommerce_ApiClient_Entity_Money extends \Inpsyde\PayPalCommerce\ApiClient\Entity\Money implements MockInterface\n
{\n
    /**\n
     * Stores an array of all expectation directors for this mock\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_expectations = array();\n
\n
    /**\n
     * Stores an inital number of expectations that can be manipulated\n
     * while using the getter method.\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_expectations_count = 0;\n
\n
    /**\n
     * Flag to indicate whether we can ignore method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_ignoreMissing = false;\n
\n
    /**\n
     * Flag to indicate whether we can defer method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_deferMissing = false;\n
\n
    /**\n
     * Flag to indicate whether this mock was verified\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_verified = false;\n
\n
    /**\n
     * Given name of the mock\n
     *\n
     * @var string\n
     */\n
    protected $_mockery_name = null;\n
\n
    /**\n
     * Order number of allocation\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_allocatedOrder = 0;\n
\n
    /**\n
     * Current ordered number\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_currentOrder = 0;\n
\n
    /**\n
     * Ordered groups\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_groups = array();\n
\n
    /**\n
     * Mock container containing this mock object\n
     *\n
     * @var \Mockery\Container\n
     */\n
    protected $_mockery_container = null;\n
\n
    /**\n
     * Instance of a core object on which methods are called in the event\n
     * it has been set, and an expectation for one of the object's methods\n
     * does not exist. This implements a simple partial mock proxy system.\n
     *\n
     * @var object\n
     */\n
    protected $_mockery_partial = null;\n
\n
    /**\n
     * Flag to indicate we should ignore all expectations temporarily. Used\n
     * mainly to prevent expectation matching when in the middle of a mock\n
     * object recording session.\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_disableExpectationMatching = false;\n
\n
    /**\n
     * Stores all stubbed public methods separate from any on-object public\n
     * properties that may exist.\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_mockableProperties = array();\n
\n
    /**\n
     * @var array\n
     */\n
    protected $_mockery_mockableMethods = array();\n
\n
    /**\n
     * Just a local cache for this mock's target's methods\n
     *\n
     * @var \ReflectionMethod[]\n
     */\n
    protected static $_mockery_methods;\n
\n
    protected $_mockery_allowMockingProtectedMethods = false;\n
\n
    protected $_mockery_receivedMethodCalls;\n
\n
    /**\n
     * If shouldIgnoreMissing is called, this value will be returned on all calls to missing methods\n
     * @var mixed\n
     */\n
    protected $_mockery_defaultReturnValue = null;\n
\n
    /**\n
     * Tracks internally all the bad method call exceptions that happened during runtime\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_thrownExceptions = [];\n
\n
    protected $_mockery_instanceMock = true;\n
\n
    /**\n
     * We want to avoid constructors since class is copied to Generator.php\n
     * for inclusion on extending class definitions.\n
     *\n
     * @param \Mockery\Container $container\n
     * @param object $partialObject\n
     * @param bool $instanceMock\n
     * @return void\n
     */\n
    public function mockery_init(\Mockery\Container $container = null, $partialObject = null, $instanceMock = true)\n
    {\n
        if (is_null($container)) {\n
            $container = new \Mockery\Container;\n
        }\n
        $this->_mockery_container = $container;\n
        if (!is_null($partialObject)) {\n
            $this->_mockery_partial = $partialObject;\n
        }\n
\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isPublic()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_instanceMock = $instanceMock;\n
    }\n
\n
    /**\n
     * Set expected method calls\n
     *\n
     * @param mixed ...$methodNames one or many methods that are expected to be called in this mock\n
     *\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldReceive");\n
        }\n
\n
        foreach ($methodNames as $method) {\n
            if ("" == $method) {\n
                throw new \InvalidArgumentException("Received empty method name");\n
            }\n
        }\n
\n
        $self = $this;\n
        $allowMockingProtectedMethods = $this->_mockery_allowMockingProtectedMethods;\n
\n
        $lastExpectation = \Mockery::parseShouldReturnArgs(\n
            $this, $methodNames, function ($method) use ($self, $allowMockingProtectedMethods) {\n
                $rm = $self->mockery_getMethod($method);\n
                if ($rm) {\n
                    if ($rm->isPrivate()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a private method");\n
                    }\n
                    if (!$allowMockingProtectedMethods && $rm->isProtected()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a protected method and mocking protected methods is not enabled for the currently used mock object. Use shouldAllowMockingProtectedMethods() to enable mocking of protected methods.");\n
                    }\n
                }\n
\n
                $director = $self->mockery_getExpectationsFor($method);\n
                if (!$director) {\n
                    $director = new \Mockery\ExpectationDirector($method, $self);\n
                    $self->mockery_setExpectationsFor($method, $director);\n
                }\n
                $expectation = new \Mockery\Expectation($self, $method);\n
                $director->addExpectation($expectation);\n
                return $expectation;\n
            }\n
        );\n
        return $lastExpectation;\n
    }\n
\n
    // start method allows\n
    /**\n
     * @param mixed $something  String method name or map of method => return\n
     * @return self|\Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function allows($something = [])\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something);\n
        }\n
\n
        if (empty($something)) {\n
            return $this->shouldReceive();\n
        }\n
\n
        foreach ($something as $method => $returnValue) {\n
            $this->shouldReceive($method)->andReturn($returnValue);\n
        }\n
\n
        return $this;\n
    }\n
    // end method allows\n
\n
    // start method expects\n
    /**\n
    /**\n
     * @param mixed $something  String method name (optional)\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|ExpectsHigherOrderMessage\n
     */\n
    public function expects($something = null)\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something)->once();\n
        }\n
\n
        return new ExpectsHigherOrderMessage($this);\n
    }\n
    // end method expects\n
\n
    /**\n
     * Shortcut method for setting an expectation that a method should not be called.\n
     *\n
     * @param array ...$methodNames one or many methods that are expected not to be called in this mock\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldNotReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldNotReceive");\n
        }\n
\n
        $expectation = call_user_func_array(array($this, 'shouldReceive'), $methodNames);\n
        $expectation->never();\n
        return $expectation;\n
    }\n
\n
    /**\n
     * Allows additional methods to be mocked that do not explicitly exist on mocked class\n
     * @param String $method name of the method to be mocked\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingMethod($method)\n
    {\n
        $this->_mockery_mockableMethods[] = $method;\n
        return $this;\n
    }\n
\n
    /**\n
     * Set mock to ignore unexpected methods and return Undefined class\n
     * @param mixed $returnValue the default return value for calls to missing functions on this mock\n
     * @return Mock\n
     */\n
    public function shouldIgnoreMissing($returnValue = null)\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = $returnValue;\n
        return $this;\n
    }\n
\n
    public function asUndefined()\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = new \Mockery\Undefined;\n
        return $this;\n
    }\n
\n
    /**\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingProtectedMethods()\n
    {\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isProtected()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_allowMockingProtectedMethods = true;\n
        return $this;\n
    }\n
\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * This is particularly useless for this class, as it doesn't have a parent,\n
     * but included for completeness\n
     *\n
     * @deprecated 2.0.0 Please use makePartial() instead\n
     *\n
     * @return Mock\n
     */\n
    public function shouldDeferMissing()\n
    {\n
        return $this->makePartial();\n
    }\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * It was an alias for shouldDeferMissing(), which will be removed\n
     * in 2.0.0.\n
     *\n
     * @return Mock\n
     */\n
    public function makePartial()\n
    {\n
        $this->_mockery_deferMissing = true;\n
        return $this;\n
    }\n
\n
    /**\n
     * In the event shouldReceive() accepting one or more methods/returns,\n
     * this method will switch them from normal expectations to default\n
     * expectations\n
     *\n
     * @return self\n
     */\n
    public function byDefault()\n
    {\n
        foreach ($this->_mockery_expectations as $director) {\n
            $exps = $director->getExpectations();\n
            foreach ($exps as $exp) {\n
                $exp->byDefault();\n
            }\n
        }\n
        return $this;\n
    }\n
\n
    /**\n
     * Capture calls to this mock\n
     */\n
    public function __call($method, array $args)\n
    {\n
        return $this->_mockery_handleMethodCall($method, $args);\n
    }\n
\n
    public static function __callStatic($method, array $args)\n
    {\n
        return self::_mockery_handleStaticMethodCall($method, $args);\n
    }\n
\n
    /**\n
     * Forward calls to this magic method to the __call method\n
     */\n
    public function __toString()\n
    {\n
        return $this->__call('__toString', array());\n
    }\n
\n
    /**\n
     * Iterate across all expectation directors and validate each\n
     *\n
     * @throws \Mockery\CountValidator\Exception\n
     * @return void\n
     */\n
    public function mockery_verify()\n
    {\n
        if ($this->_mockery_verified) {\n
            return;\n
        }\n
        if (isset($this->_mockery_ignoreVerification)\n
            && $this->_mockery_ignoreVerification == true) {\n
            return;\n
        }\n
        $this->_mockery_verified = true;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $director->verify();\n
        }\n
    }\n
\n
    /**\n
     * Gets a list of exceptions thrown by this mock\n
     *\n
     * @return array\n
     */\n
    public function mockery_thrownExceptions()\n
    {\n
        return $this->_mockery_thrownExceptions;\n
    }\n
\n
    /**\n
     * Tear down tasks for this mock\n
     *\n
     * @return void\n
     */\n
    public function mockery_teardown()\n
    {\n
    }\n
\n
    /**\n
     * Fetch the next available allocation order number\n
     *\n
     * @return int\n
     */\n
    public function mockery_allocateOrder()\n
    {\n
        $this->_mockery_allocatedOrder += 1;\n
        return $this->_mockery_allocatedOrder;\n
    }\n
\n
    /**\n
     * Set ordering for a group\n
     *\n
     * @param mixed $group\n
     * @param int $order\n
     */\n
    public function mockery_setGroup($group, $order)\n
    {\n
        $this->_mockery_groups[$group] = $order;\n
    }\n
\n
    /**\n
     * Fetch array of ordered groups\n
     *\n
     * @return array\n
     */\n
    public function mockery_getGroups()\n
    {\n
        return $this->_mockery_groups;\n
    }\n
\n
    /**\n
     * Set current ordered number\n
     *\n
     * @param int $order\n
     */\n
    public function mockery_setCurrentOrder($order)\n
    {\n
        $this->_mockery_currentOrder = $order;\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Get current ordered number\n
     *\n
     * @return int\n
     */\n
    public function mockery_getCurrentOrder()\n
    {\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Validate the current mock's ordering\n
     *\n
     * @param string $method\n
     * @param int $order\n
     * @throws \Mockery\Exception\n
     * @return void\n
     */\n
    public function mockery_validateOrder($method, $order)\n
    {\n
        if ($order < $this->_mockery_currentOrder) {\n
            $exception = new \Mockery\Exception\InvalidOrderException(\n
                'Method ' . __CLASS__ . '::' . $method . '()'\n
                . ' called out of order: expected order '\n
                . $order . ', was ' . $this->_mockery_currentOrder\n
            );\n
            $exception->setMock($this)\n
                ->setMethodName($method)\n
                ->setExpectedOrder($order)\n
                ->setActualOrder($this->_mockery_currentOrder);\n
            throw $exception;\n
        }\n
        $this->mockery_setCurrentOrder($order);\n
    }\n
\n
    /**\n
     * Gets the count of expectations for this mock\n
     *\n
     * @return int\n
     */\n
    public function mockery_getExpectationCount()\n
    {\n
        $count = $this->_mockery_expectations_count;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $count += $director->getExpectationCount();\n
        }\n
        return $count;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_setExpectationsFor($method, \Mockery\ExpectationDirector $director)\n
    {\n
        $this->_mockery_expectations[$method] = $director;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_getExpectationsFor($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
    }\n
\n
    /**\n
     * Find an expectation matching the given method and arguments\n
     *\n
     * @var string $method\n
     * @var array $args\n
     * @return \Mockery\Expectation|null\n
     */\n
    public function mockery_findExpectation($method, array $args)\n
    {\n
        if (!isset($this->_mockery_expectations[$method])) {\n
            return null;\n
        }\n
        $director = $this->_mockery_expectations[$method];\n
\n
        return $director->findExpectation($args);\n
    }\n
\n
    /**\n
     * Return the container for this mock\n
     *\n
     * @return \Mockery\Container\n
     */\n
    public function mockery_getContainer()\n
    {\n
        return $this->_mockery_container;\n
    }\n
\n
    /**\n
     * Return the name for this mock\n
     *\n
     * @return string\n
     */\n
    public function mockery_getName()\n
    {\n
        return __CLASS__;\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    public function mockery_getMockableProperties()\n
    {\n
        return $this->_mockery_mockableProperties;\n
    }\n
\n
    public function __isset($name)\n
    {\n
        if (false === stripos($name, '_mockery_') && method_exists(get_parent_class($this), '__isset')) {\n
            return call_user_func('parent::__isset', $name);\n
        }\n
\n
        return false;\n
    }\n
\n
    public function mockery_getExpectations()\n
    {\n
        return $this->_mockery_expectations;\n
    }\n
\n
    /**\n
     * Calls a parent class method and returns the result. Used in a passthru\n
     * expectation where a real return value is required while still taking\n
     * advantage of expectation matching and call count verification.\n
     *\n
     * @param string $name\n
     * @param array $args\n
     * @return mixed\n
     */\n
    public function mockery_callSubjectMethod($name, array $args)\n
    {\n
        if (!method_exists($this, $name) && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $name, $args);\n
        }\n
        return call_user_func_array('parent::' . $name, $args);\n
    }\n
\n
    /**\n
     * @return string[]\n
     */\n
    public function mockery_getMockableMethods()\n
    {\n
        return $this->_mockery_mockableMethods;\n
    }\n
\n
    /**\n
     * @return bool\n
     */\n
    public function mockery_isAnonymous()\n
    {\n
        $rfc = new \ReflectionClass($this);\n
\n
        // HHVM has a Stringish interface\n
        $interfaces = array_filter($rfc->getInterfaces(), function ($i) {\n
            return $i->getName() !== "Stringish";\n
        });\n
        $onlyImplementsMock = 2 == count($interfaces);\n
\n
        return (false === $rfc->getParentClass()) && $onlyImplementsMock;\n
    }\n
\n
    public function mockery_isInstance()\n
    {\n
        return $this->_mockery_instanceMock;\n
    }\n
\n
    public function __wakeup()\n
    {\n
        /**\n
         * This does not add __wakeup method support. It's a blind method and any\n
         * expected __wakeup work will NOT be performed. It merely cuts off\n
         * annoying errors where a __wakeup exists but is not essential when\n
         * mocking\n
         */\n
    }\n
\n
    public function __destruct()\n
    {\n
        /**\n
         * Overrides real class destructor in case if class was created without original constructor\n
         */\n
    }\n
\n
    public function mockery_getMethod($name)\n
    {\n
        foreach ($this->mockery_getMethods() as $method) {\n
            if ($method->getName() == $name) {\n
                return $method;\n
            }\n
        }\n
\n
        return null;\n
    }\n
\n
    /**\n
     * @param string $name Method name.\n
     *\n
     * @return mixed Generated return value based on the declared return value of the named method.\n
     */\n
    public function mockery_returnValueForMethod($name)\n
    {\n
        if (version_compare(PHP_VERSION, '7.0.0-dev') < 0) {\n
            return;\n
        }\n
\n
        $rm = $this->mockery_getMethod($name);\n
        if (!$rm || !$rm->hasReturnType()) {\n
            return;\n
        }\n
\n
        $returnType = $rm->getReturnType();\n
\n
        // Default return value for methods with nullable type is null\n
        if ($returnType->allowsNull()) {\n
            return null;\n
        }\n
\n
        $type = PHP_VERSION_ID >= 70100 ? $returnType->getName() : (string) $returnType;\n
        switch ($type) {\n
            case '':       return;\n
            case 'string': return '';\n
            case 'int':    return 0;\n
            case 'float':  return 0.0;\n
            case 'bool':   return false;\n
            case 'array':  return [];\n
\n
            case 'callable':\n
            case 'Closure':\n
                return function () {\n
                };\n
\n
            case 'Traversable':\n
            case 'Generator':\n
                // Remove eval() when minimum version >=5.5\n
                $generator = eval('return function () { yield; };');\n
                return $generator();\n
\n
            case 'self':\n
                return \Mockery::mock($rm->getDeclaringClass()->getName());\n
\n
            case 'void':\n
                return null;\n
\n
            case 'object':\n
                if (version_compare(PHP_VERSION, '7.2.0-dev') >= 0) {\n
                    return \Mockery::mock();\n
                }\n
\n
            default:\n
                return \Mockery::mock($type);\n
        }\n
    }\n
\n
    public function shouldHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->atLeast()->once();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return $director;\n
    }\n
\n
    public function shouldHaveBeenCalled()\n
    {\n
        return $this->shouldHaveReceived("__invoke");\n
    }\n
\n
    public function shouldNotHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldNotHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->never();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return null;\n
    }\n
\n
    public function shouldNotHaveBeenCalled(array $args = null)\n
    {\n
        return $this->shouldNotHaveReceived("__invoke", $args);\n
    }\n
\n
    protected static function _mockery_handleStaticMethodCall($method, array $args)\n
    {\n
        $associatedRealObject = \Mockery::fetchMock(__CLASS__);\n
        try {\n
            return $associatedRealObject->__call($method, $args);\n
        } catch (BadMethodCallException $e) {\n
            throw new BadMethodCallException(\n
                'Static method ' . $associatedRealObject->mockery_getName() . '::' . $method\n
                . '() does not exist on this mock object',\n
                null,\n
                $e\n
            );\n
        }\n
    }\n
\n
    protected function _mockery_getReceivedMethodCalls()\n
    {\n
        return $this->_mockery_receivedMethodCalls ?: $this->_mockery_receivedMethodCalls = new \Mockery\ReceivedMethodCalls();\n
    }\n
\n
    /**\n
     * Called when an instance Mock was created and its constructor is getting called\n
     *\n
     * @see \Mockery\Generator\StringManipulation\Pass\InstanceMockPass\n
     * @param array $args\n
     */\n
    protected function _mockery_constructorCalled(array $args)\n
    {\n
        if (!isset($this->_mockery_expectations['__construct']) /* _mockery_handleMethodCall runs the other checks */) {\n
            return;\n
        }\n
        $this->_mockery_handleMethodCall('__construct', $args);\n
    }\n
\n
    protected function _mockery_findExpectedMethodHandler($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
\n
        $lowerCasedMockeryExpectations = array_change_key_case($this->_mockery_expectations, CASE_LOWER);\n
        $lowerCasedMethod = strtolower($method);\n
\n
        if (isset($lowerCasedMockeryExpectations[$lowerCasedMethod])) {\n
            return $lowerCasedMockeryExpectations[$lowerCasedMethod];\n
        }\n
\n
        return null;\n
    }\n
\n
    protected function _mockery_handleMethodCall($method, array $args)\n
    {\n
        $this->_mockery_getReceivedMethodCalls()->push(new \Mockery\MethodCall($method, $args));\n
\n
        $rm = $this->mockery_getMethod($method);\n
        if ($rm && $rm->isProtected() && !$this->_mockery_allowMockingProtectedMethods) {\n
            if ($rm->isAbstract()) {\n
                return;\n
            }\n
\n
            try {\n
                $prototype = $rm->getPrototype();\n
                if ($prototype->isAbstract()) {\n
                    return;\n
                }\n
            } catch (\ReflectionException $re) {\n
                // noop - there is no hasPrototype method\n
            }\n
\n
            return call_user_func_array("parent::$method", $args);\n
        }\n
\n
        $handler = $this->_mockery_findExpectedMethodHandler($method);\n
\n
        if ($handler !== null && !$this->_mockery_disableExpectationMatching) {\n
            try {\n
                return $handler->call($args);\n
            } catch (\Mockery\Exception\NoMatchingExpectationException $e) {\n
                if (!$this->_mockery_ignoreMissing && !$this->_mockery_deferMissing) {\n
                    throw $e;\n
                }\n
            }\n
        }\n
\n
        if (!is_null($this->_mockery_partial) &&\n
            (method_exists($this->_mockery_partial, $method) || method_exists($this->_mockery_partial, '__call'))\n
        ) {\n
            return call_user_func_array(array($this->_mockery_partial, $method), $args);\n
        } elseif ($this->_mockery_deferMissing && is_callable("parent::$method")\n
            && (!$this->hasMethodOverloadingInParentClass() || method_exists(get_parent_class($this), $method))) {\n
            return call_user_func_array("parent::$method", $args);\n
        } elseif ($this->_mockery_deferMissing && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $method, $args);\n
        } elseif ($method == '__toString') {\n
            // __toString is special because we force its addition to the class API regardless of the\n
            // original implementation.  Thus, we should always return a string rather than honor\n
            // _mockery_ignoreMissing and break the API with an error.\n
            return sprintf("%s#%s", __CLASS__, spl_object_hash($this));\n
        } elseif ($this->_mockery_ignoreMissing) {\n
            if (\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed() || (method_exists($this->_mockery_partial, $method) || is_callable("parent::$method"))) {\n
                if ($this->_mockery_defaultReturnValue instanceof \Mockery\Undefined) {\n
                    return call_user_func_array(array($this->_mockery_defaultReturnValue, $method), $args);\n
                } elseif (null === $this->_mockery_defaultReturnValue) {\n
                    return $this->mockery_returnValueForMethod($method);\n
                }\n
\n
                return $this->_mockery_defaultReturnValue;\n
            }\n
        }\n
\n
        $message = 'Method ' . __CLASS__ . '::' . $method .\n
            '() does not exist on this mock object';\n
\n
        if (!is_null($rm)) {\n
            $message = 'Received ' . __CLASS__ .\n
                '::' . $method . '(), but no expectations were specified';\n
        }\n
\n
        $bmce = new BadMethodCallException($message);\n
        $this->_mockery_thrownExceptions[] = $bmce;\n
        throw $bmce;\n
    }\n
\n
    /**\n
     * Uses reflection to get the list of all\n
     * methods within the current mock object\n
     *\n
     * @return array\n
     */\n
    protected function mockery_getMethods()\n
    {\n
        if (static::$_mockery_methods && \Mockery::getConfiguration()->reflectionCacheEnabled()) {\n
            return static::$_mockery_methods;\n
        }\n
\n
        if (isset($this->_mockery_partial)) {\n
            $reflected = new \ReflectionObject($this->_mockery_partial);\n
        } else {\n
            $reflected = new \ReflectionClass($this);\n
        }\n
\n
        return static::$_mockery_methods = $reflected->getMethods();\n
    }\n
\n
    private function hasMethodOverloadingInParentClass()\n
    {\n
        // if there's __call any name would be callable\n
        return is_callable('parent::aFunctionNameThatNoOneWouldEverUseInRealLife12345');\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    private function getNonPublicMethods()\n
    {\n
        return array_map(\n
            function ($method) {\n
                return $method->getName();\n
            },\n
            array_filter($this->mockery_getMethods(), function ($method) {\n
                return !$method->isPublic();\n
            })\n
        );\n
    }\n
public function __construct(float $value, string $currencyCode){\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function value(): float{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function currencyCode(): string{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function toArray(): array{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    }\n
'
                                        )
                                        '37e8aa6b2a30767ba6a51c1ba6f4b219' => Mockery\Generator\MockDefinition Object &0000000021e1fc21000000005777935d (
                                            'config' => Mockery\Generator\MockConfiguration Object &0000000021e1ffc6000000005777935d (
                                                'targetClass' => Mockery\Generator\DefinedTargetClass Object &0000000021e1fc37000000005777935d (
                                                    'rfc' => ReflectionClass Object &0000000021e1fc36000000005777935d (
                                                        'name' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Item'
                                                    )
                                                )
                                                'targetClassName' => '\Inpsyde\PayPalCommerce\ApiClient\Entity\Item'
                                                'targetInterfaces' => Array &2105 ()
                                                'targetInterfaceNames' => Array &2106 ()
                                                'targetTraits' => Array &2107 ()
                                                'targetTraitNames' => Array &2108 ()
                                                'targetObject' => null
                                                'name' => 'Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item'
                                                'blackListedMethods' => Array &2109 (
                                                    0 => '__call'
                                                    1 => '__callStatic'
                                                    2 => '__clone'
                                                    3 => '__wakeup'
                                                    4 => '__set'
                                                    5 => '__get'
                                                    6 => '__toString'
                                                    7 => '__isset'
                                                    8 => '__destruct'
                                                    9 => '__debugInfo'
                                                    10 => '__halt_compiler'
                                                    30 => 'empty'
                                                    37 => 'eval'
                                                    53 => 'isset'
                                                    70 => 'unset'
                                                )
                                                'whiteListedMethods' => Array &2110 ()
                                                'instanceMock' => false
                                                'parameterOverrides' => Array &2111 ()
                                                'allMethods' => Array &2112 (
                                                    0 => Mockery\Generator\Method Object &0000000021e1fc2b000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fc34000000005777935d (
                                                            'name' => '__construct'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Item'
                                                        )
                                                    )
                                                    1 => Mockery\Generator\Method Object &0000000021e1fc2a000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fc33000000005777935d (
                                                            'name' => 'name'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Item'
                                                        )
                                                    )
                                                    2 => Mockery\Generator\Method Object &0000000021e1fc29000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fc32000000005777935d (
                                                            'name' => 'unitAmount'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Item'
                                                        )
                                                    )
                                                    3 => Mockery\Generator\Method Object &0000000021e1fc28000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fc31000000005777935d (
                                                            'name' => 'quantity'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Item'
                                                        )
                                                    )
                                                    4 => Mockery\Generator\Method Object &0000000021e1fc27000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fc30000000005777935d (
                                                            'name' => 'description'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Item'
                                                        )
                                                    )
                                                    5 => Mockery\Generator\Method Object &0000000021e1fc26000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fc2f000000005777935d (
                                                            'name' => 'tax'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Item'
                                                        )
                                                    )
                                                    6 => Mockery\Generator\Method Object &0000000021e1fc25000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fc2e000000005777935d (
                                                            'name' => 'sku'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Item'
                                                        )
                                                    )
                                                    7 => Mockery\Generator\Method Object &0000000021e1fc24000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fc2d000000005777935d (
                                                            'name' => 'category'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Item'
                                                        )
                                                    )
                                                    8 => Mockery\Generator\Method Object &0000000021e1fc23000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fc2c000000005777935d (
                                                            'name' => 'toArray'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Item'
                                                        )
                                                    )
                                                )
                                                'mockOriginalDestructor' => true
                                                'constantsMap' => Array &2113 ()
                                            )
                                            'code' => '<?php\n
/**\n
 * Mockery\n
 *\n
 * LICENSE\n
 *\n
 * This source file is subject to the new BSD license that is bundled\n
 * with this package in the file LICENSE.txt.\n
 * It is also available through the world-wide-web at this URL:\n
 * http://github.com/padraic/mockery/blob/master/LICENSE\n
 * If you did not receive a copy of the license and are unable to\n
 * obtain it through the world-wide-web, please send an email\n
 * to padraic@php.net so we can send you a copy immediately.\n
 *\n
 * @category   Mockery\n
 * @package    Mockery\n
 * @copyright  Copyright (c) 2010 Pádraic Brady (http://blog.astrumfutura.com)\n
 * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License\n
 */\n
\n
\n
\n
use Mockery\HigherOrderMessage;\n
use Mockery\MockInterface;\n
use Mockery\LegacyMockInterface;\n
use Mockery\ExpectsHigherOrderMessage;\n
use Mockery\Exception\BadMethodCallException;\n
\n
class Mockery_1_Inpsyde_PayPalCommerce_ApiClient_Entity_Item extends \Inpsyde\PayPalCommerce\ApiClient\Entity\Item implements MockInterface\n
{\n
    /**\n
     * Stores an array of all expectation directors for this mock\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_expectations = array();\n
\n
    /**\n
     * Stores an inital number of expectations that can be manipulated\n
     * while using the getter method.\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_expectations_count = 0;\n
\n
    /**\n
     * Flag to indicate whether we can ignore method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_ignoreMissing = false;\n
\n
    /**\n
     * Flag to indicate whether we can defer method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_deferMissing = false;\n
\n
    /**\n
     * Flag to indicate whether this mock was verified\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_verified = false;\n
\n
    /**\n
     * Given name of the mock\n
     *\n
     * @var string\n
     */\n
    protected $_mockery_name = null;\n
\n
    /**\n
     * Order number of allocation\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_allocatedOrder = 0;\n
\n
    /**\n
     * Current ordered number\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_currentOrder = 0;\n
\n
    /**\n
     * Ordered groups\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_groups = array();\n
\n
    /**\n
     * Mock container containing this mock object\n
     *\n
     * @var \Mockery\Container\n
     */\n
    protected $_mockery_container = null;\n
\n
    /**\n
     * Instance of a core object on which methods are called in the event\n
     * it has been set, and an expectation for one of the object's methods\n
     * does not exist. This implements a simple partial mock proxy system.\n
     *\n
     * @var object\n
     */\n
    protected $_mockery_partial = null;\n
\n
    /**\n
     * Flag to indicate we should ignore all expectations temporarily. Used\n
     * mainly to prevent expectation matching when in the middle of a mock\n
     * object recording session.\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_disableExpectationMatching = false;\n
\n
    /**\n
     * Stores all stubbed public methods separate from any on-object public\n
     * properties that may exist.\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_mockableProperties = array();\n
\n
    /**\n
     * @var array\n
     */\n
    protected $_mockery_mockableMethods = array();\n
\n
    /**\n
     * Just a local cache for this mock's target's methods\n
     *\n
     * @var \ReflectionMethod[]\n
     */\n
    protected static $_mockery_methods;\n
\n
    protected $_mockery_allowMockingProtectedMethods = false;\n
\n
    protected $_mockery_receivedMethodCalls;\n
\n
    /**\n
     * If shouldIgnoreMissing is called, this value will be returned on all calls to missing methods\n
     * @var mixed\n
     */\n
    protected $_mockery_defaultReturnValue = null;\n
\n
    /**\n
     * Tracks internally all the bad method call exceptions that happened during runtime\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_thrownExceptions = [];\n
\n
    protected $_mockery_instanceMock = true;\n
\n
    /**\n
     * We want to avoid constructors since class is copied to Generator.php\n
     * for inclusion on extending class definitions.\n
     *\n
     * @param \Mockery\Container $container\n
     * @param object $partialObject\n
     * @param bool $instanceMock\n
     * @return void\n
     */\n
    public function mockery_init(\Mockery\Container $container = null, $partialObject = null, $instanceMock = true)\n
    {\n
        if (is_null($container)) {\n
            $container = new \Mockery\Container;\n
        }\n
        $this->_mockery_container = $container;\n
        if (!is_null($partialObject)) {\n
            $this->_mockery_partial = $partialObject;\n
        }\n
\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isPublic()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_instanceMock = $instanceMock;\n
    }\n
\n
    /**\n
     * Set expected method calls\n
     *\n
     * @param mixed ...$methodNames one or many methods that are expected to be called in this mock\n
     *\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldReceive");\n
        }\n
\n
        foreach ($methodNames as $method) {\n
            if ("" == $method) {\n
                throw new \InvalidArgumentException("Received empty method name");\n
            }\n
        }\n
\n
        $self = $this;\n
        $allowMockingProtectedMethods = $this->_mockery_allowMockingProtectedMethods;\n
\n
        $lastExpectation = \Mockery::parseShouldReturnArgs(\n
            $this, $methodNames, function ($method) use ($self, $allowMockingProtectedMethods) {\n
                $rm = $self->mockery_getMethod($method);\n
                if ($rm) {\n
                    if ($rm->isPrivate()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a private method");\n
                    }\n
                    if (!$allowMockingProtectedMethods && $rm->isProtected()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a protected method and mocking protected methods is not enabled for the currently used mock object. Use shouldAllowMockingProtectedMethods() to enable mocking of protected methods.");\n
                    }\n
                }\n
\n
                $director = $self->mockery_getExpectationsFor($method);\n
                if (!$director) {\n
                    $director = new \Mockery\ExpectationDirector($method, $self);\n
                    $self->mockery_setExpectationsFor($method, $director);\n
                }\n
                $expectation = new \Mockery\Expectation($self, $method);\n
                $director->addExpectation($expectation);\n
                return $expectation;\n
            }\n
        );\n
        return $lastExpectation;\n
    }\n
\n
    // start method allows\n
    /**\n
     * @param mixed $something  String method name or map of method => return\n
     * @return self|\Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function allows($something = [])\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something);\n
        }\n
\n
        if (empty($something)) {\n
            return $this->shouldReceive();\n
        }\n
\n
        foreach ($something as $method => $returnValue) {\n
            $this->shouldReceive($method)->andReturn($returnValue);\n
        }\n
\n
        return $this;\n
    }\n
    // end method allows\n
\n
    // start method expects\n
    /**\n
    /**\n
     * @param mixed $something  String method name (optional)\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|ExpectsHigherOrderMessage\n
     */\n
    public function expects($something = null)\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something)->once();\n
        }\n
\n
        return new ExpectsHigherOrderMessage($this);\n
    }\n
    // end method expects\n
\n
    /**\n
     * Shortcut method for setting an expectation that a method should not be called.\n
     *\n
     * @param array ...$methodNames one or many methods that are expected not to be called in this mock\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldNotReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldNotReceive");\n
        }\n
\n
        $expectation = call_user_func_array(array($this, 'shouldReceive'), $methodNames);\n
        $expectation->never();\n
        return $expectation;\n
    }\n
\n
    /**\n
     * Allows additional methods to be mocked that do not explicitly exist on mocked class\n
     * @param String $method name of the method to be mocked\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingMethod($method)\n
    {\n
        $this->_mockery_mockableMethods[] = $method;\n
        return $this;\n
    }\n
\n
    /**\n
     * Set mock to ignore unexpected methods and return Undefined class\n
     * @param mixed $returnValue the default return value for calls to missing functions on this mock\n
     * @return Mock\n
     */\n
    public function shouldIgnoreMissing($returnValue = null)\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = $returnValue;\n
        return $this;\n
    }\n
\n
    public function asUndefined()\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = new \Mockery\Undefined;\n
        return $this;\n
    }\n
\n
    /**\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingProtectedMethods()\n
    {\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isProtected()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_allowMockingProtectedMethods = true;\n
        return $this;\n
    }\n
\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * This is particularly useless for this class, as it doesn't have a parent,\n
     * but included for completeness\n
     *\n
     * @deprecated 2.0.0 Please use makePartial() instead\n
     *\n
     * @return Mock\n
     */\n
    public function shouldDeferMissing()\n
    {\n
        return $this->makePartial();\n
    }\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * It was an alias for shouldDeferMissing(), which will be removed\n
     * in 2.0.0.\n
     *\n
     * @return Mock\n
     */\n
    public function makePartial()\n
    {\n
        $this->_mockery_deferMissing = true;\n
        return $this;\n
    }\n
\n
    /**\n
     * In the event shouldReceive() accepting one or more methods/returns,\n
     * this method will switch them from normal expectations to default\n
     * expectations\n
     *\n
     * @return self\n
     */\n
    public function byDefault()\n
    {\n
        foreach ($this->_mockery_expectations as $director) {\n
            $exps = $director->getExpectations();\n
            foreach ($exps as $exp) {\n
                $exp->byDefault();\n
            }\n
        }\n
        return $this;\n
    }\n
\n
    /**\n
     * Capture calls to this mock\n
     */\n
    public function __call($method, array $args)\n
    {\n
        return $this->_mockery_handleMethodCall($method, $args);\n
    }\n
\n
    public static function __callStatic($method, array $args)\n
    {\n
        return self::_mockery_handleStaticMethodCall($method, $args);\n
    }\n
\n
    /**\n
     * Forward calls to this magic method to the __call method\n
     */\n
    public function __toString()\n
    {\n
        return $this->__call('__toString', array());\n
    }\n
\n
    /**\n
     * Iterate across all expectation directors and validate each\n
     *\n
     * @throws \Mockery\CountValidator\Exception\n
     * @return void\n
     */\n
    public function mockery_verify()\n
    {\n
        if ($this->_mockery_verified) {\n
            return;\n
        }\n
        if (isset($this->_mockery_ignoreVerification)\n
            && $this->_mockery_ignoreVerification == true) {\n
            return;\n
        }\n
        $this->_mockery_verified = true;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $director->verify();\n
        }\n
    }\n
\n
    /**\n
     * Gets a list of exceptions thrown by this mock\n
     *\n
     * @return array\n
     */\n
    public function mockery_thrownExceptions()\n
    {\n
        return $this->_mockery_thrownExceptions;\n
    }\n
\n
    /**\n
     * Tear down tasks for this mock\n
     *\n
     * @return void\n
     */\n
    public function mockery_teardown()\n
    {\n
    }\n
\n
    /**\n
     * Fetch the next available allocation order number\n
     *\n
     * @return int\n
     */\n
    public function mockery_allocateOrder()\n
    {\n
        $this->_mockery_allocatedOrder += 1;\n
        return $this->_mockery_allocatedOrder;\n
    }\n
\n
    /**\n
     * Set ordering for a group\n
     *\n
     * @param mixed $group\n
     * @param int $order\n
     */\n
    public function mockery_setGroup($group, $order)\n
    {\n
        $this->_mockery_groups[$group] = $order;\n
    }\n
\n
    /**\n
     * Fetch array of ordered groups\n
     *\n
     * @return array\n
     */\n
    public function mockery_getGroups()\n
    {\n
        return $this->_mockery_groups;\n
    }\n
\n
    /**\n
     * Set current ordered number\n
     *\n
     * @param int $order\n
     */\n
    public function mockery_setCurrentOrder($order)\n
    {\n
        $this->_mockery_currentOrder = $order;\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Get current ordered number\n
     *\n
     * @return int\n
     */\n
    public function mockery_getCurrentOrder()\n
    {\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Validate the current mock's ordering\n
     *\n
     * @param string $method\n
     * @param int $order\n
     * @throws \Mockery\Exception\n
     * @return void\n
     */\n
    public function mockery_validateOrder($method, $order)\n
    {\n
        if ($order < $this->_mockery_currentOrder) {\n
            $exception = new \Mockery\Exception\InvalidOrderException(\n
                'Method ' . __CLASS__ . '::' . $method . '()'\n
                . ' called out of order: expected order '\n
                . $order . ', was ' . $this->_mockery_currentOrder\n
            );\n
            $exception->setMock($this)\n
                ->setMethodName($method)\n
                ->setExpectedOrder($order)\n
                ->setActualOrder($this->_mockery_currentOrder);\n
            throw $exception;\n
        }\n
        $this->mockery_setCurrentOrder($order);\n
    }\n
\n
    /**\n
     * Gets the count of expectations for this mock\n
     *\n
     * @return int\n
     */\n
    public function mockery_getExpectationCount()\n
    {\n
        $count = $this->_mockery_expectations_count;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $count += $director->getExpectationCount();\n
        }\n
        return $count;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_setExpectationsFor($method, \Mockery\ExpectationDirector $director)\n
    {\n
        $this->_mockery_expectations[$method] = $director;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_getExpectationsFor($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
    }\n
\n
    /**\n
     * Find an expectation matching the given method and arguments\n
     *\n
     * @var string $method\n
     * @var array $args\n
     * @return \Mockery\Expectation|null\n
     */\n
    public function mockery_findExpectation($method, array $args)\n
    {\n
        if (!isset($this->_mockery_expectations[$method])) {\n
            return null;\n
        }\n
        $director = $this->_mockery_expectations[$method];\n
\n
        return $director->findExpectation($args);\n
    }\n
\n
    /**\n
     * Return the container for this mock\n
     *\n
     * @return \Mockery\Container\n
     */\n
    public function mockery_getContainer()\n
    {\n
        return $this->_mockery_container;\n
    }\n
\n
    /**\n
     * Return the name for this mock\n
     *\n
     * @return string\n
     */\n
    public function mockery_getName()\n
    {\n
        return __CLASS__;\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    public function mockery_getMockableProperties()\n
    {\n
        return $this->_mockery_mockableProperties;\n
    }\n
\n
    public function __isset($name)\n
    {\n
        if (false === stripos($name, '_mockery_') && method_exists(get_parent_class($this), '__isset')) {\n
            return call_user_func('parent::__isset', $name);\n
        }\n
\n
        return false;\n
    }\n
\n
    public function mockery_getExpectations()\n
    {\n
        return $this->_mockery_expectations;\n
    }\n
\n
    /**\n
     * Calls a parent class method and returns the result. Used in a passthru\n
     * expectation where a real return value is required while still taking\n
     * advantage of expectation matching and call count verification.\n
     *\n
     * @param string $name\n
     * @param array $args\n
     * @return mixed\n
     */\n
    public function mockery_callSubjectMethod($name, array $args)\n
    {\n
        if (!method_exists($this, $name) && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $name, $args);\n
        }\n
        return call_user_func_array('parent::' . $name, $args);\n
    }\n
\n
    /**\n
     * @return string[]\n
     */\n
    public function mockery_getMockableMethods()\n
    {\n
        return $this->_mockery_mockableMethods;\n
    }\n
\n
    /**\n
     * @return bool\n
     */\n
    public function mockery_isAnonymous()\n
    {\n
        $rfc = new \ReflectionClass($this);\n
\n
        // HHVM has a Stringish interface\n
        $interfaces = array_filter($rfc->getInterfaces(), function ($i) {\n
            return $i->getName() !== "Stringish";\n
        });\n
        $onlyImplementsMock = 2 == count($interfaces);\n
\n
        return (false === $rfc->getParentClass()) && $onlyImplementsMock;\n
    }\n
\n
    public function mockery_isInstance()\n
    {\n
        return $this->_mockery_instanceMock;\n
    }\n
\n
    public function __wakeup()\n
    {\n
        /**\n
         * This does not add __wakeup method support. It's a blind method and any\n
         * expected __wakeup work will NOT be performed. It merely cuts off\n
         * annoying errors where a __wakeup exists but is not essential when\n
         * mocking\n
         */\n
    }\n
\n
    public function __destruct()\n
    {\n
        /**\n
         * Overrides real class destructor in case if class was created without original constructor\n
         */\n
    }\n
\n
    public function mockery_getMethod($name)\n
    {\n
        foreach ($this->mockery_getMethods() as $method) {\n
            if ($method->getName() == $name) {\n
                return $method;\n
            }\n
        }\n
\n
        return null;\n
    }\n
\n
    /**\n
     * @param string $name Method name.\n
     *\n
     * @return mixed Generated return value based on the declared return value of the named method.\n
     */\n
    public function mockery_returnValueForMethod($name)\n
    {\n
        if (version_compare(PHP_VERSION, '7.0.0-dev') < 0) {\n
            return;\n
        }\n
\n
        $rm = $this->mockery_getMethod($name);\n
        if (!$rm || !$rm->hasReturnType()) {\n
            return;\n
        }\n
\n
        $returnType = $rm->getReturnType();\n
\n
        // Default return value for methods with nullable type is null\n
        if ($returnType->allowsNull()) {\n
            return null;\n
        }\n
\n
        $type = PHP_VERSION_ID >= 70100 ? $returnType->getName() : (string) $returnType;\n
        switch ($type) {\n
            case '':       return;\n
            case 'string': return '';\n
            case 'int':    return 0;\n
            case 'float':  return 0.0;\n
            case 'bool':   return false;\n
            case 'array':  return [];\n
\n
            case 'callable':\n
            case 'Closure':\n
                return function () {\n
                };\n
\n
            case 'Traversable':\n
            case 'Generator':\n
                // Remove eval() when minimum version >=5.5\n
                $generator = eval('return function () { yield; };');\n
                return $generator();\n
\n
            case 'self':\n
                return \Mockery::mock($rm->getDeclaringClass()->getName());\n
\n
            case 'void':\n
                return null;\n
\n
            case 'object':\n
                if (version_compare(PHP_VERSION, '7.2.0-dev') >= 0) {\n
                    return \Mockery::mock();\n
                }\n
\n
            default:\n
                return \Mockery::mock($type);\n
        }\n
    }\n
\n
    public function shouldHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->atLeast()->once();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return $director;\n
    }\n
\n
    public function shouldHaveBeenCalled()\n
    {\n
        return $this->shouldHaveReceived("__invoke");\n
    }\n
\n
    public function shouldNotHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldNotHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->never();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return null;\n
    }\n
\n
    public function shouldNotHaveBeenCalled(array $args = null)\n
    {\n
        return $this->shouldNotHaveReceived("__invoke", $args);\n
    }\n
\n
    protected static function _mockery_handleStaticMethodCall($method, array $args)\n
    {\n
        $associatedRealObject = \Mockery::fetchMock(__CLASS__);\n
        try {\n
            return $associatedRealObject->__call($method, $args);\n
        } catch (BadMethodCallException $e) {\n
            throw new BadMethodCallException(\n
                'Static method ' . $associatedRealObject->mockery_getName() . '::' . $method\n
                . '() does not exist on this mock object',\n
                null,\n
                $e\n
            );\n
        }\n
    }\n
\n
    protected function _mockery_getReceivedMethodCalls()\n
    {\n
        return $this->_mockery_receivedMethodCalls ?: $this->_mockery_receivedMethodCalls = new \Mockery\ReceivedMethodCalls();\n
    }\n
\n
    /**\n
     * Called when an instance Mock was created and its constructor is getting called\n
     *\n
     * @see \Mockery\Generator\StringManipulation\Pass\InstanceMockPass\n
     * @param array $args\n
     */\n
    protected function _mockery_constructorCalled(array $args)\n
    {\n
        if (!isset($this->_mockery_expectations['__construct']) /* _mockery_handleMethodCall runs the other checks */) {\n
            return;\n
        }\n
        $this->_mockery_handleMethodCall('__construct', $args);\n
    }\n
\n
    protected function _mockery_findExpectedMethodHandler($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
\n
        $lowerCasedMockeryExpectations = array_change_key_case($this->_mockery_expectations, CASE_LOWER);\n
        $lowerCasedMethod = strtolower($method);\n
\n
        if (isset($lowerCasedMockeryExpectations[$lowerCasedMethod])) {\n
            return $lowerCasedMockeryExpectations[$lowerCasedMethod];\n
        }\n
\n
        return null;\n
    }\n
\n
    protected function _mockery_handleMethodCall($method, array $args)\n
    {\n
        $this->_mockery_getReceivedMethodCalls()->push(new \Mockery\MethodCall($method, $args));\n
\n
        $rm = $this->mockery_getMethod($method);\n
        if ($rm && $rm->isProtected() && !$this->_mockery_allowMockingProtectedMethods) {\n
            if ($rm->isAbstract()) {\n
                return;\n
            }\n
\n
            try {\n
                $prototype = $rm->getPrototype();\n
                if ($prototype->isAbstract()) {\n
                    return;\n
                }\n
            } catch (\ReflectionException $re) {\n
                // noop - there is no hasPrototype method\n
            }\n
\n
            return call_user_func_array("parent::$method", $args);\n
        }\n
\n
        $handler = $this->_mockery_findExpectedMethodHandler($method);\n
\n
        if ($handler !== null && !$this->_mockery_disableExpectationMatching) {\n
            try {\n
                return $handler->call($args);\n
            } catch (\Mockery\Exception\NoMatchingExpectationException $e) {\n
                if (!$this->_mockery_ignoreMissing && !$this->_mockery_deferMissing) {\n
                    throw $e;\n
                }\n
            }\n
        }\n
\n
        if (!is_null($this->_mockery_partial) &&\n
            (method_exists($this->_mockery_partial, $method) || method_exists($this->_mockery_partial, '__call'))\n
        ) {\n
            return call_user_func_array(array($this->_mockery_partial, $method), $args);\n
        } elseif ($this->_mockery_deferMissing && is_callable("parent::$method")\n
            && (!$this->hasMethodOverloadingInParentClass() || method_exists(get_parent_class($this), $method))) {\n
            return call_user_func_array("parent::$method", $args);\n
        } elseif ($this->_mockery_deferMissing && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $method, $args);\n
        } elseif ($method == '__toString') {\n
            // __toString is special because we force its addition to the class API regardless of the\n
            // original implementation.  Thus, we should always return a string rather than honor\n
            // _mockery_ignoreMissing and break the API with an error.\n
            return sprintf("%s#%s", __CLASS__, spl_object_hash($this));\n
        } elseif ($this->_mockery_ignoreMissing) {\n
            if (\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed() || (method_exists($this->_mockery_partial, $method) || is_callable("parent::$method"))) {\n
                if ($this->_mockery_defaultReturnValue instanceof \Mockery\Undefined) {\n
                    return call_user_func_array(array($this->_mockery_defaultReturnValue, $method), $args);\n
                } elseif (null === $this->_mockery_defaultReturnValue) {\n
                    return $this->mockery_returnValueForMethod($method);\n
                }\n
\n
                return $this->_mockery_defaultReturnValue;\n
            }\n
        }\n
\n
        $message = 'Method ' . __CLASS__ . '::' . $method .\n
            '() does not exist on this mock object';\n
\n
        if (!is_null($rm)) {\n
            $message = 'Received ' . __CLASS__ .\n
                '::' . $method . '(), but no expectations were specified';\n
        }\n
\n
        $bmce = new BadMethodCallException($message);\n
        $this->_mockery_thrownExceptions[] = $bmce;\n
        throw $bmce;\n
    }\n
\n
    /**\n
     * Uses reflection to get the list of all\n
     * methods within the current mock object\n
     *\n
     * @return array\n
     */\n
    protected function mockery_getMethods()\n
    {\n
        if (static::$_mockery_methods && \Mockery::getConfiguration()->reflectionCacheEnabled()) {\n
            return static::$_mockery_methods;\n
        }\n
\n
        if (isset($this->_mockery_partial)) {\n
            $reflected = new \ReflectionObject($this->_mockery_partial);\n
        } else {\n
            $reflected = new \ReflectionClass($this);\n
        }\n
\n
        return static::$_mockery_methods = $reflected->getMethods();\n
    }\n
\n
    private function hasMethodOverloadingInParentClass()\n
    {\n
        // if there's __call any name would be callable\n
        return is_callable('parent::aFunctionNameThatNoOneWouldEverUseInRealLife12345');\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    private function getNonPublicMethods()\n
    {\n
        return array_map(\n
            function ($method) {\n
                return $method->getName();\n
            },\n
            array_filter($this->mockery_getMethods(), function ($method) {\n
                return !$method->isPublic();\n
            })\n
        );\n
    }\n
public function __construct(string $name, \Inpsyde\PayPalCommerce\ApiClient\Entity\Money $unitAmount, int $quantity, string $description = '', ?\Inpsyde\PayPalCommerce\ApiClient\Entity\Money $tax = NULL, string $sku = '', string $category = 'PHYSICAL_GOODS'){\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function name(): string{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function unitAmount(): \Inpsyde\PayPalCommerce\ApiClient\Entity\Money{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function quantity(): int{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function description(): string{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function tax(): ?\Inpsyde\PayPalCommerce\ApiClient\Entity\Money{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function sku(): string{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function category(): string{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function toArray(): array{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    }\n
'
                                        )
                                        'eeeff8e25215f402f70a4d222f96b758' => Mockery\Generator\MockDefinition Object &0000000021e1fc80000000005777935d (
                                            'config' => Mockery\Generator\MockConfiguration Object &0000000021e1fc38000000005777935d (
                                                'targetClass' => Mockery\Generator\DefinedTargetClass Object &0000000021e1fc96000000005777935d (
                                                    'rfc' => ReflectionClass Object &0000000021e1fc95000000005777935d (
                                                        'name' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\AmountBreakdown'
                                                    )
                                                )
                                                'targetClassName' => '\Inpsyde\PayPalCommerce\ApiClient\Entity\AmountBreakdown'
                                                'targetInterfaces' => Array &2114 ()
                                                'targetInterfaceNames' => Array &2115 ()
                                                'targetTraits' => Array &2116 ()
                                                'targetTraitNames' => Array &2117 ()
                                                'targetObject' => null
                                                'name' => 'Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown'
                                                'blackListedMethods' => Array &2118 (
                                                    0 => '__call'
                                                    1 => '__callStatic'
                                                    2 => '__clone'
                                                    3 => '__wakeup'
                                                    4 => '__set'
                                                    5 => '__get'
                                                    6 => '__toString'
                                                    7 => '__isset'
                                                    8 => '__destruct'
                                                    9 => '__debugInfo'
                                                    10 => '__halt_compiler'
                                                    30 => 'empty'
                                                    37 => 'eval'
                                                    53 => 'isset'
                                                    70 => 'unset'
                                                )
                                                'whiteListedMethods' => Array &2119 ()
                                                'instanceMock' => false
                                                'parameterOverrides' => Array &2120 ()
                                                'allMethods' => Array &2121 (
                                                    0 => Mockery\Generator\Method Object &0000000021e1fc8a000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fc93000000005777935d (
                                                            'name' => '__construct'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\AmountBreakdown'
                                                        )
                                                    )
                                                    1 => Mockery\Generator\Method Object &0000000021e1fc89000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fc92000000005777935d (
                                                            'name' => 'itemTotal'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\AmountBreakdown'
                                                        )
                                                    )
                                                    2 => Mockery\Generator\Method Object &0000000021e1fc88000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fc91000000005777935d (
                                                            'name' => 'shipping'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\AmountBreakdown'
                                                        )
                                                    )
                                                    3 => Mockery\Generator\Method Object &0000000021e1fc87000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fc90000000005777935d (
                                                            'name' => 'taxTotal'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\AmountBreakdown'
                                                        )
                                                    )
                                                    4 => Mockery\Generator\Method Object &0000000021e1fc86000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fc8f000000005777935d (
                                                            'name' => 'handling'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\AmountBreakdown'
                                                        )
                                                    )
                                                    5 => Mockery\Generator\Method Object &0000000021e1fc85000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fc8e000000005777935d (
                                                            'name' => 'insurance'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\AmountBreakdown'
                                                        )
                                                    )
                                                    6 => Mockery\Generator\Method Object &0000000021e1fc84000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fc8d000000005777935d (
                                                            'name' => 'shippingDiscount'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\AmountBreakdown'
                                                        )
                                                    )
                                                    7 => Mockery\Generator\Method Object &0000000021e1fc83000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fc8c000000005777935d (
                                                            'name' => 'discount'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\AmountBreakdown'
                                                        )
                                                    )
                                                    8 => Mockery\Generator\Method Object &0000000021e1fc82000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fc8b000000005777935d (
                                                            'name' => 'toArray'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\AmountBreakdown'
                                                        )
                                                    )
                                                )
                                                'mockOriginalDestructor' => true
                                                'constantsMap' => Array &2122 ()
                                            )
                                            'code' => '<?php\n
/**\n
 * Mockery\n
 *\n
 * LICENSE\n
 *\n
 * This source file is subject to the new BSD license that is bundled\n
 * with this package in the file LICENSE.txt.\n
 * It is also available through the world-wide-web at this URL:\n
 * http://github.com/padraic/mockery/blob/master/LICENSE\n
 * If you did not receive a copy of the license and are unable to\n
 * obtain it through the world-wide-web, please send an email\n
 * to padraic@php.net so we can send you a copy immediately.\n
 *\n
 * @category   Mockery\n
 * @package    Mockery\n
 * @copyright  Copyright (c) 2010 Pádraic Brady (http://blog.astrumfutura.com)\n
 * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License\n
 */\n
\n
\n
\n
use Mockery\HigherOrderMessage;\n
use Mockery\MockInterface;\n
use Mockery\LegacyMockInterface;\n
use Mockery\ExpectsHigherOrderMessage;\n
use Mockery\Exception\BadMethodCallException;\n
\n
class Mockery_2_Inpsyde_PayPalCommerce_ApiClient_Entity_AmountBreakdown extends \Inpsyde\PayPalCommerce\ApiClient\Entity\AmountBreakdown implements MockInterface\n
{\n
    /**\n
     * Stores an array of all expectation directors for this mock\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_expectations = array();\n
\n
    /**\n
     * Stores an inital number of expectations that can be manipulated\n
     * while using the getter method.\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_expectations_count = 0;\n
\n
    /**\n
     * Flag to indicate whether we can ignore method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_ignoreMissing = false;\n
\n
    /**\n
     * Flag to indicate whether we can defer method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_deferMissing = false;\n
\n
    /**\n
     * Flag to indicate whether this mock was verified\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_verified = false;\n
\n
    /**\n
     * Given name of the mock\n
     *\n
     * @var string\n
     */\n
    protected $_mockery_name = null;\n
\n
    /**\n
     * Order number of allocation\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_allocatedOrder = 0;\n
\n
    /**\n
     * Current ordered number\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_currentOrder = 0;\n
\n
    /**\n
     * Ordered groups\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_groups = array();\n
\n
    /**\n
     * Mock container containing this mock object\n
     *\n
     * @var \Mockery\Container\n
     */\n
    protected $_mockery_container = null;\n
\n
    /**\n
     * Instance of a core object on which methods are called in the event\n
     * it has been set, and an expectation for one of the object's methods\n
     * does not exist. This implements a simple partial mock proxy system.\n
     *\n
     * @var object\n
     */\n
    protected $_mockery_partial = null;\n
\n
    /**\n
     * Flag to indicate we should ignore all expectations temporarily. Used\n
     * mainly to prevent expectation matching when in the middle of a mock\n
     * object recording session.\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_disableExpectationMatching = false;\n
\n
    /**\n
     * Stores all stubbed public methods separate from any on-object public\n
     * properties that may exist.\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_mockableProperties = array();\n
\n
    /**\n
     * @var array\n
     */\n
    protected $_mockery_mockableMethods = array();\n
\n
    /**\n
     * Just a local cache for this mock's target's methods\n
     *\n
     * @var \ReflectionMethod[]\n
     */\n
    protected static $_mockery_methods;\n
\n
    protected $_mockery_allowMockingProtectedMethods = false;\n
\n
    protected $_mockery_receivedMethodCalls;\n
\n
    /**\n
     * If shouldIgnoreMissing is called, this value will be returned on all calls to missing methods\n
     * @var mixed\n
     */\n
    protected $_mockery_defaultReturnValue = null;\n
\n
    /**\n
     * Tracks internally all the bad method call exceptions that happened during runtime\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_thrownExceptions = [];\n
\n
    protected $_mockery_instanceMock = true;\n
\n
    /**\n
     * We want to avoid constructors since class is copied to Generator.php\n
     * for inclusion on extending class definitions.\n
     *\n
     * @param \Mockery\Container $container\n
     * @param object $partialObject\n
     * @param bool $instanceMock\n
     * @return void\n
     */\n
    public function mockery_init(\Mockery\Container $container = null, $partialObject = null, $instanceMock = true)\n
    {\n
        if (is_null($container)) {\n
            $container = new \Mockery\Container;\n
        }\n
        $this->_mockery_container = $container;\n
        if (!is_null($partialObject)) {\n
            $this->_mockery_partial = $partialObject;\n
        }\n
\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isPublic()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_instanceMock = $instanceMock;\n
    }\n
\n
    /**\n
     * Set expected method calls\n
     *\n
     * @param mixed ...$methodNames one or many methods that are expected to be called in this mock\n
     *\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldReceive");\n
        }\n
\n
        foreach ($methodNames as $method) {\n
            if ("" == $method) {\n
                throw new \InvalidArgumentException("Received empty method name");\n
            }\n
        }\n
\n
        $self = $this;\n
        $allowMockingProtectedMethods = $this->_mockery_allowMockingProtectedMethods;\n
\n
        $lastExpectation = \Mockery::parseShouldReturnArgs(\n
            $this, $methodNames, function ($method) use ($self, $allowMockingProtectedMethods) {\n
                $rm = $self->mockery_getMethod($method);\n
                if ($rm) {\n
                    if ($rm->isPrivate()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a private method");\n
                    }\n
                    if (!$allowMockingProtectedMethods && $rm->isProtected()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a protected method and mocking protected methods is not enabled for the currently used mock object. Use shouldAllowMockingProtectedMethods() to enable mocking of protected methods.");\n
                    }\n
                }\n
\n
                $director = $self->mockery_getExpectationsFor($method);\n
                if (!$director) {\n
                    $director = new \Mockery\ExpectationDirector($method, $self);\n
                    $self->mockery_setExpectationsFor($method, $director);\n
                }\n
                $expectation = new \Mockery\Expectation($self, $method);\n
                $director->addExpectation($expectation);\n
                return $expectation;\n
            }\n
        );\n
        return $lastExpectation;\n
    }\n
\n
    // start method allows\n
    /**\n
     * @param mixed $something  String method name or map of method => return\n
     * @return self|\Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function allows($something = [])\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something);\n
        }\n
\n
        if (empty($something)) {\n
            return $this->shouldReceive();\n
        }\n
\n
        foreach ($something as $method => $returnValue) {\n
            $this->shouldReceive($method)->andReturn($returnValue);\n
        }\n
\n
        return $this;\n
    }\n
    // end method allows\n
\n
    // start method expects\n
    /**\n
    /**\n
     * @param mixed $something  String method name (optional)\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|ExpectsHigherOrderMessage\n
     */\n
    public function expects($something = null)\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something)->once();\n
        }\n
\n
        return new ExpectsHigherOrderMessage($this);\n
    }\n
    // end method expects\n
\n
    /**\n
     * Shortcut method for setting an expectation that a method should not be called.\n
     *\n
     * @param array ...$methodNames one or many methods that are expected not to be called in this mock\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldNotReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldNotReceive");\n
        }\n
\n
        $expectation = call_user_func_array(array($this, 'shouldReceive'), $methodNames);\n
        $expectation->never();\n
        return $expectation;\n
    }\n
\n
    /**\n
     * Allows additional methods to be mocked that do not explicitly exist on mocked class\n
     * @param String $method name of the method to be mocked\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingMethod($method)\n
    {\n
        $this->_mockery_mockableMethods[] = $method;\n
        return $this;\n
    }\n
\n
    /**\n
     * Set mock to ignore unexpected methods and return Undefined class\n
     * @param mixed $returnValue the default return value for calls to missing functions on this mock\n
     * @return Mock\n
     */\n
    public function shouldIgnoreMissing($returnValue = null)\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = $returnValue;\n
        return $this;\n
    }\n
\n
    public function asUndefined()\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = new \Mockery\Undefined;\n
        return $this;\n
    }\n
\n
    /**\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingProtectedMethods()\n
    {\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isProtected()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_allowMockingProtectedMethods = true;\n
        return $this;\n
    }\n
\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * This is particularly useless for this class, as it doesn't have a parent,\n
     * but included for completeness\n
     *\n
     * @deprecated 2.0.0 Please use makePartial() instead\n
     *\n
     * @return Mock\n
     */\n
    public function shouldDeferMissing()\n
    {\n
        return $this->makePartial();\n
    }\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * It was an alias for shouldDeferMissing(), which will be removed\n
     * in 2.0.0.\n
     *\n
     * @return Mock\n
     */\n
    public function makePartial()\n
    {\n
        $this->_mockery_deferMissing = true;\n
        return $this;\n
    }\n
\n
    /**\n
     * In the event shouldReceive() accepting one or more methods/returns,\n
     * this method will switch them from normal expectations to default\n
     * expectations\n
     *\n
     * @return self\n
     */\n
    public function byDefault()\n
    {\n
        foreach ($this->_mockery_expectations as $director) {\n
            $exps = $director->getExpectations();\n
            foreach ($exps as $exp) {\n
                $exp->byDefault();\n
            }\n
        }\n
        return $this;\n
    }\n
\n
    /**\n
     * Capture calls to this mock\n
     */\n
    public function __call($method, array $args)\n
    {\n
        return $this->_mockery_handleMethodCall($method, $args);\n
    }\n
\n
    public static function __callStatic($method, array $args)\n
    {\n
        return self::_mockery_handleStaticMethodCall($method, $args);\n
    }\n
\n
    /**\n
     * Forward calls to this magic method to the __call method\n
     */\n
    public function __toString()\n
    {\n
        return $this->__call('__toString', array());\n
    }\n
\n
    /**\n
     * Iterate across all expectation directors and validate each\n
     *\n
     * @throws \Mockery\CountValidator\Exception\n
     * @return void\n
     */\n
    public function mockery_verify()\n
    {\n
        if ($this->_mockery_verified) {\n
            return;\n
        }\n
        if (isset($this->_mockery_ignoreVerification)\n
            && $this->_mockery_ignoreVerification == true) {\n
            return;\n
        }\n
        $this->_mockery_verified = true;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $director->verify();\n
        }\n
    }\n
\n
    /**\n
     * Gets a list of exceptions thrown by this mock\n
     *\n
     * @return array\n
     */\n
    public function mockery_thrownExceptions()\n
    {\n
        return $this->_mockery_thrownExceptions;\n
    }\n
\n
    /**\n
     * Tear down tasks for this mock\n
     *\n
     * @return void\n
     */\n
    public function mockery_teardown()\n
    {\n
    }\n
\n
    /**\n
     * Fetch the next available allocation order number\n
     *\n
     * @return int\n
     */\n
    public function mockery_allocateOrder()\n
    {\n
        $this->_mockery_allocatedOrder += 1;\n
        return $this->_mockery_allocatedOrder;\n
    }\n
\n
    /**\n
     * Set ordering for a group\n
     *\n
     * @param mixed $group\n
     * @param int $order\n
     */\n
    public function mockery_setGroup($group, $order)\n
    {\n
        $this->_mockery_groups[$group] = $order;\n
    }\n
\n
    /**\n
     * Fetch array of ordered groups\n
     *\n
     * @return array\n
     */\n
    public function mockery_getGroups()\n
    {\n
        return $this->_mockery_groups;\n
    }\n
\n
    /**\n
     * Set current ordered number\n
     *\n
     * @param int $order\n
     */\n
    public function mockery_setCurrentOrder($order)\n
    {\n
        $this->_mockery_currentOrder = $order;\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Get current ordered number\n
     *\n
     * @return int\n
     */\n
    public function mockery_getCurrentOrder()\n
    {\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Validate the current mock's ordering\n
     *\n
     * @param string $method\n
     * @param int $order\n
     * @throws \Mockery\Exception\n
     * @return void\n
     */\n
    public function mockery_validateOrder($method, $order)\n
    {\n
        if ($order < $this->_mockery_currentOrder) {\n
            $exception = new \Mockery\Exception\InvalidOrderException(\n
                'Method ' . __CLASS__ . '::' . $method . '()'\n
                . ' called out of order: expected order '\n
                . $order . ', was ' . $this->_mockery_currentOrder\n
            );\n
            $exception->setMock($this)\n
                ->setMethodName($method)\n
                ->setExpectedOrder($order)\n
                ->setActualOrder($this->_mockery_currentOrder);\n
            throw $exception;\n
        }\n
        $this->mockery_setCurrentOrder($order);\n
    }\n
\n
    /**\n
     * Gets the count of expectations for this mock\n
     *\n
     * @return int\n
     */\n
    public function mockery_getExpectationCount()\n
    {\n
        $count = $this->_mockery_expectations_count;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $count += $director->getExpectationCount();\n
        }\n
        return $count;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_setExpectationsFor($method, \Mockery\ExpectationDirector $director)\n
    {\n
        $this->_mockery_expectations[$method] = $director;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_getExpectationsFor($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
    }\n
\n
    /**\n
     * Find an expectation matching the given method and arguments\n
     *\n
     * @var string $method\n
     * @var array $args\n
     * @return \Mockery\Expectation|null\n
     */\n
    public function mockery_findExpectation($method, array $args)\n
    {\n
        if (!isset($this->_mockery_expectations[$method])) {\n
            return null;\n
        }\n
        $director = $this->_mockery_expectations[$method];\n
\n
        return $director->findExpectation($args);\n
    }\n
\n
    /**\n
     * Return the container for this mock\n
     *\n
     * @return \Mockery\Container\n
     */\n
    public function mockery_getContainer()\n
    {\n
        return $this->_mockery_container;\n
    }\n
\n
    /**\n
     * Return the name for this mock\n
     *\n
     * @return string\n
     */\n
    public function mockery_getName()\n
    {\n
        return __CLASS__;\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    public function mockery_getMockableProperties()\n
    {\n
        return $this->_mockery_mockableProperties;\n
    }\n
\n
    public function __isset($name)\n
    {\n
        if (false === stripos($name, '_mockery_') && method_exists(get_parent_class($this), '__isset')) {\n
            return call_user_func('parent::__isset', $name);\n
        }\n
\n
        return false;\n
    }\n
\n
    public function mockery_getExpectations()\n
    {\n
        return $this->_mockery_expectations;\n
    }\n
\n
    /**\n
     * Calls a parent class method and returns the result. Used in a passthru\n
     * expectation where a real return value is required while still taking\n
     * advantage of expectation matching and call count verification.\n
     *\n
     * @param string $name\n
     * @param array $args\n
     * @return mixed\n
     */\n
    public function mockery_callSubjectMethod($name, array $args)\n
    {\n
        if (!method_exists($this, $name) && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $name, $args);\n
        }\n
        return call_user_func_array('parent::' . $name, $args);\n
    }\n
\n
    /**\n
     * @return string[]\n
     */\n
    public function mockery_getMockableMethods()\n
    {\n
        return $this->_mockery_mockableMethods;\n
    }\n
\n
    /**\n
     * @return bool\n
     */\n
    public function mockery_isAnonymous()\n
    {\n
        $rfc = new \ReflectionClass($this);\n
\n
        // HHVM has a Stringish interface\n
        $interfaces = array_filter($rfc->getInterfaces(), function ($i) {\n
            return $i->getName() !== "Stringish";\n
        });\n
        $onlyImplementsMock = 2 == count($interfaces);\n
\n
        return (false === $rfc->getParentClass()) && $onlyImplementsMock;\n
    }\n
\n
    public function mockery_isInstance()\n
    {\n
        return $this->_mockery_instanceMock;\n
    }\n
\n
    public function __wakeup()\n
    {\n
        /**\n
         * This does not add __wakeup method support. It's a blind method and any\n
         * expected __wakeup work will NOT be performed. It merely cuts off\n
         * annoying errors where a __wakeup exists but is not essential when\n
         * mocking\n
         */\n
    }\n
\n
    public function __destruct()\n
    {\n
        /**\n
         * Overrides real class destructor in case if class was created without original constructor\n
         */\n
    }\n
\n
    public function mockery_getMethod($name)\n
    {\n
        foreach ($this->mockery_getMethods() as $method) {\n
            if ($method->getName() == $name) {\n
                return $method;\n
            }\n
        }\n
\n
        return null;\n
    }\n
\n
    /**\n
     * @param string $name Method name.\n
     *\n
     * @return mixed Generated return value based on the declared return value of the named method.\n
     */\n
    public function mockery_returnValueForMethod($name)\n
    {\n
        if (version_compare(PHP_VERSION, '7.0.0-dev') < 0) {\n
            return;\n
        }\n
\n
        $rm = $this->mockery_getMethod($name);\n
        if (!$rm || !$rm->hasReturnType()) {\n
            return;\n
        }\n
\n
        $returnType = $rm->getReturnType();\n
\n
        // Default return value for methods with nullable type is null\n
        if ($returnType->allowsNull()) {\n
            return null;\n
        }\n
\n
        $type = PHP_VERSION_ID >= 70100 ? $returnType->getName() : (string) $returnType;\n
        switch ($type) {\n
            case '':       return;\n
            case 'string': return '';\n
            case 'int':    return 0;\n
            case 'float':  return 0.0;\n
            case 'bool':   return false;\n
            case 'array':  return [];\n
\n
            case 'callable':\n
            case 'Closure':\n
                return function () {\n
                };\n
\n
            case 'Traversable':\n
            case 'Generator':\n
                // Remove eval() when minimum version >=5.5\n
                $generator = eval('return function () { yield; };');\n
                return $generator();\n
\n
            case 'self':\n
                return \Mockery::mock($rm->getDeclaringClass()->getName());\n
\n
            case 'void':\n
                return null;\n
\n
            case 'object':\n
                if (version_compare(PHP_VERSION, '7.2.0-dev') >= 0) {\n
                    return \Mockery::mock();\n
                }\n
\n
            default:\n
                return \Mockery::mock($type);\n
        }\n
    }\n
\n
    public function shouldHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->atLeast()->once();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return $director;\n
    }\n
\n
    public function shouldHaveBeenCalled()\n
    {\n
        return $this->shouldHaveReceived("__invoke");\n
    }\n
\n
    public function shouldNotHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldNotHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->never();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return null;\n
    }\n
\n
    public function shouldNotHaveBeenCalled(array $args = null)\n
    {\n
        return $this->shouldNotHaveReceived("__invoke", $args);\n
    }\n
\n
    protected static function _mockery_handleStaticMethodCall($method, array $args)\n
    {\n
        $associatedRealObject = \Mockery::fetchMock(__CLASS__);\n
        try {\n
            return $associatedRealObject->__call($method, $args);\n
        } catch (BadMethodCallException $e) {\n
            throw new BadMethodCallException(\n
                'Static method ' . $associatedRealObject->mockery_getName() . '::' . $method\n
                . '() does not exist on this mock object',\n
                null,\n
                $e\n
            );\n
        }\n
    }\n
\n
    protected function _mockery_getReceivedMethodCalls()\n
    {\n
        return $this->_mockery_receivedMethodCalls ?: $this->_mockery_receivedMethodCalls = new \Mockery\ReceivedMethodCalls();\n
    }\n
\n
    /**\n
     * Called when an instance Mock was created and its constructor is getting called\n
     *\n
     * @see \Mockery\Generator\StringManipulation\Pass\InstanceMockPass\n
     * @param array $args\n
     */\n
    protected function _mockery_constructorCalled(array $args)\n
    {\n
        if (!isset($this->_mockery_expectations['__construct']) /* _mockery_handleMethodCall runs the other checks */) {\n
            return;\n
        }\n
        $this->_mockery_handleMethodCall('__construct', $args);\n
    }\n
\n
    protected function _mockery_findExpectedMethodHandler($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
\n
        $lowerCasedMockeryExpectations = array_change_key_case($this->_mockery_expectations, CASE_LOWER);\n
        $lowerCasedMethod = strtolower($method);\n
\n
        if (isset($lowerCasedMockeryExpectations[$lowerCasedMethod])) {\n
            return $lowerCasedMockeryExpectations[$lowerCasedMethod];\n
        }\n
\n
        return null;\n
    }\n
\n
    protected function _mockery_handleMethodCall($method, array $args)\n
    {\n
        $this->_mockery_getReceivedMethodCalls()->push(new \Mockery\MethodCall($method, $args));\n
\n
        $rm = $this->mockery_getMethod($method);\n
        if ($rm && $rm->isProtected() && !$this->_mockery_allowMockingProtectedMethods) {\n
            if ($rm->isAbstract()) {\n
                return;\n
            }\n
\n
            try {\n
                $prototype = $rm->getPrototype();\n
                if ($prototype->isAbstract()) {\n
                    return;\n
                }\n
            } catch (\ReflectionException $re) {\n
                // noop - there is no hasPrototype method\n
            }\n
\n
            return call_user_func_array("parent::$method", $args);\n
        }\n
\n
        $handler = $this->_mockery_findExpectedMethodHandler($method);\n
\n
        if ($handler !== null && !$this->_mockery_disableExpectationMatching) {\n
            try {\n
                return $handler->call($args);\n
            } catch (\Mockery\Exception\NoMatchingExpectationException $e) {\n
                if (!$this->_mockery_ignoreMissing && !$this->_mockery_deferMissing) {\n
                    throw $e;\n
                }\n
            }\n
        }\n
\n
        if (!is_null($this->_mockery_partial) &&\n
            (method_exists($this->_mockery_partial, $method) || method_exists($this->_mockery_partial, '__call'))\n
        ) {\n
            return call_user_func_array(array($this->_mockery_partial, $method), $args);\n
        } elseif ($this->_mockery_deferMissing && is_callable("parent::$method")\n
            && (!$this->hasMethodOverloadingInParentClass() || method_exists(get_parent_class($this), $method))) {\n
            return call_user_func_array("parent::$method", $args);\n
        } elseif ($this->_mockery_deferMissing && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $method, $args);\n
        } elseif ($method == '__toString') {\n
            // __toString is special because we force its addition to the class API regardless of the\n
            // original implementation.  Thus, we should always return a string rather than honor\n
            // _mockery_ignoreMissing and break the API with an error.\n
            return sprintf("%s#%s", __CLASS__, spl_object_hash($this));\n
        } elseif ($this->_mockery_ignoreMissing) {\n
            if (\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed() || (method_exists($this->_mockery_partial, $method) || is_callable("parent::$method"))) {\n
                if ($this->_mockery_defaultReturnValue instanceof \Mockery\Undefined) {\n
                    return call_user_func_array(array($this->_mockery_defaultReturnValue, $method), $args);\n
                } elseif (null === $this->_mockery_defaultReturnValue) {\n
                    return $this->mockery_returnValueForMethod($method);\n
                }\n
\n
                return $this->_mockery_defaultReturnValue;\n
            }\n
        }\n
\n
        $message = 'Method ' . __CLASS__ . '::' . $method .\n
            '() does not exist on this mock object';\n
\n
        if (!is_null($rm)) {\n
            $message = 'Received ' . __CLASS__ .\n
                '::' . $method . '(), but no expectations were specified';\n
        }\n
\n
        $bmce = new BadMethodCallException($message);\n
        $this->_mockery_thrownExceptions[] = $bmce;\n
        throw $bmce;\n
    }\n
\n
    /**\n
     * Uses reflection to get the list of all\n
     * methods within the current mock object\n
     *\n
     * @return array\n
     */\n
    protected function mockery_getMethods()\n
    {\n
        if (static::$_mockery_methods && \Mockery::getConfiguration()->reflectionCacheEnabled()) {\n
            return static::$_mockery_methods;\n
        }\n
\n
        if (isset($this->_mockery_partial)) {\n
            $reflected = new \ReflectionObject($this->_mockery_partial);\n
        } else {\n
            $reflected = new \ReflectionClass($this);\n
        }\n
\n
        return static::$_mockery_methods = $reflected->getMethods();\n
    }\n
\n
    private function hasMethodOverloadingInParentClass()\n
    {\n
        // if there's __call any name would be callable\n
        return is_callable('parent::aFunctionNameThatNoOneWouldEverUseInRealLife12345');\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    private function getNonPublicMethods()\n
    {\n
        return array_map(\n
            function ($method) {\n
                return $method->getName();\n
            },\n
            array_filter($this->mockery_getMethods(), function ($method) {\n
                return !$method->isPublic();\n
            })\n
        );\n
    }\n
public function __construct(?\Inpsyde\PayPalCommerce\ApiClient\Entity\Money $itemTotal = NULL, ?\Inpsyde\PayPalCommerce\ApiClient\Entity\Money $shipping = NULL, ?\Inpsyde\PayPalCommerce\ApiClient\Entity\Money $taxTotal = NULL, ?\Inpsyde\PayPalCommerce\ApiClient\Entity\Money $handling = NULL, ?\Inpsyde\PayPalCommerce\ApiClient\Entity\Money $insurance = NULL, ?\Inpsyde\PayPalCommerce\ApiClient\Entity\Money $shippingDiscount = NULL, ?\Inpsyde\PayPalCommerce\ApiClient\Entity\Money $discount = NULL){\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function itemTotal(): ?\Inpsyde\PayPalCommerce\ApiClient\Entity\Money{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function shipping(): ?\Inpsyde\PayPalCommerce\ApiClient\Entity\Money{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function taxTotal(): ?\Inpsyde\PayPalCommerce\ApiClient\Entity\Money{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function handling(): ?\Inpsyde\PayPalCommerce\ApiClient\Entity\Money{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function insurance(): ?\Inpsyde\PayPalCommerce\ApiClient\Entity\Money{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function shippingDiscount(): ?\Inpsyde\PayPalCommerce\ApiClient\Entity\Money{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function discount(): ?\Inpsyde\PayPalCommerce\ApiClient\Entity\Money{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function toArray(): array{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    }\n
'
                                        )
                                        'a64927a2515ba2b640d8643991afd545' => Mockery\Generator\MockDefinition Object &0000000021e1fd17000000005777935d (
                                            'config' => Mockery\Generator\MockConfiguration Object &0000000021e1fce8000000005777935d (
                                                'targetClass' => Mockery\Generator\DefinedTargetClass Object &0000000021e1fce5000000005777935d (
                                                    'rfc' => ReflectionClass Object &0000000021e1fce4000000005777935d (
                                                        'name' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Amount'
                                                    )
                                                )
                                                'targetClassName' => '\Inpsyde\PayPalCommerce\ApiClient\Entity\Amount'
                                                'targetInterfaces' => Array &2123 ()
                                                'targetInterfaceNames' => Array &2124 ()
                                                'targetTraits' => Array &2125 ()
                                                'targetTraitNames' => Array &2126 ()
                                                'targetObject' => null
                                                'name' => 'Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount'
                                                'blackListedMethods' => Array &2127 (
                                                    0 => '__call'
                                                    1 => '__callStatic'
                                                    2 => '__clone'
                                                    3 => '__wakeup'
                                                    4 => '__set'
                                                    5 => '__get'
                                                    6 => '__toString'
                                                    7 => '__isset'
                                                    8 => '__destruct'
                                                    9 => '__debugInfo'
                                                    10 => '__halt_compiler'
                                                    30 => 'empty'
                                                    37 => 'eval'
                                                    53 => 'isset'
                                                    70 => 'unset'
                                                )
                                                'whiteListedMethods' => Array &2128 ()
                                                'instanceMock' => false
                                                'parameterOverrides' => Array &2129 ()
                                                'allMethods' => Array &2130 (
                                                    0 => Mockery\Generator\Method Object &0000000021e1fd1d000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fce2000000005777935d (
                                                            'name' => '__construct'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Amount'
                                                        )
                                                    )
                                                    1 => Mockery\Generator\Method Object &0000000021e1fd1c000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fce1000000005777935d (
                                                            'name' => 'currencyCode'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Amount'
                                                        )
                                                    )
                                                    2 => Mockery\Generator\Method Object &0000000021e1fd1b000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fce0000000005777935d (
                                                            'name' => 'value'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Amount'
                                                        )
                                                    )
                                                    3 => Mockery\Generator\Method Object &0000000021e1fd1a000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fd1f000000005777935d (
                                                            'name' => 'breakdown'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Amount'
                                                        )
                                                    )
                                                    4 => Mockery\Generator\Method Object &0000000021e1fd19000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fd1e000000005777935d (
                                                            'name' => 'toArray'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Amount'
                                                        )
                                                    )
                                                )
                                                'mockOriginalDestructor' => true
                                                'constantsMap' => Array &2131 ()
                                            )
                                            'code' => '<?php\n
/**\n
 * Mockery\n
 *\n
 * LICENSE\n
 *\n
 * This source file is subject to the new BSD license that is bundled\n
 * with this package in the file LICENSE.txt.\n
 * It is also available through the world-wide-web at this URL:\n
 * http://github.com/padraic/mockery/blob/master/LICENSE\n
 * If you did not receive a copy of the license and are unable to\n
 * obtain it through the world-wide-web, please send an email\n
 * to padraic@php.net so we can send you a copy immediately.\n
 *\n
 * @category   Mockery\n
 * @package    Mockery\n
 * @copyright  Copyright (c) 2010 Pádraic Brady (http://blog.astrumfutura.com)\n
 * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License\n
 */\n
\n
\n
\n
use Mockery\HigherOrderMessage;\n
use Mockery\MockInterface;\n
use Mockery\LegacyMockInterface;\n
use Mockery\ExpectsHigherOrderMessage;\n
use Mockery\Exception\BadMethodCallException;\n
\n
class Mockery_3_Inpsyde_PayPalCommerce_ApiClient_Entity_Amount extends \Inpsyde\PayPalCommerce\ApiClient\Entity\Amount implements MockInterface\n
{\n
    /**\n
     * Stores an array of all expectation directors for this mock\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_expectations = array();\n
\n
    /**\n
     * Stores an inital number of expectations that can be manipulated\n
     * while using the getter method.\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_expectations_count = 0;\n
\n
    /**\n
     * Flag to indicate whether we can ignore method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_ignoreMissing = false;\n
\n
    /**\n
     * Flag to indicate whether we can defer method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_deferMissing = false;\n
\n
    /**\n
     * Flag to indicate whether this mock was verified\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_verified = false;\n
\n
    /**\n
     * Given name of the mock\n
     *\n
     * @var string\n
     */\n
    protected $_mockery_name = null;\n
\n
    /**\n
     * Order number of allocation\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_allocatedOrder = 0;\n
\n
    /**\n
     * Current ordered number\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_currentOrder = 0;\n
\n
    /**\n
     * Ordered groups\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_groups = array();\n
\n
    /**\n
     * Mock container containing this mock object\n
     *\n
     * @var \Mockery\Container\n
     */\n
    protected $_mockery_container = null;\n
\n
    /**\n
     * Instance of a core object on which methods are called in the event\n
     * it has been set, and an expectation for one of the object's methods\n
     * does not exist. This implements a simple partial mock proxy system.\n
     *\n
     * @var object\n
     */\n
    protected $_mockery_partial = null;\n
\n
    /**\n
     * Flag to indicate we should ignore all expectations temporarily. Used\n
     * mainly to prevent expectation matching when in the middle of a mock\n
     * object recording session.\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_disableExpectationMatching = false;\n
\n
    /**\n
     * Stores all stubbed public methods separate from any on-object public\n
     * properties that may exist.\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_mockableProperties = array();\n
\n
    /**\n
     * @var array\n
     */\n
    protected $_mockery_mockableMethods = array();\n
\n
    /**\n
     * Just a local cache for this mock's target's methods\n
     *\n
     * @var \ReflectionMethod[]\n
     */\n
    protected static $_mockery_methods;\n
\n
    protected $_mockery_allowMockingProtectedMethods = false;\n
\n
    protected $_mockery_receivedMethodCalls;\n
\n
    /**\n
     * If shouldIgnoreMissing is called, this value will be returned on all calls to missing methods\n
     * @var mixed\n
     */\n
    protected $_mockery_defaultReturnValue = null;\n
\n
    /**\n
     * Tracks internally all the bad method call exceptions that happened during runtime\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_thrownExceptions = [];\n
\n
    protected $_mockery_instanceMock = true;\n
\n
    /**\n
     * We want to avoid constructors since class is copied to Generator.php\n
     * for inclusion on extending class definitions.\n
     *\n
     * @param \Mockery\Container $container\n
     * @param object $partialObject\n
     * @param bool $instanceMock\n
     * @return void\n
     */\n
    public function mockery_init(\Mockery\Container $container = null, $partialObject = null, $instanceMock = true)\n
    {\n
        if (is_null($container)) {\n
            $container = new \Mockery\Container;\n
        }\n
        $this->_mockery_container = $container;\n
        if (!is_null($partialObject)) {\n
            $this->_mockery_partial = $partialObject;\n
        }\n
\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isPublic()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_instanceMock = $instanceMock;\n
    }\n
\n
    /**\n
     * Set expected method calls\n
     *\n
     * @param mixed ...$methodNames one or many methods that are expected to be called in this mock\n
     *\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldReceive");\n
        }\n
\n
        foreach ($methodNames as $method) {\n
            if ("" == $method) {\n
                throw new \InvalidArgumentException("Received empty method name");\n
            }\n
        }\n
\n
        $self = $this;\n
        $allowMockingProtectedMethods = $this->_mockery_allowMockingProtectedMethods;\n
\n
        $lastExpectation = \Mockery::parseShouldReturnArgs(\n
            $this, $methodNames, function ($method) use ($self, $allowMockingProtectedMethods) {\n
                $rm = $self->mockery_getMethod($method);\n
                if ($rm) {\n
                    if ($rm->isPrivate()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a private method");\n
                    }\n
                    if (!$allowMockingProtectedMethods && $rm->isProtected()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a protected method and mocking protected methods is not enabled for the currently used mock object. Use shouldAllowMockingProtectedMethods() to enable mocking of protected methods.");\n
                    }\n
                }\n
\n
                $director = $self->mockery_getExpectationsFor($method);\n
                if (!$director) {\n
                    $director = new \Mockery\ExpectationDirector($method, $self);\n
                    $self->mockery_setExpectationsFor($method, $director);\n
                }\n
                $expectation = new \Mockery\Expectation($self, $method);\n
                $director->addExpectation($expectation);\n
                return $expectation;\n
            }\n
        );\n
        return $lastExpectation;\n
    }\n
\n
    // start method allows\n
    /**\n
     * @param mixed $something  String method name or map of method => return\n
     * @return self|\Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function allows($something = [])\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something);\n
        }\n
\n
        if (empty($something)) {\n
            return $this->shouldReceive();\n
        }\n
\n
        foreach ($something as $method => $returnValue) {\n
            $this->shouldReceive($method)->andReturn($returnValue);\n
        }\n
\n
        return $this;\n
    }\n
    // end method allows\n
\n
    // start method expects\n
    /**\n
    /**\n
     * @param mixed $something  String method name (optional)\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|ExpectsHigherOrderMessage\n
     */\n
    public function expects($something = null)\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something)->once();\n
        }\n
\n
        return new ExpectsHigherOrderMessage($this);\n
    }\n
    // end method expects\n
\n
    /**\n
     * Shortcut method for setting an expectation that a method should not be called.\n
     *\n
     * @param array ...$methodNames one or many methods that are expected not to be called in this mock\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldNotReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldNotReceive");\n
        }\n
\n
        $expectation = call_user_func_array(array($this, 'shouldReceive'), $methodNames);\n
        $expectation->never();\n
        return $expectation;\n
    }\n
\n
    /**\n
     * Allows additional methods to be mocked that do not explicitly exist on mocked class\n
     * @param String $method name of the method to be mocked\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingMethod($method)\n
    {\n
        $this->_mockery_mockableMethods[] = $method;\n
        return $this;\n
    }\n
\n
    /**\n
     * Set mock to ignore unexpected methods and return Undefined class\n
     * @param mixed $returnValue the default return value for calls to missing functions on this mock\n
     * @return Mock\n
     */\n
    public function shouldIgnoreMissing($returnValue = null)\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = $returnValue;\n
        return $this;\n
    }\n
\n
    public function asUndefined()\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = new \Mockery\Undefined;\n
        return $this;\n
    }\n
\n
    /**\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingProtectedMethods()\n
    {\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isProtected()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_allowMockingProtectedMethods = true;\n
        return $this;\n
    }\n
\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * This is particularly useless for this class, as it doesn't have a parent,\n
     * but included for completeness\n
     *\n
     * @deprecated 2.0.0 Please use makePartial() instead\n
     *\n
     * @return Mock\n
     */\n
    public function shouldDeferMissing()\n
    {\n
        return $this->makePartial();\n
    }\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * It was an alias for shouldDeferMissing(), which will be removed\n
     * in 2.0.0.\n
     *\n
     * @return Mock\n
     */\n
    public function makePartial()\n
    {\n
        $this->_mockery_deferMissing = true;\n
        return $this;\n
    }\n
\n
    /**\n
     * In the event shouldReceive() accepting one or more methods/returns,\n
     * this method will switch them from normal expectations to default\n
     * expectations\n
     *\n
     * @return self\n
     */\n
    public function byDefault()\n
    {\n
        foreach ($this->_mockery_expectations as $director) {\n
            $exps = $director->getExpectations();\n
            foreach ($exps as $exp) {\n
                $exp->byDefault();\n
            }\n
        }\n
        return $this;\n
    }\n
\n
    /**\n
     * Capture calls to this mock\n
     */\n
    public function __call($method, array $args)\n
    {\n
        return $this->_mockery_handleMethodCall($method, $args);\n
    }\n
\n
    public static function __callStatic($method, array $args)\n
    {\n
        return self::_mockery_handleStaticMethodCall($method, $args);\n
    }\n
\n
    /**\n
     * Forward calls to this magic method to the __call method\n
     */\n
    public function __toString()\n
    {\n
        return $this->__call('__toString', array());\n
    }\n
\n
    /**\n
     * Iterate across all expectation directors and validate each\n
     *\n
     * @throws \Mockery\CountValidator\Exception\n
     * @return void\n
     */\n
    public function mockery_verify()\n
    {\n
        if ($this->_mockery_verified) {\n
            return;\n
        }\n
        if (isset($this->_mockery_ignoreVerification)\n
            && $this->_mockery_ignoreVerification == true) {\n
            return;\n
        }\n
        $this->_mockery_verified = true;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $director->verify();\n
        }\n
    }\n
\n
    /**\n
     * Gets a list of exceptions thrown by this mock\n
     *\n
     * @return array\n
     */\n
    public function mockery_thrownExceptions()\n
    {\n
        return $this->_mockery_thrownExceptions;\n
    }\n
\n
    /**\n
     * Tear down tasks for this mock\n
     *\n
     * @return void\n
     */\n
    public function mockery_teardown()\n
    {\n
    }\n
\n
    /**\n
     * Fetch the next available allocation order number\n
     *\n
     * @return int\n
     */\n
    public function mockery_allocateOrder()\n
    {\n
        $this->_mockery_allocatedOrder += 1;\n
        return $this->_mockery_allocatedOrder;\n
    }\n
\n
    /**\n
     * Set ordering for a group\n
     *\n
     * @param mixed $group\n
     * @param int $order\n
     */\n
    public function mockery_setGroup($group, $order)\n
    {\n
        $this->_mockery_groups[$group] = $order;\n
    }\n
\n
    /**\n
     * Fetch array of ordered groups\n
     *\n
     * @return array\n
     */\n
    public function mockery_getGroups()\n
    {\n
        return $this->_mockery_groups;\n
    }\n
\n
    /**\n
     * Set current ordered number\n
     *\n
     * @param int $order\n
     */\n
    public function mockery_setCurrentOrder($order)\n
    {\n
        $this->_mockery_currentOrder = $order;\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Get current ordered number\n
     *\n
     * @return int\n
     */\n
    public function mockery_getCurrentOrder()\n
    {\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Validate the current mock's ordering\n
     *\n
     * @param string $method\n
     * @param int $order\n
     * @throws \Mockery\Exception\n
     * @return void\n
     */\n
    public function mockery_validateOrder($method, $order)\n
    {\n
        if ($order < $this->_mockery_currentOrder) {\n
            $exception = new \Mockery\Exception\InvalidOrderException(\n
                'Method ' . __CLASS__ . '::' . $method . '()'\n
                . ' called out of order: expected order '\n
                . $order . ', was ' . $this->_mockery_currentOrder\n
            );\n
            $exception->setMock($this)\n
                ->setMethodName($method)\n
                ->setExpectedOrder($order)\n
                ->setActualOrder($this->_mockery_currentOrder);\n
            throw $exception;\n
        }\n
        $this->mockery_setCurrentOrder($order);\n
    }\n
\n
    /**\n
     * Gets the count of expectations for this mock\n
     *\n
     * @return int\n
     */\n
    public function mockery_getExpectationCount()\n
    {\n
        $count = $this->_mockery_expectations_count;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $count += $director->getExpectationCount();\n
        }\n
        return $count;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_setExpectationsFor($method, \Mockery\ExpectationDirector $director)\n
    {\n
        $this->_mockery_expectations[$method] = $director;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_getExpectationsFor($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
    }\n
\n
    /**\n
     * Find an expectation matching the given method and arguments\n
     *\n
     * @var string $method\n
     * @var array $args\n
     * @return \Mockery\Expectation|null\n
     */\n
    public function mockery_findExpectation($method, array $args)\n
    {\n
        if (!isset($this->_mockery_expectations[$method])) {\n
            return null;\n
        }\n
        $director = $this->_mockery_expectations[$method];\n
\n
        return $director->findExpectation($args);\n
    }\n
\n
    /**\n
     * Return the container for this mock\n
     *\n
     * @return \Mockery\Container\n
     */\n
    public function mockery_getContainer()\n
    {\n
        return $this->_mockery_container;\n
    }\n
\n
    /**\n
     * Return the name for this mock\n
     *\n
     * @return string\n
     */\n
    public function mockery_getName()\n
    {\n
        return __CLASS__;\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    public function mockery_getMockableProperties()\n
    {\n
        return $this->_mockery_mockableProperties;\n
    }\n
\n
    public function __isset($name)\n
    {\n
        if (false === stripos($name, '_mockery_') && method_exists(get_parent_class($this), '__isset')) {\n
            return call_user_func('parent::__isset', $name);\n
        }\n
\n
        return false;\n
    }\n
\n
    public function mockery_getExpectations()\n
    {\n
        return $this->_mockery_expectations;\n
    }\n
\n
    /**\n
     * Calls a parent class method and returns the result. Used in a passthru\n
     * expectation where a real return value is required while still taking\n
     * advantage of expectation matching and call count verification.\n
     *\n
     * @param string $name\n
     * @param array $args\n
     * @return mixed\n
     */\n
    public function mockery_callSubjectMethod($name, array $args)\n
    {\n
        if (!method_exists($this, $name) && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $name, $args);\n
        }\n
        return call_user_func_array('parent::' . $name, $args);\n
    }\n
\n
    /**\n
     * @return string[]\n
     */\n
    public function mockery_getMockableMethods()\n
    {\n
        return $this->_mockery_mockableMethods;\n
    }\n
\n
    /**\n
     * @return bool\n
     */\n
    public function mockery_isAnonymous()\n
    {\n
        $rfc = new \ReflectionClass($this);\n
\n
        // HHVM has a Stringish interface\n
        $interfaces = array_filter($rfc->getInterfaces(), function ($i) {\n
            return $i->getName() !== "Stringish";\n
        });\n
        $onlyImplementsMock = 2 == count($interfaces);\n
\n
        return (false === $rfc->getParentClass()) && $onlyImplementsMock;\n
    }\n
\n
    public function mockery_isInstance()\n
    {\n
        return $this->_mockery_instanceMock;\n
    }\n
\n
    public function __wakeup()\n
    {\n
        /**\n
         * This does not add __wakeup method support. It's a blind method and any\n
         * expected __wakeup work will NOT be performed. It merely cuts off\n
         * annoying errors where a __wakeup exists but is not essential when\n
         * mocking\n
         */\n
    }\n
\n
    public function __destruct()\n
    {\n
        /**\n
         * Overrides real class destructor in case if class was created without original constructor\n
         */\n
    }\n
\n
    public function mockery_getMethod($name)\n
    {\n
        foreach ($this->mockery_getMethods() as $method) {\n
            if ($method->getName() == $name) {\n
                return $method;\n
            }\n
        }\n
\n
        return null;\n
    }\n
\n
    /**\n
     * @param string $name Method name.\n
     *\n
     * @return mixed Generated return value based on the declared return value of the named method.\n
     */\n
    public function mockery_returnValueForMethod($name)\n
    {\n
        if (version_compare(PHP_VERSION, '7.0.0-dev') < 0) {\n
            return;\n
        }\n
\n
        $rm = $this->mockery_getMethod($name);\n
        if (!$rm || !$rm->hasReturnType()) {\n
            return;\n
        }\n
\n
        $returnType = $rm->getReturnType();\n
\n
        // Default return value for methods with nullable type is null\n
        if ($returnType->allowsNull()) {\n
            return null;\n
        }\n
\n
        $type = PHP_VERSION_ID >= 70100 ? $returnType->getName() : (string) $returnType;\n
        switch ($type) {\n
            case '':       return;\n
            case 'string': return '';\n
            case 'int':    return 0;\n
            case 'float':  return 0.0;\n
            case 'bool':   return false;\n
            case 'array':  return [];\n
\n
            case 'callable':\n
            case 'Closure':\n
                return function () {\n
                };\n
\n
            case 'Traversable':\n
            case 'Generator':\n
                // Remove eval() when minimum version >=5.5\n
                $generator = eval('return function () { yield; };');\n
                return $generator();\n
\n
            case 'self':\n
                return \Mockery::mock($rm->getDeclaringClass()->getName());\n
\n
            case 'void':\n
                return null;\n
\n
            case 'object':\n
                if (version_compare(PHP_VERSION, '7.2.0-dev') >= 0) {\n
                    return \Mockery::mock();\n
                }\n
\n
            default:\n
                return \Mockery::mock($type);\n
        }\n
    }\n
\n
    public function shouldHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->atLeast()->once();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return $director;\n
    }\n
\n
    public function shouldHaveBeenCalled()\n
    {\n
        return $this->shouldHaveReceived("__invoke");\n
    }\n
\n
    public function shouldNotHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldNotHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->never();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return null;\n
    }\n
\n
    public function shouldNotHaveBeenCalled(array $args = null)\n
    {\n
        return $this->shouldNotHaveReceived("__invoke", $args);\n
    }\n
\n
    protected static function _mockery_handleStaticMethodCall($method, array $args)\n
    {\n
        $associatedRealObject = \Mockery::fetchMock(__CLASS__);\n
        try {\n
            return $associatedRealObject->__call($method, $args);\n
        } catch (BadMethodCallException $e) {\n
            throw new BadMethodCallException(\n
                'Static method ' . $associatedRealObject->mockery_getName() . '::' . $method\n
                . '() does not exist on this mock object',\n
                null,\n
                $e\n
            );\n
        }\n
    }\n
\n
    protected function _mockery_getReceivedMethodCalls()\n
    {\n
        return $this->_mockery_receivedMethodCalls ?: $this->_mockery_receivedMethodCalls = new \Mockery\ReceivedMethodCalls();\n
    }\n
\n
    /**\n
     * Called when an instance Mock was created and its constructor is getting called\n
     *\n
     * @see \Mockery\Generator\StringManipulation\Pass\InstanceMockPass\n
     * @param array $args\n
     */\n
    protected function _mockery_constructorCalled(array $args)\n
    {\n
        if (!isset($this->_mockery_expectations['__construct']) /* _mockery_handleMethodCall runs the other checks */) {\n
            return;\n
        }\n
        $this->_mockery_handleMethodCall('__construct', $args);\n
    }\n
\n
    protected function _mockery_findExpectedMethodHandler($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
\n
        $lowerCasedMockeryExpectations = array_change_key_case($this->_mockery_expectations, CASE_LOWER);\n
        $lowerCasedMethod = strtolower($method);\n
\n
        if (isset($lowerCasedMockeryExpectations[$lowerCasedMethod])) {\n
            return $lowerCasedMockeryExpectations[$lowerCasedMethod];\n
        }\n
\n
        return null;\n
    }\n
\n
    protected function _mockery_handleMethodCall($method, array $args)\n
    {\n
        $this->_mockery_getReceivedMethodCalls()->push(new \Mockery\MethodCall($method, $args));\n
\n
        $rm = $this->mockery_getMethod($method);\n
        if ($rm && $rm->isProtected() && !$this->_mockery_allowMockingProtectedMethods) {\n
            if ($rm->isAbstract()) {\n
                return;\n
            }\n
\n
            try {\n
                $prototype = $rm->getPrototype();\n
                if ($prototype->isAbstract()) {\n
                    return;\n
                }\n
            } catch (\ReflectionException $re) {\n
                // noop - there is no hasPrototype method\n
            }\n
\n
            return call_user_func_array("parent::$method", $args);\n
        }\n
\n
        $handler = $this->_mockery_findExpectedMethodHandler($method);\n
\n
        if ($handler !== null && !$this->_mockery_disableExpectationMatching) {\n
            try {\n
                return $handler->call($args);\n
            } catch (\Mockery\Exception\NoMatchingExpectationException $e) {\n
                if (!$this->_mockery_ignoreMissing && !$this->_mockery_deferMissing) {\n
                    throw $e;\n
                }\n
            }\n
        }\n
\n
        if (!is_null($this->_mockery_partial) &&\n
            (method_exists($this->_mockery_partial, $method) || method_exists($this->_mockery_partial, '__call'))\n
        ) {\n
            return call_user_func_array(array($this->_mockery_partial, $method), $args);\n
        } elseif ($this->_mockery_deferMissing && is_callable("parent::$method")\n
            && (!$this->hasMethodOverloadingInParentClass() || method_exists(get_parent_class($this), $method))) {\n
            return call_user_func_array("parent::$method", $args);\n
        } elseif ($this->_mockery_deferMissing && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $method, $args);\n
        } elseif ($method == '__toString') {\n
            // __toString is special because we force its addition to the class API regardless of the\n
            // original implementation.  Thus, we should always return a string rather than honor\n
            // _mockery_ignoreMissing and break the API with an error.\n
            return sprintf("%s#%s", __CLASS__, spl_object_hash($this));\n
        } elseif ($this->_mockery_ignoreMissing) {\n
            if (\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed() || (method_exists($this->_mockery_partial, $method) || is_callable("parent::$method"))) {\n
                if ($this->_mockery_defaultReturnValue instanceof \Mockery\Undefined) {\n
                    return call_user_func_array(array($this->_mockery_defaultReturnValue, $method), $args);\n
                } elseif (null === $this->_mockery_defaultReturnValue) {\n
                    return $this->mockery_returnValueForMethod($method);\n
                }\n
\n
                return $this->_mockery_defaultReturnValue;\n
            }\n
        }\n
\n
        $message = 'Method ' . __CLASS__ . '::' . $method .\n
            '() does not exist on this mock object';\n
\n
        if (!is_null($rm)) {\n
            $message = 'Received ' . __CLASS__ .\n
                '::' . $method . '(), but no expectations were specified';\n
        }\n
\n
        $bmce = new BadMethodCallException($message);\n
        $this->_mockery_thrownExceptions[] = $bmce;\n
        throw $bmce;\n
    }\n
\n
    /**\n
     * Uses reflection to get the list of all\n
     * methods within the current mock object\n
     *\n
     * @return array\n
     */\n
    protected function mockery_getMethods()\n
    {\n
        if (static::$_mockery_methods && \Mockery::getConfiguration()->reflectionCacheEnabled()) {\n
            return static::$_mockery_methods;\n
        }\n
\n
        if (isset($this->_mockery_partial)) {\n
            $reflected = new \ReflectionObject($this->_mockery_partial);\n
        } else {\n
            $reflected = new \ReflectionClass($this);\n
        }\n
\n
        return static::$_mockery_methods = $reflected->getMethods();\n
    }\n
\n
    private function hasMethodOverloadingInParentClass()\n
    {\n
        // if there's __call any name would be callable\n
        return is_callable('parent::aFunctionNameThatNoOneWouldEverUseInRealLife12345');\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    private function getNonPublicMethods()\n
    {\n
        return array_map(\n
            function ($method) {\n
                return $method->getName();\n
            },\n
            array_filter($this->mockery_getMethods(), function ($method) {\n
                return !$method->isPublic();\n
            })\n
        );\n
    }\n
public function __construct(\Inpsyde\PayPalCommerce\ApiClient\Entity\Money $money, ?\Inpsyde\PayPalCommerce\ApiClient\Entity\AmountBreakdown $breakdown = NULL){\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function currencyCode(): string{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function value(): float{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function breakdown(): ?\Inpsyde\PayPalCommerce\ApiClient\Entity\AmountBreakdown{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function toArray(): array{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    }\n
'
                                        )
                                        'c27d44d6be013ef1f7f2b0679e7ef4c1' => Mockery\Generator\MockDefinition Object &0000000021e1fe22000000005777935d (
                                            'config' => Mockery\Generator\MockConfiguration Object &0000000021e1fe23000000005777935d (
                                                'targetClass' => null
                                                'targetClassName' => null
                                                'targetInterfaces' => Array &2132 ()
                                                'targetInterfaceNames' => Array &2133 ()
                                                'targetTraits' => Array &2134 ()
                                                'targetTraitNames' => Array &2135 ()
                                                'targetObject' => null
                                                'name' => 'Mockery_4'
                                                'blackListedMethods' => Array &2136 (
                                                    0 => '__call'
                                                    1 => '__callStatic'
                                                    2 => '__clone'
                                                    3 => '__wakeup'
                                                    4 => '__set'
                                                    5 => '__get'
                                                    6 => '__toString'
                                                    7 => '__isset'
                                                    8 => '__destruct'
                                                    9 => '__debugInfo'
                                                    10 => '__halt_compiler'
                                                    30 => 'empty'
                                                    37 => 'eval'
                                                    53 => 'isset'
                                                    70 => 'unset'
                                                )
                                                'whiteListedMethods' => Array &2137 ()
                                                'instanceMock' => false
                                                'parameterOverrides' => Array &2138 ()
                                                'allMethods' => Array &2139 ()
                                                'mockOriginalDestructor' => true
                                                'constantsMap' => Array &2140 ()
                                            )
                                            'code' => '<?php\n
/**\n
 * Mockery\n
 *\n
 * LICENSE\n
 *\n
 * This source file is subject to the new BSD license that is bundled\n
 * with this package in the file LICENSE.txt.\n
 * It is also available through the world-wide-web at this URL:\n
 * http://github.com/padraic/mockery/blob/master/LICENSE\n
 * If you did not receive a copy of the license and are unable to\n
 * obtain it through the world-wide-web, please send an email\n
 * to padraic@php.net so we can send you a copy immediately.\n
 *\n
 * @category   Mockery\n
 * @package    Mockery\n
 * @copyright  Copyright (c) 2010 Pádraic Brady (http://blog.astrumfutura.com)\n
 * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License\n
 */\n
\n
\n
\n
use Mockery\HigherOrderMessage;\n
use Mockery\MockInterface;\n
use Mockery\LegacyMockInterface;\n
use Mockery\ExpectsHigherOrderMessage;\n
use Mockery\Exception\BadMethodCallException;\n
\n
class Mockery_4 implements MockInterface\n
{\n
    /**\n
     * Stores an array of all expectation directors for this mock\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_expectations = array();\n
\n
    /**\n
     * Stores an inital number of expectations that can be manipulated\n
     * while using the getter method.\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_expectations_count = 0;\n
\n
    /**\n
     * Flag to indicate whether we can ignore method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_ignoreMissing = false;\n
\n
    /**\n
     * Flag to indicate whether we can defer method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_deferMissing = false;\n
\n
    /**\n
     * Flag to indicate whether this mock was verified\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_verified = false;\n
\n
    /**\n
     * Given name of the mock\n
     *\n
     * @var string\n
     */\n
    protected $_mockery_name = null;\n
\n
    /**\n
     * Order number of allocation\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_allocatedOrder = 0;\n
\n
    /**\n
     * Current ordered number\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_currentOrder = 0;\n
\n
    /**\n
     * Ordered groups\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_groups = array();\n
\n
    /**\n
     * Mock container containing this mock object\n
     *\n
     * @var \Mockery\Container\n
     */\n
    protected $_mockery_container = null;\n
\n
    /**\n
     * Instance of a core object on which methods are called in the event\n
     * it has been set, and an expectation for one of the object's methods\n
     * does not exist. This implements a simple partial mock proxy system.\n
     *\n
     * @var object\n
     */\n
    protected $_mockery_partial = null;\n
\n
    /**\n
     * Flag to indicate we should ignore all expectations temporarily. Used\n
     * mainly to prevent expectation matching when in the middle of a mock\n
     * object recording session.\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_disableExpectationMatching = false;\n
\n
    /**\n
     * Stores all stubbed public methods separate from any on-object public\n
     * properties that may exist.\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_mockableProperties = array();\n
\n
    /**\n
     * @var array\n
     */\n
    protected $_mockery_mockableMethods = array();\n
\n
    /**\n
     * Just a local cache for this mock's target's methods\n
     *\n
     * @var \ReflectionMethod[]\n
     */\n
    protected static $_mockery_methods;\n
\n
    protected $_mockery_allowMockingProtectedMethods = false;\n
\n
    protected $_mockery_receivedMethodCalls;\n
\n
    /**\n
     * If shouldIgnoreMissing is called, this value will be returned on all calls to missing methods\n
     * @var mixed\n
     */\n
    protected $_mockery_defaultReturnValue = null;\n
\n
    /**\n
     * Tracks internally all the bad method call exceptions that happened during runtime\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_thrownExceptions = [];\n
\n
    protected $_mockery_instanceMock = true;\n
\n
    /**\n
     * We want to avoid constructors since class is copied to Generator.php\n
     * for inclusion on extending class definitions.\n
     *\n
     * @param \Mockery\Container $container\n
     * @param object $partialObject\n
     * @param bool $instanceMock\n
     * @return void\n
     */\n
    public function mockery_init(\Mockery\Container $container = null, $partialObject = null, $instanceMock = true)\n
    {\n
        if (is_null($container)) {\n
            $container = new \Mockery\Container;\n
        }\n
        $this->_mockery_container = $container;\n
        if (!is_null($partialObject)) {\n
            $this->_mockery_partial = $partialObject;\n
        }\n
\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isPublic()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_instanceMock = $instanceMock;\n
    }\n
\n
    /**\n
     * Set expected method calls\n
     *\n
     * @param mixed ...$methodNames one or many methods that are expected to be called in this mock\n
     *\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldReceive");\n
        }\n
\n
        foreach ($methodNames as $method) {\n
            if ("" == $method) {\n
                throw new \InvalidArgumentException("Received empty method name");\n
            }\n
        }\n
\n
        $self = $this;\n
        $allowMockingProtectedMethods = $this->_mockery_allowMockingProtectedMethods;\n
\n
        $lastExpectation = \Mockery::parseShouldReturnArgs(\n
            $this, $methodNames, function ($method) use ($self, $allowMockingProtectedMethods) {\n
                $rm = $self->mockery_getMethod($method);\n
                if ($rm) {\n
                    if ($rm->isPrivate()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a private method");\n
                    }\n
                    if (!$allowMockingProtectedMethods && $rm->isProtected()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a protected method and mocking protected methods is not enabled for the currently used mock object. Use shouldAllowMockingProtectedMethods() to enable mocking of protected methods.");\n
                    }\n
                }\n
\n
                $director = $self->mockery_getExpectationsFor($method);\n
                if (!$director) {\n
                    $director = new \Mockery\ExpectationDirector($method, $self);\n
                    $self->mockery_setExpectationsFor($method, $director);\n
                }\n
                $expectation = new \Mockery\Expectation($self, $method);\n
                $director->addExpectation($expectation);\n
                return $expectation;\n
            }\n
        );\n
        return $lastExpectation;\n
    }\n
\n
    // start method allows\n
    /**\n
     * @param mixed $something  String method name or map of method => return\n
     * @return self|\Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function allows($something = [])\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something);\n
        }\n
\n
        if (empty($something)) {\n
            return $this->shouldReceive();\n
        }\n
\n
        foreach ($something as $method => $returnValue) {\n
            $this->shouldReceive($method)->andReturn($returnValue);\n
        }\n
\n
        return $this;\n
    }\n
    // end method allows\n
\n
    // start method expects\n
    /**\n
    /**\n
     * @param mixed $something  String method name (optional)\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|ExpectsHigherOrderMessage\n
     */\n
    public function expects($something = null)\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something)->once();\n
        }\n
\n
        return new ExpectsHigherOrderMessage($this);\n
    }\n
    // end method expects\n
\n
    /**\n
     * Shortcut method for setting an expectation that a method should not be called.\n
     *\n
     * @param array ...$methodNames one or many methods that are expected not to be called in this mock\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldNotReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldNotReceive");\n
        }\n
\n
        $expectation = call_user_func_array(array($this, 'shouldReceive'), $methodNames);\n
        $expectation->never();\n
        return $expectation;\n
    }\n
\n
    /**\n
     * Allows additional methods to be mocked that do not explicitly exist on mocked class\n
     * @param String $method name of the method to be mocked\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingMethod($method)\n
    {\n
        $this->_mockery_mockableMethods[] = $method;\n
        return $this;\n
    }\n
\n
    /**\n
     * Set mock to ignore unexpected methods and return Undefined class\n
     * @param mixed $returnValue the default return value for calls to missing functions on this mock\n
     * @return Mock\n
     */\n
    public function shouldIgnoreMissing($returnValue = null)\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = $returnValue;\n
        return $this;\n
    }\n
\n
    public function asUndefined()\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = new \Mockery\Undefined;\n
        return $this;\n
    }\n
\n
    /**\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingProtectedMethods()\n
    {\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isProtected()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_allowMockingProtectedMethods = true;\n
        return $this;\n
    }\n
\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * This is particularly useless for this class, as it doesn't have a parent,\n
     * but included for completeness\n
     *\n
     * @deprecated 2.0.0 Please use makePartial() instead\n
     *\n
     * @return Mock\n
     */\n
    public function shouldDeferMissing()\n
    {\n
        return $this->makePartial();\n
    }\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * It was an alias for shouldDeferMissing(), which will be removed\n
     * in 2.0.0.\n
     *\n
     * @return Mock\n
     */\n
    public function makePartial()\n
    {\n
        $this->_mockery_deferMissing = true;\n
        return $this;\n
    }\n
\n
    /**\n
     * In the event shouldReceive() accepting one or more methods/returns,\n
     * this method will switch them from normal expectations to default\n
     * expectations\n
     *\n
     * @return self\n
     */\n
    public function byDefault()\n
    {\n
        foreach ($this->_mockery_expectations as $director) {\n
            $exps = $director->getExpectations();\n
            foreach ($exps as $exp) {\n
                $exp->byDefault();\n
            }\n
        }\n
        return $this;\n
    }\n
\n
    /**\n
     * Capture calls to this mock\n
     */\n
    public function __call($method, array $args)\n
    {\n
        return $this->_mockery_handleMethodCall($method, $args);\n
    }\n
\n
    public static function __callStatic($method, array $args)\n
    {\n
        return self::_mockery_handleStaticMethodCall($method, $args);\n
    }\n
\n
    /**\n
     * Forward calls to this magic method to the __call method\n
     */\n
    public function __toString()\n
    {\n
        return $this->__call('__toString', array());\n
    }\n
\n
    /**\n
     * Iterate across all expectation directors and validate each\n
     *\n
     * @throws \Mockery\CountValidator\Exception\n
     * @return void\n
     */\n
    public function mockery_verify()\n
    {\n
        if ($this->_mockery_verified) {\n
            return;\n
        }\n
        if (isset($this->_mockery_ignoreVerification)\n
            && $this->_mockery_ignoreVerification == true) {\n
            return;\n
        }\n
        $this->_mockery_verified = true;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $director->verify();\n
        }\n
    }\n
\n
    /**\n
     * Gets a list of exceptions thrown by this mock\n
     *\n
     * @return array\n
     */\n
    public function mockery_thrownExceptions()\n
    {\n
        return $this->_mockery_thrownExceptions;\n
    }\n
\n
    /**\n
     * Tear down tasks for this mock\n
     *\n
     * @return void\n
     */\n
    public function mockery_teardown()\n
    {\n
    }\n
\n
    /**\n
     * Fetch the next available allocation order number\n
     *\n
     * @return int\n
     */\n
    public function mockery_allocateOrder()\n
    {\n
        $this->_mockery_allocatedOrder += 1;\n
        return $this->_mockery_allocatedOrder;\n
    }\n
\n
    /**\n
     * Set ordering for a group\n
     *\n
     * @param mixed $group\n
     * @param int $order\n
     */\n
    public function mockery_setGroup($group, $order)\n
    {\n
        $this->_mockery_groups[$group] = $order;\n
    }\n
\n
    /**\n
     * Fetch array of ordered groups\n
     *\n
     * @return array\n
     */\n
    public function mockery_getGroups()\n
    {\n
        return $this->_mockery_groups;\n
    }\n
\n
    /**\n
     * Set current ordered number\n
     *\n
     * @param int $order\n
     */\n
    public function mockery_setCurrentOrder($order)\n
    {\n
        $this->_mockery_currentOrder = $order;\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Get current ordered number\n
     *\n
     * @return int\n
     */\n
    public function mockery_getCurrentOrder()\n
    {\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Validate the current mock's ordering\n
     *\n
     * @param string $method\n
     * @param int $order\n
     * @throws \Mockery\Exception\n
     * @return void\n
     */\n
    public function mockery_validateOrder($method, $order)\n
    {\n
        if ($order < $this->_mockery_currentOrder) {\n
            $exception = new \Mockery\Exception\InvalidOrderException(\n
                'Method ' . __CLASS__ . '::' . $method . '()'\n
                . ' called out of order: expected order '\n
                . $order . ', was ' . $this->_mockery_currentOrder\n
            );\n
            $exception->setMock($this)\n
                ->setMethodName($method)\n
                ->setExpectedOrder($order)\n
                ->setActualOrder($this->_mockery_currentOrder);\n
            throw $exception;\n
        }\n
        $this->mockery_setCurrentOrder($order);\n
    }\n
\n
    /**\n
     * Gets the count of expectations for this mock\n
     *\n
     * @return int\n
     */\n
    public function mockery_getExpectationCount()\n
    {\n
        $count = $this->_mockery_expectations_count;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $count += $director->getExpectationCount();\n
        }\n
        return $count;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_setExpectationsFor($method, \Mockery\ExpectationDirector $director)\n
    {\n
        $this->_mockery_expectations[$method] = $director;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_getExpectationsFor($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
    }\n
\n
    /**\n
     * Find an expectation matching the given method and arguments\n
     *\n
     * @var string $method\n
     * @var array $args\n
     * @return \Mockery\Expectation|null\n
     */\n
    public function mockery_findExpectation($method, array $args)\n
    {\n
        if (!isset($this->_mockery_expectations[$method])) {\n
            return null;\n
        }\n
        $director = $this->_mockery_expectations[$method];\n
\n
        return $director->findExpectation($args);\n
    }\n
\n
    /**\n
     * Return the container for this mock\n
     *\n
     * @return \Mockery\Container\n
     */\n
    public function mockery_getContainer()\n
    {\n
        return $this->_mockery_container;\n
    }\n
\n
    /**\n
     * Return the name for this mock\n
     *\n
     * @return string\n
     */\n
    public function mockery_getName()\n
    {\n
        return __CLASS__;\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    public function mockery_getMockableProperties()\n
    {\n
        return $this->_mockery_mockableProperties;\n
    }\n
\n
    public function __isset($name)\n
    {\n
        if (false === stripos($name, '_mockery_') && method_exists(get_parent_class($this), '__isset')) {\n
            return call_user_func('parent::__isset', $name);\n
        }\n
\n
        return false;\n
    }\n
\n
    public function mockery_getExpectations()\n
    {\n
        return $this->_mockery_expectations;\n
    }\n
\n
    /**\n
     * Calls a parent class method and returns the result. Used in a passthru\n
     * expectation where a real return value is required while still taking\n
     * advantage of expectation matching and call count verification.\n
     *\n
     * @param string $name\n
     * @param array $args\n
     * @return mixed\n
     */\n
    public function mockery_callSubjectMethod($name, array $args)\n
    {\n
        if (!method_exists($this, $name) && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $name, $args);\n
        }\n
        return call_user_func_array('parent::' . $name, $args);\n
    }\n
\n
    /**\n
     * @return string[]\n
     */\n
    public function mockery_getMockableMethods()\n
    {\n
        return $this->_mockery_mockableMethods;\n
    }\n
\n
    /**\n
     * @return bool\n
     */\n
    public function mockery_isAnonymous()\n
    {\n
        $rfc = new \ReflectionClass($this);\n
\n
        // HHVM has a Stringish interface\n
        $interfaces = array_filter($rfc->getInterfaces(), function ($i) {\n
            return $i->getName() !== "Stringish";\n
        });\n
        $onlyImplementsMock = 2 == count($interfaces);\n
\n
        return (false === $rfc->getParentClass()) && $onlyImplementsMock;\n
    }\n
\n
    public function mockery_isInstance()\n
    {\n
        return $this->_mockery_instanceMock;\n
    }\n
\n
    public function __wakeup()\n
    {\n
        /**\n
         * This does not add __wakeup method support. It's a blind method and any\n
         * expected __wakeup work will NOT be performed. It merely cuts off\n
         * annoying errors where a __wakeup exists but is not essential when\n
         * mocking\n
         */\n
    }\n
\n
    public function __destruct()\n
    {\n
        /**\n
         * Overrides real class destructor in case if class was created without original constructor\n
         */\n
    }\n
\n
    public function mockery_getMethod($name)\n
    {\n
        foreach ($this->mockery_getMethods() as $method) {\n
            if ($method->getName() == $name) {\n
                return $method;\n
            }\n
        }\n
\n
        return null;\n
    }\n
\n
    /**\n
     * @param string $name Method name.\n
     *\n
     * @return mixed Generated return value based on the declared return value of the named method.\n
     */\n
    public function mockery_returnValueForMethod($name)\n
    {\n
        if (version_compare(PHP_VERSION, '7.0.0-dev') < 0) {\n
            return;\n
        }\n
\n
        $rm = $this->mockery_getMethod($name);\n
        if (!$rm || !$rm->hasReturnType()) {\n
            return;\n
        }\n
\n
        $returnType = $rm->getReturnType();\n
\n
        // Default return value for methods with nullable type is null\n
        if ($returnType->allowsNull()) {\n
            return null;\n
        }\n
\n
        $type = PHP_VERSION_ID >= 70100 ? $returnType->getName() : (string) $returnType;\n
        switch ($type) {\n
            case '':       return;\n
            case 'string': return '';\n
            case 'int':    return 0;\n
            case 'float':  return 0.0;\n
            case 'bool':   return false;\n
            case 'array':  return [];\n
\n
            case 'callable':\n
            case 'Closure':\n
                return function () {\n
                };\n
\n
            case 'Traversable':\n
            case 'Generator':\n
                // Remove eval() when minimum version >=5.5\n
                $generator = eval('return function () { yield; };');\n
                return $generator();\n
\n
            case 'self':\n
                return \Mockery::mock($rm->getDeclaringClass()->getName());\n
\n
            case 'void':\n
                return null;\n
\n
            case 'object':\n
                if (version_compare(PHP_VERSION, '7.2.0-dev') >= 0) {\n
                    return \Mockery::mock();\n
                }\n
\n
            default:\n
                return \Mockery::mock($type);\n
        }\n
    }\n
\n
    public function shouldHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->atLeast()->once();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return $director;\n
    }\n
\n
    public function shouldHaveBeenCalled()\n
    {\n
        return $this->shouldHaveReceived("__invoke");\n
    }\n
\n
    public function shouldNotHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldNotHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->never();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return null;\n
    }\n
\n
    public function shouldNotHaveBeenCalled(array $args = null)\n
    {\n
        return $this->shouldNotHaveReceived("__invoke", $args);\n
    }\n
\n
    protected static function _mockery_handleStaticMethodCall($method, array $args)\n
    {\n
        $associatedRealObject = \Mockery::fetchMock(__CLASS__);\n
        try {\n
            return $associatedRealObject->__call($method, $args);\n
        } catch (BadMethodCallException $e) {\n
            throw new BadMethodCallException(\n
                'Static method ' . $associatedRealObject->mockery_getName() . '::' . $method\n
                . '() does not exist on this mock object',\n
                null,\n
                $e\n
            );\n
        }\n
    }\n
\n
    protected function _mockery_getReceivedMethodCalls()\n
    {\n
        return $this->_mockery_receivedMethodCalls ?: $this->_mockery_receivedMethodCalls = new \Mockery\ReceivedMethodCalls();\n
    }\n
\n
    /**\n
     * Called when an instance Mock was created and its constructor is getting called\n
     *\n
     * @see \Mockery\Generator\StringManipulation\Pass\InstanceMockPass\n
     * @param array $args\n
     */\n
    protected function _mockery_constructorCalled(array $args)\n
    {\n
        if (!isset($this->_mockery_expectations['__construct']) /* _mockery_handleMethodCall runs the other checks */) {\n
            return;\n
        }\n
        $this->_mockery_handleMethodCall('__construct', $args);\n
    }\n
\n
    protected function _mockery_findExpectedMethodHandler($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
\n
        $lowerCasedMockeryExpectations = array_change_key_case($this->_mockery_expectations, CASE_LOWER);\n
        $lowerCasedMethod = strtolower($method);\n
\n
        if (isset($lowerCasedMockeryExpectations[$lowerCasedMethod])) {\n
            return $lowerCasedMockeryExpectations[$lowerCasedMethod];\n
        }\n
\n
        return null;\n
    }\n
\n
    protected function _mockery_handleMethodCall($method, array $args)\n
    {\n
        $this->_mockery_getReceivedMethodCalls()->push(new \Mockery\MethodCall($method, $args));\n
\n
        $rm = $this->mockery_getMethod($method);\n
        if ($rm && $rm->isProtected() && !$this->_mockery_allowMockingProtectedMethods) {\n
            if ($rm->isAbstract()) {\n
                return;\n
            }\n
\n
            try {\n
                $prototype = $rm->getPrototype();\n
                if ($prototype->isAbstract()) {\n
                    return;\n
                }\n
            } catch (\ReflectionException $re) {\n
                // noop - there is no hasPrototype method\n
            }\n
\n
            return call_user_func_array("parent::$method", $args);\n
        }\n
\n
        $handler = $this->_mockery_findExpectedMethodHandler($method);\n
\n
        if ($handler !== null && !$this->_mockery_disableExpectationMatching) {\n
            try {\n
                return $handler->call($args);\n
            } catch (\Mockery\Exception\NoMatchingExpectationException $e) {\n
                if (!$this->_mockery_ignoreMissing && !$this->_mockery_deferMissing) {\n
                    throw $e;\n
                }\n
            }\n
        }\n
\n
        if (!is_null($this->_mockery_partial) &&\n
            (method_exists($this->_mockery_partial, $method) || method_exists($this->_mockery_partial, '__call'))\n
        ) {\n
            return call_user_func_array(array($this->_mockery_partial, $method), $args);\n
        } elseif ($this->_mockery_deferMissing && is_callable("parent::$method")\n
            && (!$this->hasMethodOverloadingInParentClass() || method_exists(get_parent_class($this), $method))) {\n
            return call_user_func_array("parent::$method", $args);\n
        } elseif ($this->_mockery_deferMissing && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $method, $args);\n
        } elseif ($method == '__toString') {\n
            // __toString is special because we force its addition to the class API regardless of the\n
            // original implementation.  Thus, we should always return a string rather than honor\n
            // _mockery_ignoreMissing and break the API with an error.\n
            return sprintf("%s#%s", __CLASS__, spl_object_hash($this));\n
        } elseif ($this->_mockery_ignoreMissing) {\n
            if (\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed() || (method_exists($this->_mockery_partial, $method) || is_callable("parent::$method"))) {\n
                if ($this->_mockery_defaultReturnValue instanceof \Mockery\Undefined) {\n
                    return call_user_func_array(array($this->_mockery_defaultReturnValue, $method), $args);\n
                } elseif (null === $this->_mockery_defaultReturnValue) {\n
                    return $this->mockery_returnValueForMethod($method);\n
                }\n
\n
                return $this->_mockery_defaultReturnValue;\n
            }\n
        }\n
\n
        $message = 'Method ' . __CLASS__ . '::' . $method .\n
            '() does not exist on this mock object';\n
\n
        if (!is_null($rm)) {\n
            $message = 'Received ' . __CLASS__ .\n
                '::' . $method . '(), but no expectations were specified';\n
        }\n
\n
        $bmce = new BadMethodCallException($message);\n
        $this->_mockery_thrownExceptions[] = $bmce;\n
        throw $bmce;\n
    }\n
\n
    /**\n
     * Uses reflection to get the list of all\n
     * methods within the current mock object\n
     *\n
     * @return array\n
     */\n
    protected function mockery_getMethods()\n
    {\n
        if (static::$_mockery_methods && \Mockery::getConfiguration()->reflectionCacheEnabled()) {\n
            return static::$_mockery_methods;\n
        }\n
\n
        if (isset($this->_mockery_partial)) {\n
            $reflected = new \ReflectionObject($this->_mockery_partial);\n
        } else {\n
            $reflected = new \ReflectionClass($this);\n
        }\n
\n
        return static::$_mockery_methods = $reflected->getMethods();\n
    }\n
\n
    private function hasMethodOverloadingInParentClass()\n
    {\n
        // if there's __call any name would be callable\n
        return is_callable('parent::aFunctionNameThatNoOneWouldEverUseInRealLife12345');\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    private function getNonPublicMethods()\n
    {\n
        return array_map(\n
            function ($method) {\n
                return $method->getName();\n
            },\n
            array_filter($this->mockery_getMethods(), function ($method) {\n
                return !$method->isPublic();\n
            })\n
        );\n
    }\n
}\n
'
                                        )
                                        '64f88b6553bb1a249489a8e6dde39a46' => Mockery\Generator\MockDefinition Object &0000000021e1fe9c000000005777935d (
                                            'config' => Mockery\Generator\MockConfiguration Object &0000000021e1fe9f000000005777935d (
                                                'targetClass' => Mockery\Generator\UndefinedTargetClass Object &0000000021e1fe9d000000005777935d (
                                                    'name' => '\WC_Customer'
                                                )
                                                'targetClassName' => '\WC_Customer'
                                                'targetInterfaces' => Array &2141 ()
                                                'targetInterfaceNames' => Array &2142 ()
                                                'targetTraits' => Array &2143 ()
                                                'targetTraitNames' => Array &2144 ()
                                                'targetObject' => null
                                                'name' => 'Mockery_5__WC_Customer'
                                                'blackListedMethods' => Array &2145 (
                                                    0 => '__call'
                                                    1 => '__callStatic'
                                                    2 => '__clone'
                                                    3 => '__wakeup'
                                                    4 => '__set'
                                                    5 => '__get'
                                                    6 => '__toString'
                                                    7 => '__isset'
                                                    8 => '__destruct'
                                                    9 => '__debugInfo'
                                                    10 => '__halt_compiler'
                                                    30 => 'empty'
                                                    37 => 'eval'
                                                    53 => 'isset'
                                                    70 => 'unset'
                                                )
                                                'whiteListedMethods' => Array &2146 ()
                                                'instanceMock' => false
                                                'parameterOverrides' => Array &2147 ()
                                                'allMethods' => Array &2148 ()
                                                'mockOriginalDestructor' => true
                                                'constantsMap' => Array &2149 ()
                                            )
                                            'code' => '<?php\n
/**\n
 * Mockery\n
 *\n
 * LICENSE\n
 *\n
 * This source file is subject to the new BSD license that is bundled\n
 * with this package in the file LICENSE.txt.\n
 * It is also available through the world-wide-web at this URL:\n
 * http://github.com/padraic/mockery/blob/master/LICENSE\n
 * If you did not receive a copy of the license and are unable to\n
 * obtain it through the world-wide-web, please send an email\n
 * to padraic@php.net so we can send you a copy immediately.\n
 *\n
 * @category   Mockery\n
 * @package    Mockery\n
 * @copyright  Copyright (c) 2010 Pádraic Brady (http://blog.astrumfutura.com)\n
 * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License\n
 */\n
\n
\n
\n
use Mockery\HigherOrderMessage;\n
use Mockery\MockInterface;\n
use Mockery\LegacyMockInterface;\n
use Mockery\ExpectsHigherOrderMessage;\n
use Mockery\Exception\BadMethodCallException;\n
\n
class Mockery_5__WC_Customer extends \WC_Customer implements MockInterface\n
{\n
    /**\n
     * Stores an array of all expectation directors for this mock\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_expectations = array();\n
\n
    /**\n
     * Stores an inital number of expectations that can be manipulated\n
     * while using the getter method.\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_expectations_count = 0;\n
\n
    /**\n
     * Flag to indicate whether we can ignore method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_ignoreMissing = false;\n
\n
    /**\n
     * Flag to indicate whether we can defer method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_deferMissing = false;\n
\n
    /**\n
     * Flag to indicate whether this mock was verified\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_verified = false;\n
\n
    /**\n
     * Given name of the mock\n
     *\n
     * @var string\n
     */\n
    protected $_mockery_name = null;\n
\n
    /**\n
     * Order number of allocation\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_allocatedOrder = 0;\n
\n
    /**\n
     * Current ordered number\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_currentOrder = 0;\n
\n
    /**\n
     * Ordered groups\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_groups = array();\n
\n
    /**\n
     * Mock container containing this mock object\n
     *\n
     * @var \Mockery\Container\n
     */\n
    protected $_mockery_container = null;\n
\n
    /**\n
     * Instance of a core object on which methods are called in the event\n
     * it has been set, and an expectation for one of the object's methods\n
     * does not exist. This implements a simple partial mock proxy system.\n
     *\n
     * @var object\n
     */\n
    protected $_mockery_partial = null;\n
\n
    /**\n
     * Flag to indicate we should ignore all expectations temporarily. Used\n
     * mainly to prevent expectation matching when in the middle of a mock\n
     * object recording session.\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_disableExpectationMatching = false;\n
\n
    /**\n
     * Stores all stubbed public methods separate from any on-object public\n
     * properties that may exist.\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_mockableProperties = array();\n
\n
    /**\n
     * @var array\n
     */\n
    protected $_mockery_mockableMethods = array();\n
\n
    /**\n
     * Just a local cache for this mock's target's methods\n
     *\n
     * @var \ReflectionMethod[]\n
     */\n
    protected static $_mockery_methods;\n
\n
    protected $_mockery_allowMockingProtectedMethods = false;\n
\n
    protected $_mockery_receivedMethodCalls;\n
\n
    /**\n
     * If shouldIgnoreMissing is called, this value will be returned on all calls to missing methods\n
     * @var mixed\n
     */\n
    protected $_mockery_defaultReturnValue = null;\n
\n
    /**\n
     * Tracks internally all the bad method call exceptions that happened during runtime\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_thrownExceptions = [];\n
\n
    protected $_mockery_instanceMock = true;\n
\n
    /**\n
     * We want to avoid constructors since class is copied to Generator.php\n
     * for inclusion on extending class definitions.\n
     *\n
     * @param \Mockery\Container $container\n
     * @param object $partialObject\n
     * @param bool $instanceMock\n
     * @return void\n
     */\n
    public function mockery_init(\Mockery\Container $container = null, $partialObject = null, $instanceMock = true)\n
    {\n
        if (is_null($container)) {\n
            $container = new \Mockery\Container;\n
        }\n
        $this->_mockery_container = $container;\n
        if (!is_null($partialObject)) {\n
            $this->_mockery_partial = $partialObject;\n
        }\n
\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isPublic()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_instanceMock = $instanceMock;\n
    }\n
\n
    /**\n
     * Set expected method calls\n
     *\n
     * @param mixed ...$methodNames one or many methods that are expected to be called in this mock\n
     *\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldReceive");\n
        }\n
\n
        foreach ($methodNames as $method) {\n
            if ("" == $method) {\n
                throw new \InvalidArgumentException("Received empty method name");\n
            }\n
        }\n
\n
        $self = $this;\n
        $allowMockingProtectedMethods = $this->_mockery_allowMockingProtectedMethods;\n
\n
        $lastExpectation = \Mockery::parseShouldReturnArgs(\n
            $this, $methodNames, function ($method) use ($self, $allowMockingProtectedMethods) {\n
                $rm = $self->mockery_getMethod($method);\n
                if ($rm) {\n
                    if ($rm->isPrivate()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a private method");\n
                    }\n
                    if (!$allowMockingProtectedMethods && $rm->isProtected()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a protected method and mocking protected methods is not enabled for the currently used mock object. Use shouldAllowMockingProtectedMethods() to enable mocking of protected methods.");\n
                    }\n
                }\n
\n
                $director = $self->mockery_getExpectationsFor($method);\n
                if (!$director) {\n
                    $director = new \Mockery\ExpectationDirector($method, $self);\n
                    $self->mockery_setExpectationsFor($method, $director);\n
                }\n
                $expectation = new \Mockery\Expectation($self, $method);\n
                $director->addExpectation($expectation);\n
                return $expectation;\n
            }\n
        );\n
        return $lastExpectation;\n
    }\n
\n
    // start method allows\n
    /**\n
     * @param mixed $something  String method name or map of method => return\n
     * @return self|\Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function allows($something = [])\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something);\n
        }\n
\n
        if (empty($something)) {\n
            return $this->shouldReceive();\n
        }\n
\n
        foreach ($something as $method => $returnValue) {\n
            $this->shouldReceive($method)->andReturn($returnValue);\n
        }\n
\n
        return $this;\n
    }\n
    // end method allows\n
\n
    // start method expects\n
    /**\n
    /**\n
     * @param mixed $something  String method name (optional)\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|ExpectsHigherOrderMessage\n
     */\n
    public function expects($something = null)\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something)->once();\n
        }\n
\n
        return new ExpectsHigherOrderMessage($this);\n
    }\n
    // end method expects\n
\n
    /**\n
     * Shortcut method for setting an expectation that a method should not be called.\n
     *\n
     * @param array ...$methodNames one or many methods that are expected not to be called in this mock\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldNotReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldNotReceive");\n
        }\n
\n
        $expectation = call_user_func_array(array($this, 'shouldReceive'), $methodNames);\n
        $expectation->never();\n
        return $expectation;\n
    }\n
\n
    /**\n
     * Allows additional methods to be mocked that do not explicitly exist on mocked class\n
     * @param String $method name of the method to be mocked\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingMethod($method)\n
    {\n
        $this->_mockery_mockableMethods[] = $method;\n
        return $this;\n
    }\n
\n
    /**\n
     * Set mock to ignore unexpected methods and return Undefined class\n
     * @param mixed $returnValue the default return value for calls to missing functions on this mock\n
     * @return Mock\n
     */\n
    public function shouldIgnoreMissing($returnValue = null)\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = $returnValue;\n
        return $this;\n
    }\n
\n
    public function asUndefined()\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = new \Mockery\Undefined;\n
        return $this;\n
    }\n
\n
    /**\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingProtectedMethods()\n
    {\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isProtected()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_allowMockingProtectedMethods = true;\n
        return $this;\n
    }\n
\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * This is particularly useless for this class, as it doesn't have a parent,\n
     * but included for completeness\n
     *\n
     * @deprecated 2.0.0 Please use makePartial() instead\n
     *\n
     * @return Mock\n
     */\n
    public function shouldDeferMissing()\n
    {\n
        return $this->makePartial();\n
    }\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * It was an alias for shouldDeferMissing(), which will be removed\n
     * in 2.0.0.\n
     *\n
     * @return Mock\n
     */\n
    public function makePartial()\n
    {\n
        $this->_mockery_deferMissing = true;\n
        return $this;\n
    }\n
\n
    /**\n
     * In the event shouldReceive() accepting one or more methods/returns,\n
     * this method will switch them from normal expectations to default\n
     * expectations\n
     *\n
     * @return self\n
     */\n
    public function byDefault()\n
    {\n
        foreach ($this->_mockery_expectations as $director) {\n
            $exps = $director->getExpectations();\n
            foreach ($exps as $exp) {\n
                $exp->byDefault();\n
            }\n
        }\n
        return $this;\n
    }\n
\n
    /**\n
     * Capture calls to this mock\n
     */\n
    public function __call($method, array $args)\n
    {\n
        return $this->_mockery_handleMethodCall($method, $args);\n
    }\n
\n
    public static function __callStatic($method, array $args)\n
    {\n
        return self::_mockery_handleStaticMethodCall($method, $args);\n
    }\n
\n
    /**\n
     * Forward calls to this magic method to the __call method\n
     */\n
    public function __toString()\n
    {\n
        return $this->__call('__toString', array());\n
    }\n
\n
    /**\n
     * Iterate across all expectation directors and validate each\n
     *\n
     * @throws \Mockery\CountValidator\Exception\n
     * @return void\n
     */\n
    public function mockery_verify()\n
    {\n
        if ($this->_mockery_verified) {\n
            return;\n
        }\n
        if (isset($this->_mockery_ignoreVerification)\n
            && $this->_mockery_ignoreVerification == true) {\n
            return;\n
        }\n
        $this->_mockery_verified = true;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $director->verify();\n
        }\n
    }\n
\n
    /**\n
     * Gets a list of exceptions thrown by this mock\n
     *\n
     * @return array\n
     */\n
    public function mockery_thrownExceptions()\n
    {\n
        return $this->_mockery_thrownExceptions;\n
    }\n
\n
    /**\n
     * Tear down tasks for this mock\n
     *\n
     * @return void\n
     */\n
    public function mockery_teardown()\n
    {\n
    }\n
\n
    /**\n
     * Fetch the next available allocation order number\n
     *\n
     * @return int\n
     */\n
    public function mockery_allocateOrder()\n
    {\n
        $this->_mockery_allocatedOrder += 1;\n
        return $this->_mockery_allocatedOrder;\n
    }\n
\n
    /**\n
     * Set ordering for a group\n
     *\n
     * @param mixed $group\n
     * @param int $order\n
     */\n
    public function mockery_setGroup($group, $order)\n
    {\n
        $this->_mockery_groups[$group] = $order;\n
    }\n
\n
    /**\n
     * Fetch array of ordered groups\n
     *\n
     * @return array\n
     */\n
    public function mockery_getGroups()\n
    {\n
        return $this->_mockery_groups;\n
    }\n
\n
    /**\n
     * Set current ordered number\n
     *\n
     * @param int $order\n
     */\n
    public function mockery_setCurrentOrder($order)\n
    {\n
        $this->_mockery_currentOrder = $order;\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Get current ordered number\n
     *\n
     * @return int\n
     */\n
    public function mockery_getCurrentOrder()\n
    {\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Validate the current mock's ordering\n
     *\n
     * @param string $method\n
     * @param int $order\n
     * @throws \Mockery\Exception\n
     * @return void\n
     */\n
    public function mockery_validateOrder($method, $order)\n
    {\n
        if ($order < $this->_mockery_currentOrder) {\n
            $exception = new \Mockery\Exception\InvalidOrderException(\n
                'Method ' . __CLASS__ . '::' . $method . '()'\n
                . ' called out of order: expected order '\n
                . $order . ', was ' . $this->_mockery_currentOrder\n
            );\n
            $exception->setMock($this)\n
                ->setMethodName($method)\n
                ->setExpectedOrder($order)\n
                ->setActualOrder($this->_mockery_currentOrder);\n
            throw $exception;\n
        }\n
        $this->mockery_setCurrentOrder($order);\n
    }\n
\n
    /**\n
     * Gets the count of expectations for this mock\n
     *\n
     * @return int\n
     */\n
    public function mockery_getExpectationCount()\n
    {\n
        $count = $this->_mockery_expectations_count;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $count += $director->getExpectationCount();\n
        }\n
        return $count;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_setExpectationsFor($method, \Mockery\ExpectationDirector $director)\n
    {\n
        $this->_mockery_expectations[$method] = $director;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_getExpectationsFor($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
    }\n
\n
    /**\n
     * Find an expectation matching the given method and arguments\n
     *\n
     * @var string $method\n
     * @var array $args\n
     * @return \Mockery\Expectation|null\n
     */\n
    public function mockery_findExpectation($method, array $args)\n
    {\n
        if (!isset($this->_mockery_expectations[$method])) {\n
            return null;\n
        }\n
        $director = $this->_mockery_expectations[$method];\n
\n
        return $director->findExpectation($args);\n
    }\n
\n
    /**\n
     * Return the container for this mock\n
     *\n
     * @return \Mockery\Container\n
     */\n
    public function mockery_getContainer()\n
    {\n
        return $this->_mockery_container;\n
    }\n
\n
    /**\n
     * Return the name for this mock\n
     *\n
     * @return string\n
     */\n
    public function mockery_getName()\n
    {\n
        return __CLASS__;\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    public function mockery_getMockableProperties()\n
    {\n
        return $this->_mockery_mockableProperties;\n
    }\n
\n
    public function __isset($name)\n
    {\n
        if (false === stripos($name, '_mockery_') && method_exists(get_parent_class($this), '__isset')) {\n
            return call_user_func('parent::__isset', $name);\n
        }\n
\n
        return false;\n
    }\n
\n
    public function mockery_getExpectations()\n
    {\n
        return $this->_mockery_expectations;\n
    }\n
\n
    /**\n
     * Calls a parent class method and returns the result. Used in a passthru\n
     * expectation where a real return value is required while still taking\n
     * advantage of expectation matching and call count verification.\n
     *\n
     * @param string $name\n
     * @param array $args\n
     * @return mixed\n
     */\n
    public function mockery_callSubjectMethod($name, array $args)\n
    {\n
        if (!method_exists($this, $name) && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $name, $args);\n
        }\n
        return call_user_func_array('parent::' . $name, $args);\n
    }\n
\n
    /**\n
     * @return string[]\n
     */\n
    public function mockery_getMockableMethods()\n
    {\n
        return $this->_mockery_mockableMethods;\n
    }\n
\n
    /**\n
     * @return bool\n
     */\n
    public function mockery_isAnonymous()\n
    {\n
        $rfc = new \ReflectionClass($this);\n
\n
        // HHVM has a Stringish interface\n
        $interfaces = array_filter($rfc->getInterfaces(), function ($i) {\n
            return $i->getName() !== "Stringish";\n
        });\n
        $onlyImplementsMock = 2 == count($interfaces);\n
\n
        return (false === $rfc->getParentClass()) && $onlyImplementsMock;\n
    }\n
\n
    public function mockery_isInstance()\n
    {\n
        return $this->_mockery_instanceMock;\n
    }\n
\n
    public function __wakeup()\n
    {\n
        /**\n
         * This does not add __wakeup method support. It's a blind method and any\n
         * expected __wakeup work will NOT be performed. It merely cuts off\n
         * annoying errors where a __wakeup exists but is not essential when\n
         * mocking\n
         */\n
    }\n
\n
    public function __destruct()\n
    {\n
        /**\n
         * Overrides real class destructor in case if class was created without original constructor\n
         */\n
    }\n
\n
    public function mockery_getMethod($name)\n
    {\n
        foreach ($this->mockery_getMethods() as $method) {\n
            if ($method->getName() == $name) {\n
                return $method;\n
            }\n
        }\n
\n
        return null;\n
    }\n
\n
    /**\n
     * @param string $name Method name.\n
     *\n
     * @return mixed Generated return value based on the declared return value of the named method.\n
     */\n
    public function mockery_returnValueForMethod($name)\n
    {\n
        if (version_compare(PHP_VERSION, '7.0.0-dev') < 0) {\n
            return;\n
        }\n
\n
        $rm = $this->mockery_getMethod($name);\n
        if (!$rm || !$rm->hasReturnType()) {\n
            return;\n
        }\n
\n
        $returnType = $rm->getReturnType();\n
\n
        // Default return value for methods with nullable type is null\n
        if ($returnType->allowsNull()) {\n
            return null;\n
        }\n
\n
        $type = PHP_VERSION_ID >= 70100 ? $returnType->getName() : (string) $returnType;\n
        switch ($type) {\n
            case '':       return;\n
            case 'string': return '';\n
            case 'int':    return 0;\n
            case 'float':  return 0.0;\n
            case 'bool':   return false;\n
            case 'array':  return [];\n
\n
            case 'callable':\n
            case 'Closure':\n
                return function () {\n
                };\n
\n
            case 'Traversable':\n
            case 'Generator':\n
                // Remove eval() when minimum version >=5.5\n
                $generator = eval('return function () { yield; };');\n
                return $generator();\n
\n
            case 'self':\n
                return \Mockery::mock($rm->getDeclaringClass()->getName());\n
\n
            case 'void':\n
                return null;\n
\n
            case 'object':\n
                if (version_compare(PHP_VERSION, '7.2.0-dev') >= 0) {\n
                    return \Mockery::mock();\n
                }\n
\n
            default:\n
                return \Mockery::mock($type);\n
        }\n
    }\n
\n
    public function shouldHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->atLeast()->once();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return $director;\n
    }\n
\n
    public function shouldHaveBeenCalled()\n
    {\n
        return $this->shouldHaveReceived("__invoke");\n
    }\n
\n
    public function shouldNotHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldNotHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->never();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return null;\n
    }\n
\n
    public function shouldNotHaveBeenCalled(array $args = null)\n
    {\n
        return $this->shouldNotHaveReceived("__invoke", $args);\n
    }\n
\n
    protected static function _mockery_handleStaticMethodCall($method, array $args)\n
    {\n
        $associatedRealObject = \Mockery::fetchMock(__CLASS__);\n
        try {\n
            return $associatedRealObject->__call($method, $args);\n
        } catch (BadMethodCallException $e) {\n
            throw new BadMethodCallException(\n
                'Static method ' . $associatedRealObject->mockery_getName() . '::' . $method\n
                . '() does not exist on this mock object',\n
                null,\n
                $e\n
            );\n
        }\n
    }\n
\n
    protected function _mockery_getReceivedMethodCalls()\n
    {\n
        return $this->_mockery_receivedMethodCalls ?: $this->_mockery_receivedMethodCalls = new \Mockery\ReceivedMethodCalls();\n
    }\n
\n
    /**\n
     * Called when an instance Mock was created and its constructor is getting called\n
     *\n
     * @see \Mockery\Generator\StringManipulation\Pass\InstanceMockPass\n
     * @param array $args\n
     */\n
    protected function _mockery_constructorCalled(array $args)\n
    {\n
        if (!isset($this->_mockery_expectations['__construct']) /* _mockery_handleMethodCall runs the other checks */) {\n
            return;\n
        }\n
        $this->_mockery_handleMethodCall('__construct', $args);\n
    }\n
\n
    protected function _mockery_findExpectedMethodHandler($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
\n
        $lowerCasedMockeryExpectations = array_change_key_case($this->_mockery_expectations, CASE_LOWER);\n
        $lowerCasedMethod = strtolower($method);\n
\n
        if (isset($lowerCasedMockeryExpectations[$lowerCasedMethod])) {\n
            return $lowerCasedMockeryExpectations[$lowerCasedMethod];\n
        }\n
\n
        return null;\n
    }\n
\n
    protected function _mockery_handleMethodCall($method, array $args)\n
    {\n
        $this->_mockery_getReceivedMethodCalls()->push(new \Mockery\MethodCall($method, $args));\n
\n
        $rm = $this->mockery_getMethod($method);\n
        if ($rm && $rm->isProtected() && !$this->_mockery_allowMockingProtectedMethods) {\n
            if ($rm->isAbstract()) {\n
                return;\n
            }\n
\n
            try {\n
                $prototype = $rm->getPrototype();\n
                if ($prototype->isAbstract()) {\n
                    return;\n
                }\n
            } catch (\ReflectionException $re) {\n
                // noop - there is no hasPrototype method\n
            }\n
\n
            return call_user_func_array("parent::$method", $args);\n
        }\n
\n
        $handler = $this->_mockery_findExpectedMethodHandler($method);\n
\n
        if ($handler !== null && !$this->_mockery_disableExpectationMatching) {\n
            try {\n
                return $handler->call($args);\n
            } catch (\Mockery\Exception\NoMatchingExpectationException $e) {\n
                if (!$this->_mockery_ignoreMissing && !$this->_mockery_deferMissing) {\n
                    throw $e;\n
                }\n
            }\n
        }\n
\n
        if (!is_null($this->_mockery_partial) &&\n
            (method_exists($this->_mockery_partial, $method) || method_exists($this->_mockery_partial, '__call'))\n
        ) {\n
            return call_user_func_array(array($this->_mockery_partial, $method), $args);\n
        } elseif ($this->_mockery_deferMissing && is_callable("parent::$method")\n
            && (!$this->hasMethodOverloadingInParentClass() || method_exists(get_parent_class($this), $method))) {\n
            return call_user_func_array("parent::$method", $args);\n
        } elseif ($this->_mockery_deferMissing && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $method, $args);\n
        } elseif ($method == '__toString') {\n
            // __toString is special because we force its addition to the class API regardless of the\n
            // original implementation.  Thus, we should always return a string rather than honor\n
            // _mockery_ignoreMissing and break the API with an error.\n
            return sprintf("%s#%s", __CLASS__, spl_object_hash($this));\n
        } elseif ($this->_mockery_ignoreMissing) {\n
            if (\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed() || (method_exists($this->_mockery_partial, $method) || is_callable("parent::$method"))) {\n
                if ($this->_mockery_defaultReturnValue instanceof \Mockery\Undefined) {\n
                    return call_user_func_array(array($this->_mockery_defaultReturnValue, $method), $args);\n
                } elseif (null === $this->_mockery_defaultReturnValue) {\n
                    return $this->mockery_returnValueForMethod($method);\n
                }\n
\n
                return $this->_mockery_defaultReturnValue;\n
            }\n
        }\n
\n
        $message = 'Method ' . __CLASS__ . '::' . $method .\n
            '() does not exist on this mock object';\n
\n
        if (!is_null($rm)) {\n
            $message = 'Received ' . __CLASS__ .\n
                '::' . $method . '(), but no expectations were specified';\n
        }\n
\n
        $bmce = new BadMethodCallException($message);\n
        $this->_mockery_thrownExceptions[] = $bmce;\n
        throw $bmce;\n
    }\n
\n
    /**\n
     * Uses reflection to get the list of all\n
     * methods within the current mock object\n
     *\n
     * @return array\n
     */\n
    protected function mockery_getMethods()\n
    {\n
        if (static::$_mockery_methods && \Mockery::getConfiguration()->reflectionCacheEnabled()) {\n
            return static::$_mockery_methods;\n
        }\n
\n
        if (isset($this->_mockery_partial)) {\n
            $reflected = new \ReflectionObject($this->_mockery_partial);\n
        } else {\n
            $reflected = new \ReflectionClass($this);\n
        }\n
\n
        return static::$_mockery_methods = $reflected->getMethods();\n
    }\n
\n
    private function hasMethodOverloadingInParentClass()\n
    {\n
        // if there's __call any name would be callable\n
        return is_callable('parent::aFunctionNameThatNoOneWouldEverUseInRealLife12345');\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    private function getNonPublicMethods()\n
    {\n
        return array_map(\n
            function ($method) {\n
                return $method->getName();\n
            },\n
            array_filter($this->mockery_getMethods(), function ($method) {\n
                return !$method->isPublic();\n
            })\n
        );\n
    }\n
}\n
'
                                        )
                                        '3d11e8eeb73d29cd4e692e0020d8148b' => Mockery\Generator\MockDefinition Object &0000000021e1fe95000000005777935d (
                                            'config' => Mockery\Generator\MockConfiguration Object &0000000021e1fe9b000000005777935d (
                                                'targetClass' => Mockery\Generator\UndefinedTargetClass Object &0000000021e1fe96000000005777935d (
                                                    'name' => '\WC_Cart'
                                                )
                                                'targetClassName' => '\WC_Cart'
                                                'targetInterfaces' => Array &2150 ()
                                                'targetInterfaceNames' => Array &2151 ()
                                                'targetTraits' => Array &2152 ()
                                                'targetTraitNames' => Array &2153 ()
                                                'targetObject' => null
                                                'name' => 'Mockery_6__WC_Cart'
                                                'blackListedMethods' => Array &2154 (
                                                    0 => '__call'
                                                    1 => '__callStatic'
                                                    2 => '__clone'
                                                    3 => '__wakeup'
                                                    4 => '__set'
                                                    5 => '__get'
                                                    6 => '__toString'
                                                    7 => '__isset'
                                                    8 => '__destruct'
                                                    9 => '__debugInfo'
                                                    10 => '__halt_compiler'
                                                    30 => 'empty'
                                                    37 => 'eval'
                                                    53 => 'isset'
                                                    70 => 'unset'
                                                )
                                                'whiteListedMethods' => Array &2155 ()
                                                'instanceMock' => false
                                                'parameterOverrides' => Array &2156 ()
                                                'allMethods' => Array &2157 ()
                                                'mockOriginalDestructor' => true
                                                'constantsMap' => Array &2158 ()
                                            )
                                            'code' => '<?php\n
/**\n
 * Mockery\n
 *\n
 * LICENSE\n
 *\n
 * This source file is subject to the new BSD license that is bundled\n
 * with this package in the file LICENSE.txt.\n
 * It is also available through the world-wide-web at this URL:\n
 * http://github.com/padraic/mockery/blob/master/LICENSE\n
 * If you did not receive a copy of the license and are unable to\n
 * obtain it through the world-wide-web, please send an email\n
 * to padraic@php.net so we can send you a copy immediately.\n
 *\n
 * @category   Mockery\n
 * @package    Mockery\n
 * @copyright  Copyright (c) 2010 Pádraic Brady (http://blog.astrumfutura.com)\n
 * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License\n
 */\n
\n
\n
\n
use Mockery\HigherOrderMessage;\n
use Mockery\MockInterface;\n
use Mockery\LegacyMockInterface;\n
use Mockery\ExpectsHigherOrderMessage;\n
use Mockery\Exception\BadMethodCallException;\n
\n
class Mockery_6__WC_Cart extends \WC_Cart implements MockInterface\n
{\n
    /**\n
     * Stores an array of all expectation directors for this mock\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_expectations = array();\n
\n
    /**\n
     * Stores an inital number of expectations that can be manipulated\n
     * while using the getter method.\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_expectations_count = 0;\n
\n
    /**\n
     * Flag to indicate whether we can ignore method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_ignoreMissing = false;\n
\n
    /**\n
     * Flag to indicate whether we can defer method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_deferMissing = false;\n
\n
    /**\n
     * Flag to indicate whether this mock was verified\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_verified = false;\n
\n
    /**\n
     * Given name of the mock\n
     *\n
     * @var string\n
     */\n
    protected $_mockery_name = null;\n
\n
    /**\n
     * Order number of allocation\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_allocatedOrder = 0;\n
\n
    /**\n
     * Current ordered number\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_currentOrder = 0;\n
\n
    /**\n
     * Ordered groups\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_groups = array();\n
\n
    /**\n
     * Mock container containing this mock object\n
     *\n
     * @var \Mockery\Container\n
     */\n
    protected $_mockery_container = null;\n
\n
    /**\n
     * Instance of a core object on which methods are called in the event\n
     * it has been set, and an expectation for one of the object's methods\n
     * does not exist. This implements a simple partial mock proxy system.\n
     *\n
     * @var object\n
     */\n
    protected $_mockery_partial = null;\n
\n
    /**\n
     * Flag to indicate we should ignore all expectations temporarily. Used\n
     * mainly to prevent expectation matching when in the middle of a mock\n
     * object recording session.\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_disableExpectationMatching = false;\n
\n
    /**\n
     * Stores all stubbed public methods separate from any on-object public\n
     * properties that may exist.\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_mockableProperties = array();\n
\n
    /**\n
     * @var array\n
     */\n
    protected $_mockery_mockableMethods = array();\n
\n
    /**\n
     * Just a local cache for this mock's target's methods\n
     *\n
     * @var \ReflectionMethod[]\n
     */\n
    protected static $_mockery_methods;\n
\n
    protected $_mockery_allowMockingProtectedMethods = false;\n
\n
    protected $_mockery_receivedMethodCalls;\n
\n
    /**\n
     * If shouldIgnoreMissing is called, this value will be returned on all calls to missing methods\n
     * @var mixed\n
     */\n
    protected $_mockery_defaultReturnValue = null;\n
\n
    /**\n
     * Tracks internally all the bad method call exceptions that happened during runtime\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_thrownExceptions = [];\n
\n
    protected $_mockery_instanceMock = true;\n
\n
    /**\n
     * We want to avoid constructors since class is copied to Generator.php\n
     * for inclusion on extending class definitions.\n
     *\n
     * @param \Mockery\Container $container\n
     * @param object $partialObject\n
     * @param bool $instanceMock\n
     * @return void\n
     */\n
    public function mockery_init(\Mockery\Container $container = null, $partialObject = null, $instanceMock = true)\n
    {\n
        if (is_null($container)) {\n
            $container = new \Mockery\Container;\n
        }\n
        $this->_mockery_container = $container;\n
        if (!is_null($partialObject)) {\n
            $this->_mockery_partial = $partialObject;\n
        }\n
\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isPublic()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_instanceMock = $instanceMock;\n
    }\n
\n
    /**\n
     * Set expected method calls\n
     *\n
     * @param mixed ...$methodNames one or many methods that are expected to be called in this mock\n
     *\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldReceive");\n
        }\n
\n
        foreach ($methodNames as $method) {\n
            if ("" == $method) {\n
                throw new \InvalidArgumentException("Received empty method name");\n
            }\n
        }\n
\n
        $self = $this;\n
        $allowMockingProtectedMethods = $this->_mockery_allowMockingProtectedMethods;\n
\n
        $lastExpectation = \Mockery::parseShouldReturnArgs(\n
            $this, $methodNames, function ($method) use ($self, $allowMockingProtectedMethods) {\n
                $rm = $self->mockery_getMethod($method);\n
                if ($rm) {\n
                    if ($rm->isPrivate()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a private method");\n
                    }\n
                    if (!$allowMockingProtectedMethods && $rm->isProtected()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a protected method and mocking protected methods is not enabled for the currently used mock object. Use shouldAllowMockingProtectedMethods() to enable mocking of protected methods.");\n
                    }\n
                }\n
\n
                $director = $self->mockery_getExpectationsFor($method);\n
                if (!$director) {\n
                    $director = new \Mockery\ExpectationDirector($method, $self);\n
                    $self->mockery_setExpectationsFor($method, $director);\n
                }\n
                $expectation = new \Mockery\Expectation($self, $method);\n
                $director->addExpectation($expectation);\n
                return $expectation;\n
            }\n
        );\n
        return $lastExpectation;\n
    }\n
\n
    // start method allows\n
    /**\n
     * @param mixed $something  String method name or map of method => return\n
     * @return self|\Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function allows($something = [])\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something);\n
        }\n
\n
        if (empty($something)) {\n
            return $this->shouldReceive();\n
        }\n
\n
        foreach ($something as $method => $returnValue) {\n
            $this->shouldReceive($method)->andReturn($returnValue);\n
        }\n
\n
        return $this;\n
    }\n
    // end method allows\n
\n
    // start method expects\n
    /**\n
    /**\n
     * @param mixed $something  String method name (optional)\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|ExpectsHigherOrderMessage\n
     */\n
    public function expects($something = null)\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something)->once();\n
        }\n
\n
        return new ExpectsHigherOrderMessage($this);\n
    }\n
    // end method expects\n
\n
    /**\n
     * Shortcut method for setting an expectation that a method should not be called.\n
     *\n
     * @param array ...$methodNames one or many methods that are expected not to be called in this mock\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldNotReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldNotReceive");\n
        }\n
\n
        $expectation = call_user_func_array(array($this, 'shouldReceive'), $methodNames);\n
        $expectation->never();\n
        return $expectation;\n
    }\n
\n
    /**\n
     * Allows additional methods to be mocked that do not explicitly exist on mocked class\n
     * @param String $method name of the method to be mocked\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingMethod($method)\n
    {\n
        $this->_mockery_mockableMethods[] = $method;\n
        return $this;\n
    }\n
\n
    /**\n
     * Set mock to ignore unexpected methods and return Undefined class\n
     * @param mixed $returnValue the default return value for calls to missing functions on this mock\n
     * @return Mock\n
     */\n
    public function shouldIgnoreMissing($returnValue = null)\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = $returnValue;\n
        return $this;\n
    }\n
\n
    public function asUndefined()\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = new \Mockery\Undefined;\n
        return $this;\n
    }\n
\n
    /**\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingProtectedMethods()\n
    {\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isProtected()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_allowMockingProtectedMethods = true;\n
        return $this;\n
    }\n
\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * This is particularly useless for this class, as it doesn't have a parent,\n
     * but included for completeness\n
     *\n
     * @deprecated 2.0.0 Please use makePartial() instead\n
     *\n
     * @return Mock\n
     */\n
    public function shouldDeferMissing()\n
    {\n
        return $this->makePartial();\n
    }\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * It was an alias for shouldDeferMissing(), which will be removed\n
     * in 2.0.0.\n
     *\n
     * @return Mock\n
     */\n
    public function makePartial()\n
    {\n
        $this->_mockery_deferMissing = true;\n
        return $this;\n
    }\n
\n
    /**\n
     * In the event shouldReceive() accepting one or more methods/returns,\n
     * this method will switch them from normal expectations to default\n
     * expectations\n
     *\n
     * @return self\n
     */\n
    public function byDefault()\n
    {\n
        foreach ($this->_mockery_expectations as $director) {\n
            $exps = $director->getExpectations();\n
            foreach ($exps as $exp) {\n
                $exp->byDefault();\n
            }\n
        }\n
        return $this;\n
    }\n
\n
    /**\n
     * Capture calls to this mock\n
     */\n
    public function __call($method, array $args)\n
    {\n
        return $this->_mockery_handleMethodCall($method, $args);\n
    }\n
\n
    public static function __callStatic($method, array $args)\n
    {\n
        return self::_mockery_handleStaticMethodCall($method, $args);\n
    }\n
\n
    /**\n
     * Forward calls to this magic method to the __call method\n
     */\n
    public function __toString()\n
    {\n
        return $this->__call('__toString', array());\n
    }\n
\n
    /**\n
     * Iterate across all expectation directors and validate each\n
     *\n
     * @throws \Mockery\CountValidator\Exception\n
     * @return void\n
     */\n
    public function mockery_verify()\n
    {\n
        if ($this->_mockery_verified) {\n
            return;\n
        }\n
        if (isset($this->_mockery_ignoreVerification)\n
            && $this->_mockery_ignoreVerification == true) {\n
            return;\n
        }\n
        $this->_mockery_verified = true;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $director->verify();\n
        }\n
    }\n
\n
    /**\n
     * Gets a list of exceptions thrown by this mock\n
     *\n
     * @return array\n
     */\n
    public function mockery_thrownExceptions()\n
    {\n
        return $this->_mockery_thrownExceptions;\n
    }\n
\n
    /**\n
     * Tear down tasks for this mock\n
     *\n
     * @return void\n
     */\n
    public function mockery_teardown()\n
    {\n
    }\n
\n
    /**\n
     * Fetch the next available allocation order number\n
     *\n
     * @return int\n
     */\n
    public function mockery_allocateOrder()\n
    {\n
        $this->_mockery_allocatedOrder += 1;\n
        return $this->_mockery_allocatedOrder;\n
    }\n
\n
    /**\n
     * Set ordering for a group\n
     *\n
     * @param mixed $group\n
     * @param int $order\n
     */\n
    public function mockery_setGroup($group, $order)\n
    {\n
        $this->_mockery_groups[$group] = $order;\n
    }\n
\n
    /**\n
     * Fetch array of ordered groups\n
     *\n
     * @return array\n
     */\n
    public function mockery_getGroups()\n
    {\n
        return $this->_mockery_groups;\n
    }\n
\n
    /**\n
     * Set current ordered number\n
     *\n
     * @param int $order\n
     */\n
    public function mockery_setCurrentOrder($order)\n
    {\n
        $this->_mockery_currentOrder = $order;\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Get current ordered number\n
     *\n
     * @return int\n
     */\n
    public function mockery_getCurrentOrder()\n
    {\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Validate the current mock's ordering\n
     *\n
     * @param string $method\n
     * @param int $order\n
     * @throws \Mockery\Exception\n
     * @return void\n
     */\n
    public function mockery_validateOrder($method, $order)\n
    {\n
        if ($order < $this->_mockery_currentOrder) {\n
            $exception = new \Mockery\Exception\InvalidOrderException(\n
                'Method ' . __CLASS__ . '::' . $method . '()'\n
                . ' called out of order: expected order '\n
                . $order . ', was ' . $this->_mockery_currentOrder\n
            );\n
            $exception->setMock($this)\n
                ->setMethodName($method)\n
                ->setExpectedOrder($order)\n
                ->setActualOrder($this->_mockery_currentOrder);\n
            throw $exception;\n
        }\n
        $this->mockery_setCurrentOrder($order);\n
    }\n
\n
    /**\n
     * Gets the count of expectations for this mock\n
     *\n
     * @return int\n
     */\n
    public function mockery_getExpectationCount()\n
    {\n
        $count = $this->_mockery_expectations_count;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $count += $director->getExpectationCount();\n
        }\n
        return $count;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_setExpectationsFor($method, \Mockery\ExpectationDirector $director)\n
    {\n
        $this->_mockery_expectations[$method] = $director;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_getExpectationsFor($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
    }\n
\n
    /**\n
     * Find an expectation matching the given method and arguments\n
     *\n
     * @var string $method\n
     * @var array $args\n
     * @return \Mockery\Expectation|null\n
     */\n
    public function mockery_findExpectation($method, array $args)\n
    {\n
        if (!isset($this->_mockery_expectations[$method])) {\n
            return null;\n
        }\n
        $director = $this->_mockery_expectations[$method];\n
\n
        return $director->findExpectation($args);\n
    }\n
\n
    /**\n
     * Return the container for this mock\n
     *\n
     * @return \Mockery\Container\n
     */\n
    public function mockery_getContainer()\n
    {\n
        return $this->_mockery_container;\n
    }\n
\n
    /**\n
     * Return the name for this mock\n
     *\n
     * @return string\n
     */\n
    public function mockery_getName()\n
    {\n
        return __CLASS__;\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    public function mockery_getMockableProperties()\n
    {\n
        return $this->_mockery_mockableProperties;\n
    }\n
\n
    public function __isset($name)\n
    {\n
        if (false === stripos($name, '_mockery_') && method_exists(get_parent_class($this), '__isset')) {\n
            return call_user_func('parent::__isset', $name);\n
        }\n
\n
        return false;\n
    }\n
\n
    public function mockery_getExpectations()\n
    {\n
        return $this->_mockery_expectations;\n
    }\n
\n
    /**\n
     * Calls a parent class method and returns the result. Used in a passthru\n
     * expectation where a real return value is required while still taking\n
     * advantage of expectation matching and call count verification.\n
     *\n
     * @param string $name\n
     * @param array $args\n
     * @return mixed\n
     */\n
    public function mockery_callSubjectMethod($name, array $args)\n
    {\n
        if (!method_exists($this, $name) && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $name, $args);\n
        }\n
        return call_user_func_array('parent::' . $name, $args);\n
    }\n
\n
    /**\n
     * @return string[]\n
     */\n
    public function mockery_getMockableMethods()\n
    {\n
        return $this->_mockery_mockableMethods;\n
    }\n
\n
    /**\n
     * @return bool\n
     */\n
    public function mockery_isAnonymous()\n
    {\n
        $rfc = new \ReflectionClass($this);\n
\n
        // HHVM has a Stringish interface\n
        $interfaces = array_filter($rfc->getInterfaces(), function ($i) {\n
            return $i->getName() !== "Stringish";\n
        });\n
        $onlyImplementsMock = 2 == count($interfaces);\n
\n
        return (false === $rfc->getParentClass()) && $onlyImplementsMock;\n
    }\n
\n
    public function mockery_isInstance()\n
    {\n
        return $this->_mockery_instanceMock;\n
    }\n
\n
    public function __wakeup()\n
    {\n
        /**\n
         * This does not add __wakeup method support. It's a blind method and any\n
         * expected __wakeup work will NOT be performed. It merely cuts off\n
         * annoying errors where a __wakeup exists but is not essential when\n
         * mocking\n
         */\n
    }\n
\n
    public function __destruct()\n
    {\n
        /**\n
         * Overrides real class destructor in case if class was created without original constructor\n
         */\n
    }\n
\n
    public function mockery_getMethod($name)\n
    {\n
        foreach ($this->mockery_getMethods() as $method) {\n
            if ($method->getName() == $name) {\n
                return $method;\n
            }\n
        }\n
\n
        return null;\n
    }\n
\n
    /**\n
     * @param string $name Method name.\n
     *\n
     * @return mixed Generated return value based on the declared return value of the named method.\n
     */\n
    public function mockery_returnValueForMethod($name)\n
    {\n
        if (version_compare(PHP_VERSION, '7.0.0-dev') < 0) {\n
            return;\n
        }\n
\n
        $rm = $this->mockery_getMethod($name);\n
        if (!$rm || !$rm->hasReturnType()) {\n
            return;\n
        }\n
\n
        $returnType = $rm->getReturnType();\n
\n
        // Default return value for methods with nullable type is null\n
        if ($returnType->allowsNull()) {\n
            return null;\n
        }\n
\n
        $type = PHP_VERSION_ID >= 70100 ? $returnType->getName() : (string) $returnType;\n
        switch ($type) {\n
            case '':       return;\n
            case 'string': return '';\n
            case 'int':    return 0;\n
            case 'float':  return 0.0;\n
            case 'bool':   return false;\n
            case 'array':  return [];\n
\n
            case 'callable':\n
            case 'Closure':\n
                return function () {\n
                };\n
\n
            case 'Traversable':\n
            case 'Generator':\n
                // Remove eval() when minimum version >=5.5\n
                $generator = eval('return function () { yield; };');\n
                return $generator();\n
\n
            case 'self':\n
                return \Mockery::mock($rm->getDeclaringClass()->getName());\n
\n
            case 'void':\n
                return null;\n
\n
            case 'object':\n
                if (version_compare(PHP_VERSION, '7.2.0-dev') >= 0) {\n
                    return \Mockery::mock();\n
                }\n
\n
            default:\n
                return \Mockery::mock($type);\n
        }\n
    }\n
\n
    public function shouldHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->atLeast()->once();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return $director;\n
    }\n
\n
    public function shouldHaveBeenCalled()\n
    {\n
        return $this->shouldHaveReceived("__invoke");\n
    }\n
\n
    public function shouldNotHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldNotHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->never();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return null;\n
    }\n
\n
    public function shouldNotHaveBeenCalled(array $args = null)\n
    {\n
        return $this->shouldNotHaveReceived("__invoke", $args);\n
    }\n
\n
    protected static function _mockery_handleStaticMethodCall($method, array $args)\n
    {\n
        $associatedRealObject = \Mockery::fetchMock(__CLASS__);\n
        try {\n
            return $associatedRealObject->__call($method, $args);\n
        } catch (BadMethodCallException $e) {\n
            throw new BadMethodCallException(\n
                'Static method ' . $associatedRealObject->mockery_getName() . '::' . $method\n
                . '() does not exist on this mock object',\n
                null,\n
                $e\n
            );\n
        }\n
    }\n
\n
    protected function _mockery_getReceivedMethodCalls()\n
    {\n
        return $this->_mockery_receivedMethodCalls ?: $this->_mockery_receivedMethodCalls = new \Mockery\ReceivedMethodCalls();\n
    }\n
\n
    /**\n
     * Called when an instance Mock was created and its constructor is getting called\n
     *\n
     * @see \Mockery\Generator\StringManipulation\Pass\InstanceMockPass\n
     * @param array $args\n
     */\n
    protected function _mockery_constructorCalled(array $args)\n
    {\n
        if (!isset($this->_mockery_expectations['__construct']) /* _mockery_handleMethodCall runs the other checks */) {\n
            return;\n
        }\n
        $this->_mockery_handleMethodCall('__construct', $args);\n
    }\n
\n
    protected function _mockery_findExpectedMethodHandler($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
\n
        $lowerCasedMockeryExpectations = array_change_key_case($this->_mockery_expectations, CASE_LOWER);\n
        $lowerCasedMethod = strtolower($method);\n
\n
        if (isset($lowerCasedMockeryExpectations[$lowerCasedMethod])) {\n
            return $lowerCasedMockeryExpectations[$lowerCasedMethod];\n
        }\n
\n
        return null;\n
    }\n
\n
    protected function _mockery_handleMethodCall($method, array $args)\n
    {\n
        $this->_mockery_getReceivedMethodCalls()->push(new \Mockery\MethodCall($method, $args));\n
\n
        $rm = $this->mockery_getMethod($method);\n
        if ($rm && $rm->isProtected() && !$this->_mockery_allowMockingProtectedMethods) {\n
            if ($rm->isAbstract()) {\n
                return;\n
            }\n
\n
            try {\n
                $prototype = $rm->getPrototype();\n
                if ($prototype->isAbstract()) {\n
                    return;\n
                }\n
            } catch (\ReflectionException $re) {\n
                // noop - there is no hasPrototype method\n
            }\n
\n
            return call_user_func_array("parent::$method", $args);\n
        }\n
\n
        $handler = $this->_mockery_findExpectedMethodHandler($method);\n
\n
        if ($handler !== null && !$this->_mockery_disableExpectationMatching) {\n
            try {\n
                return $handler->call($args);\n
            } catch (\Mockery\Exception\NoMatchingExpectationException $e) {\n
                if (!$this->_mockery_ignoreMissing && !$this->_mockery_deferMissing) {\n
                    throw $e;\n
                }\n
            }\n
        }\n
\n
        if (!is_null($this->_mockery_partial) &&\n
            (method_exists($this->_mockery_partial, $method) || method_exists($this->_mockery_partial, '__call'))\n
        ) {\n
            return call_user_func_array(array($this->_mockery_partial, $method), $args);\n
        } elseif ($this->_mockery_deferMissing && is_callable("parent::$method")\n
            && (!$this->hasMethodOverloadingInParentClass() || method_exists(get_parent_class($this), $method))) {\n
            return call_user_func_array("parent::$method", $args);\n
        } elseif ($this->_mockery_deferMissing && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $method, $args);\n
        } elseif ($method == '__toString') {\n
            // __toString is special because we force its addition to the class API regardless of the\n
            // original implementation.  Thus, we should always return a string rather than honor\n
            // _mockery_ignoreMissing and break the API with an error.\n
            return sprintf("%s#%s", __CLASS__, spl_object_hash($this));\n
        } elseif ($this->_mockery_ignoreMissing) {\n
            if (\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed() || (method_exists($this->_mockery_partial, $method) || is_callable("parent::$method"))) {\n
                if ($this->_mockery_defaultReturnValue instanceof \Mockery\Undefined) {\n
                    return call_user_func_array(array($this->_mockery_defaultReturnValue, $method), $args);\n
                } elseif (null === $this->_mockery_defaultReturnValue) {\n
                    return $this->mockery_returnValueForMethod($method);\n
                }\n
\n
                return $this->_mockery_defaultReturnValue;\n
            }\n
        }\n
\n
        $message = 'Method ' . __CLASS__ . '::' . $method .\n
            '() does not exist on this mock object';\n
\n
        if (!is_null($rm)) {\n
            $message = 'Received ' . __CLASS__ .\n
                '::' . $method . '(), but no expectations were specified';\n
        }\n
\n
        $bmce = new BadMethodCallException($message);\n
        $this->_mockery_thrownExceptions[] = $bmce;\n
        throw $bmce;\n
    }\n
\n
    /**\n
     * Uses reflection to get the list of all\n
     * methods within the current mock object\n
     *\n
     * @return array\n
     */\n
    protected function mockery_getMethods()\n
    {\n
        if (static::$_mockery_methods && \Mockery::getConfiguration()->reflectionCacheEnabled()) {\n
            return static::$_mockery_methods;\n
        }\n
\n
        if (isset($this->_mockery_partial)) {\n
            $reflected = new \ReflectionObject($this->_mockery_partial);\n
        } else {\n
            $reflected = new \ReflectionClass($this);\n
        }\n
\n
        return static::$_mockery_methods = $reflected->getMethods();\n
    }\n
\n
    private function hasMethodOverloadingInParentClass()\n
    {\n
        // if there's __call any name would be callable\n
        return is_callable('parent::aFunctionNameThatNoOneWouldEverUseInRealLife12345');\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    private function getNonPublicMethods()\n
    {\n
        return array_map(\n
            function ($method) {\n
                return $method->getName();\n
            },\n
            array_filter($this->mockery_getMethods(), function ($method) {\n
                return !$method->isPublic();\n
            })\n
        );\n
    }\n
}\n
'
                                        )
                                        'c04952abe7d14a4179611ec64a046c17' => Mockery\Generator\MockDefinition Object &0000000021e1fe82000000005777935d (
                                            'config' => Mockery\Generator\MockConfiguration Object &0000000021e1fe9e000000005777935d (
                                                'targetClass' => Mockery\Generator\DefinedTargetClass Object &0000000021e1fe92000000005777935d (
                                                    'rfc' => ReflectionClass Object &0000000021e1fe8f000000005777935d (
                                                        'name' => 'Inpsyde\PayPalCommerce\ApiClient\Factory\AmountFactory'
                                                    )
                                                )
                                                'targetClassName' => '\Inpsyde\PayPalCommerce\ApiClient\Factory\AmountFactory'
                                                'targetInterfaces' => Array &2159 ()
                                                'targetInterfaceNames' => Array &2160 ()
                                                'targetTraits' => Array &2161 ()
                                                'targetTraitNames' => Array &2162 ()
                                                'targetObject' => null
                                                'name' => 'Mockery_7_Inpsyde_PayPalCommerce_ApiClient_Factory_AmountFactory'
                                                'blackListedMethods' => Array &2163 (
                                                    0 => '__call'
                                                    1 => '__callStatic'
                                                    2 => '__clone'
                                                    3 => '__wakeup'
                                                    4 => '__set'
                                                    5 => '__get'
                                                    6 => '__toString'
                                                    7 => '__isset'
                                                    8 => '__destruct'
                                                    9 => '__debugInfo'
                                                    10 => '__halt_compiler'
                                                    30 => 'empty'
                                                    37 => 'eval'
                                                    53 => 'isset'
                                                    70 => 'unset'
                                                )
                                                'whiteListedMethods' => Array &2164 ()
                                                'instanceMock' => false
                                                'parameterOverrides' => Array &2165 ()
                                                'allMethods' => Array &2166 (
                                                    0 => Mockery\Generator\Method Object &0000000021e1fe88000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fe8d000000005777935d (
                                                            'name' => '__construct'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Factory\AmountFactory'
                                                        )
                                                    )
                                                    1 => Mockery\Generator\Method Object &0000000021e1fe87000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fe8c000000005777935d (
                                                            'name' => 'fromWcCart'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Factory\AmountFactory'
                                                        )
                                                    )
                                                    2 => Mockery\Generator\Method Object &0000000021e1fe86000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fe8b000000005777935d (
                                                            'name' => 'fromWcOrder'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Factory\AmountFactory'
                                                        )
                                                    )
                                                    3 => Mockery\Generator\Method Object &0000000021e1fe85000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fe8a000000005777935d (
                                                            'name' => 'fromPayPalResponse'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Factory\AmountFactory'
                                                        )
                                                    )
                                                    4 => Mockery\Generator\Method Object &0000000021e1fe84000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fe89000000005777935d (
                                                            'name' => 'breakDown'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Factory\AmountFactory'
                                                        )
                                                    )
                                                )
                                                'mockOriginalDestructor' => true
                                                'constantsMap' => Array &2167 ()
                                            )
                                            'code' => '<?php\n
/**\n
 * Mockery\n
 *\n
 * LICENSE\n
 *\n
 * This source file is subject to the new BSD license that is bundled\n
 * with this package in the file LICENSE.txt.\n
 * It is also available through the world-wide-web at this URL:\n
 * http://github.com/padraic/mockery/blob/master/LICENSE\n
 * If you did not receive a copy of the license and are unable to\n
 * obtain it through the world-wide-web, please send an email\n
 * to padraic@php.net so we can send you a copy immediately.\n
 *\n
 * @category   Mockery\n
 * @package    Mockery\n
 * @copyright  Copyright (c) 2010 Pádraic Brady (http://blog.astrumfutura.com)\n
 * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License\n
 */\n
\n
\n
\n
use Mockery\HigherOrderMessage;\n
use Mockery\MockInterface;\n
use Mockery\LegacyMockInterface;\n
use Mockery\ExpectsHigherOrderMessage;\n
use Mockery\Exception\BadMethodCallException;\n
\n
class Mockery_7_Inpsyde_PayPalCommerce_ApiClient_Factory_AmountFactory extends \Inpsyde\PayPalCommerce\ApiClient\Factory\AmountFactory implements MockInterface\n
{\n
    /**\n
     * Stores an array of all expectation directors for this mock\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_expectations = array();\n
\n
    /**\n
     * Stores an inital number of expectations that can be manipulated\n
     * while using the getter method.\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_expectations_count = 0;\n
\n
    /**\n
     * Flag to indicate whether we can ignore method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_ignoreMissing = false;\n
\n
    /**\n
     * Flag to indicate whether we can defer method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_deferMissing = false;\n
\n
    /**\n
     * Flag to indicate whether this mock was verified\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_verified = false;\n
\n
    /**\n
     * Given name of the mock\n
     *\n
     * @var string\n
     */\n
    protected $_mockery_name = null;\n
\n
    /**\n
     * Order number of allocation\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_allocatedOrder = 0;\n
\n
    /**\n
     * Current ordered number\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_currentOrder = 0;\n
\n
    /**\n
     * Ordered groups\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_groups = array();\n
\n
    /**\n
     * Mock container containing this mock object\n
     *\n
     * @var \Mockery\Container\n
     */\n
    protected $_mockery_container = null;\n
\n
    /**\n
     * Instance of a core object on which methods are called in the event\n
     * it has been set, and an expectation for one of the object's methods\n
     * does not exist. This implements a simple partial mock proxy system.\n
     *\n
     * @var object\n
     */\n
    protected $_mockery_partial = null;\n
\n
    /**\n
     * Flag to indicate we should ignore all expectations temporarily. Used\n
     * mainly to prevent expectation matching when in the middle of a mock\n
     * object recording session.\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_disableExpectationMatching = false;\n
\n
    /**\n
     * Stores all stubbed public methods separate from any on-object public\n
     * properties that may exist.\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_mockableProperties = array();\n
\n
    /**\n
     * @var array\n
     */\n
    protected $_mockery_mockableMethods = array();\n
\n
    /**\n
     * Just a local cache for this mock's target's methods\n
     *\n
     * @var \ReflectionMethod[]\n
     */\n
    protected static $_mockery_methods;\n
\n
    protected $_mockery_allowMockingProtectedMethods = false;\n
\n
    protected $_mockery_receivedMethodCalls;\n
\n
    /**\n
     * If shouldIgnoreMissing is called, this value will be returned on all calls to missing methods\n
     * @var mixed\n
     */\n
    protected $_mockery_defaultReturnValue = null;\n
\n
    /**\n
     * Tracks internally all the bad method call exceptions that happened during runtime\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_thrownExceptions = [];\n
\n
    protected $_mockery_instanceMock = true;\n
\n
    /**\n
     * We want to avoid constructors since class is copied to Generator.php\n
     * for inclusion on extending class definitions.\n
     *\n
     * @param \Mockery\Container $container\n
     * @param object $partialObject\n
     * @param bool $instanceMock\n
     * @return void\n
     */\n
    public function mockery_init(\Mockery\Container $container = null, $partialObject = null, $instanceMock = true)\n
    {\n
        if (is_null($container)) {\n
            $container = new \Mockery\Container;\n
        }\n
        $this->_mockery_container = $container;\n
        if (!is_null($partialObject)) {\n
            $this->_mockery_partial = $partialObject;\n
        }\n
\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isPublic()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_instanceMock = $instanceMock;\n
    }\n
\n
    /**\n
     * Set expected method calls\n
     *\n
     * @param mixed ...$methodNames one or many methods that are expected to be called in this mock\n
     *\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldReceive");\n
        }\n
\n
        foreach ($methodNames as $method) {\n
            if ("" == $method) {\n
                throw new \InvalidArgumentException("Received empty method name");\n
            }\n
        }\n
\n
        $self = $this;\n
        $allowMockingProtectedMethods = $this->_mockery_allowMockingProtectedMethods;\n
\n
        $lastExpectation = \Mockery::parseShouldReturnArgs(\n
            $this, $methodNames, function ($method) use ($self, $allowMockingProtectedMethods) {\n
                $rm = $self->mockery_getMethod($method);\n
                if ($rm) {\n
                    if ($rm->isPrivate()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a private method");\n
                    }\n
                    if (!$allowMockingProtectedMethods && $rm->isProtected()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a protected method and mocking protected methods is not enabled for the currently used mock object. Use shouldAllowMockingProtectedMethods() to enable mocking of protected methods.");\n
                    }\n
                }\n
\n
                $director = $self->mockery_getExpectationsFor($method);\n
                if (!$director) {\n
                    $director = new \Mockery\ExpectationDirector($method, $self);\n
                    $self->mockery_setExpectationsFor($method, $director);\n
                }\n
                $expectation = new \Mockery\Expectation($self, $method);\n
                $director->addExpectation($expectation);\n
                return $expectation;\n
            }\n
        );\n
        return $lastExpectation;\n
    }\n
\n
    // start method allows\n
    /**\n
     * @param mixed $something  String method name or map of method => return\n
     * @return self|\Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function allows($something = [])\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something);\n
        }\n
\n
        if (empty($something)) {\n
            return $this->shouldReceive();\n
        }\n
\n
        foreach ($something as $method => $returnValue) {\n
            $this->shouldReceive($method)->andReturn($returnValue);\n
        }\n
\n
        return $this;\n
    }\n
    // end method allows\n
\n
    // start method expects\n
    /**\n
    /**\n
     * @param mixed $something  String method name (optional)\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|ExpectsHigherOrderMessage\n
     */\n
    public function expects($something = null)\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something)->once();\n
        }\n
\n
        return new ExpectsHigherOrderMessage($this);\n
    }\n
    // end method expects\n
\n
    /**\n
     * Shortcut method for setting an expectation that a method should not be called.\n
     *\n
     * @param array ...$methodNames one or many methods that are expected not to be called in this mock\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldNotReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldNotReceive");\n
        }\n
\n
        $expectation = call_user_func_array(array($this, 'shouldReceive'), $methodNames);\n
        $expectation->never();\n
        return $expectation;\n
    }\n
\n
    /**\n
     * Allows additional methods to be mocked that do not explicitly exist on mocked class\n
     * @param String $method name of the method to be mocked\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingMethod($method)\n
    {\n
        $this->_mockery_mockableMethods[] = $method;\n
        return $this;\n
    }\n
\n
    /**\n
     * Set mock to ignore unexpected methods and return Undefined class\n
     * @param mixed $returnValue the default return value for calls to missing functions on this mock\n
     * @return Mock\n
     */\n
    public function shouldIgnoreMissing($returnValue = null)\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = $returnValue;\n
        return $this;\n
    }\n
\n
    public function asUndefined()\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = new \Mockery\Undefined;\n
        return $this;\n
    }\n
\n
    /**\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingProtectedMethods()\n
    {\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isProtected()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_allowMockingProtectedMethods = true;\n
        return $this;\n
    }\n
\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * This is particularly useless for this class, as it doesn't have a parent,\n
     * but included for completeness\n
     *\n
     * @deprecated 2.0.0 Please use makePartial() instead\n
     *\n
     * @return Mock\n
     */\n
    public function shouldDeferMissing()\n
    {\n
        return $this->makePartial();\n
    }\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * It was an alias for shouldDeferMissing(), which will be removed\n
     * in 2.0.0.\n
     *\n
     * @return Mock\n
     */\n
    public function makePartial()\n
    {\n
        $this->_mockery_deferMissing = true;\n
        return $this;\n
    }\n
\n
    /**\n
     * In the event shouldReceive() accepting one or more methods/returns,\n
     * this method will switch them from normal expectations to default\n
     * expectations\n
     *\n
     * @return self\n
     */\n
    public function byDefault()\n
    {\n
        foreach ($this->_mockery_expectations as $director) {\n
            $exps = $director->getExpectations();\n
            foreach ($exps as $exp) {\n
                $exp->byDefault();\n
            }\n
        }\n
        return $this;\n
    }\n
\n
    /**\n
     * Capture calls to this mock\n
     */\n
    public function __call($method, array $args)\n
    {\n
        return $this->_mockery_handleMethodCall($method, $args);\n
    }\n
\n
    public static function __callStatic($method, array $args)\n
    {\n
        return self::_mockery_handleStaticMethodCall($method, $args);\n
    }\n
\n
    /**\n
     * Forward calls to this magic method to the __call method\n
     */\n
    public function __toString()\n
    {\n
        return $this->__call('__toString', array());\n
    }\n
\n
    /**\n
     * Iterate across all expectation directors and validate each\n
     *\n
     * @throws \Mockery\CountValidator\Exception\n
     * @return void\n
     */\n
    public function mockery_verify()\n
    {\n
        if ($this->_mockery_verified) {\n
            return;\n
        }\n
        if (isset($this->_mockery_ignoreVerification)\n
            && $this->_mockery_ignoreVerification == true) {\n
            return;\n
        }\n
        $this->_mockery_verified = true;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $director->verify();\n
        }\n
    }\n
\n
    /**\n
     * Gets a list of exceptions thrown by this mock\n
     *\n
     * @return array\n
     */\n
    public function mockery_thrownExceptions()\n
    {\n
        return $this->_mockery_thrownExceptions;\n
    }\n
\n
    /**\n
     * Tear down tasks for this mock\n
     *\n
     * @return void\n
     */\n
    public function mockery_teardown()\n
    {\n
    }\n
\n
    /**\n
     * Fetch the next available allocation order number\n
     *\n
     * @return int\n
     */\n
    public function mockery_allocateOrder()\n
    {\n
        $this->_mockery_allocatedOrder += 1;\n
        return $this->_mockery_allocatedOrder;\n
    }\n
\n
    /**\n
     * Set ordering for a group\n
     *\n
     * @param mixed $group\n
     * @param int $order\n
     */\n
    public function mockery_setGroup($group, $order)\n
    {\n
        $this->_mockery_groups[$group] = $order;\n
    }\n
\n
    /**\n
     * Fetch array of ordered groups\n
     *\n
     * @return array\n
     */\n
    public function mockery_getGroups()\n
    {\n
        return $this->_mockery_groups;\n
    }\n
\n
    /**\n
     * Set current ordered number\n
     *\n
     * @param int $order\n
     */\n
    public function mockery_setCurrentOrder($order)\n
    {\n
        $this->_mockery_currentOrder = $order;\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Get current ordered number\n
     *\n
     * @return int\n
     */\n
    public function mockery_getCurrentOrder()\n
    {\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Validate the current mock's ordering\n
     *\n
     * @param string $method\n
     * @param int $order\n
     * @throws \Mockery\Exception\n
     * @return void\n
     */\n
    public function mockery_validateOrder($method, $order)\n
    {\n
        if ($order < $this->_mockery_currentOrder) {\n
            $exception = new \Mockery\Exception\InvalidOrderException(\n
                'Method ' . __CLASS__ . '::' . $method . '()'\n
                . ' called out of order: expected order '\n
                . $order . ', was ' . $this->_mockery_currentOrder\n
            );\n
            $exception->setMock($this)\n
                ->setMethodName($method)\n
                ->setExpectedOrder($order)\n
                ->setActualOrder($this->_mockery_currentOrder);\n
            throw $exception;\n
        }\n
        $this->mockery_setCurrentOrder($order);\n
    }\n
\n
    /**\n
     * Gets the count of expectations for this mock\n
     *\n
     * @return int\n
     */\n
    public function mockery_getExpectationCount()\n
    {\n
        $count = $this->_mockery_expectations_count;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $count += $director->getExpectationCount();\n
        }\n
        return $count;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_setExpectationsFor($method, \Mockery\ExpectationDirector $director)\n
    {\n
        $this->_mockery_expectations[$method] = $director;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_getExpectationsFor($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
    }\n
\n
    /**\n
     * Find an expectation matching the given method and arguments\n
     *\n
     * @var string $method\n
     * @var array $args\n
     * @return \Mockery\Expectation|null\n
     */\n
    public function mockery_findExpectation($method, array $args)\n
    {\n
        if (!isset($this->_mockery_expectations[$method])) {\n
            return null;\n
        }\n
        $director = $this->_mockery_expectations[$method];\n
\n
        return $director->findExpectation($args);\n
    }\n
\n
    /**\n
     * Return the container for this mock\n
     *\n
     * @return \Mockery\Container\n
     */\n
    public function mockery_getContainer()\n
    {\n
        return $this->_mockery_container;\n
    }\n
\n
    /**\n
     * Return the name for this mock\n
     *\n
     * @return string\n
     */\n
    public function mockery_getName()\n
    {\n
        return __CLASS__;\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    public function mockery_getMockableProperties()\n
    {\n
        return $this->_mockery_mockableProperties;\n
    }\n
\n
    public function __isset($name)\n
    {\n
        if (false === stripos($name, '_mockery_') && method_exists(get_parent_class($this), '__isset')) {\n
            return call_user_func('parent::__isset', $name);\n
        }\n
\n
        return false;\n
    }\n
\n
    public function mockery_getExpectations()\n
    {\n
        return $this->_mockery_expectations;\n
    }\n
\n
    /**\n
     * Calls a parent class method and returns the result. Used in a passthru\n
     * expectation where a real return value is required while still taking\n
     * advantage of expectation matching and call count verification.\n
     *\n
     * @param string $name\n
     * @param array $args\n
     * @return mixed\n
     */\n
    public function mockery_callSubjectMethod($name, array $args)\n
    {\n
        if (!method_exists($this, $name) && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $name, $args);\n
        }\n
        return call_user_func_array('parent::' . $name, $args);\n
    }\n
\n
    /**\n
     * @return string[]\n
     */\n
    public function mockery_getMockableMethods()\n
    {\n
        return $this->_mockery_mockableMethods;\n
    }\n
\n
    /**\n
     * @return bool\n
     */\n
    public function mockery_isAnonymous()\n
    {\n
        $rfc = new \ReflectionClass($this);\n
\n
        // HHVM has a Stringish interface\n
        $interfaces = array_filter($rfc->getInterfaces(), function ($i) {\n
            return $i->getName() !== "Stringish";\n
        });\n
        $onlyImplementsMock = 2 == count($interfaces);\n
\n
        return (false === $rfc->getParentClass()) && $onlyImplementsMock;\n
    }\n
\n
    public function mockery_isInstance()\n
    {\n
        return $this->_mockery_instanceMock;\n
    }\n
\n
    public function __wakeup()\n
    {\n
        /**\n
         * This does not add __wakeup method support. It's a blind method and any\n
         * expected __wakeup work will NOT be performed. It merely cuts off\n
         * annoying errors where a __wakeup exists but is not essential when\n
         * mocking\n
         */\n
    }\n
\n
    public function __destruct()\n
    {\n
        /**\n
         * Overrides real class destructor in case if class was created without original constructor\n
         */\n
    }\n
\n
    public function mockery_getMethod($name)\n
    {\n
        foreach ($this->mockery_getMethods() as $method) {\n
            if ($method->getName() == $name) {\n
                return $method;\n
            }\n
        }\n
\n
        return null;\n
    }\n
\n
    /**\n
     * @param string $name Method name.\n
     *\n
     * @return mixed Generated return value based on the declared return value of the named method.\n
     */\n
    public function mockery_returnValueForMethod($name)\n
    {\n
        if (version_compare(PHP_VERSION, '7.0.0-dev') < 0) {\n
            return;\n
        }\n
\n
        $rm = $this->mockery_getMethod($name);\n
        if (!$rm || !$rm->hasReturnType()) {\n
            return;\n
        }\n
\n
        $returnType = $rm->getReturnType();\n
\n
        // Default return value for methods with nullable type is null\n
        if ($returnType->allowsNull()) {\n
            return null;\n
        }\n
\n
        $type = PHP_VERSION_ID >= 70100 ? $returnType->getName() : (string) $returnType;\n
        switch ($type) {\n
            case '':       return;\n
            case 'string': return '';\n
            case 'int':    return 0;\n
            case 'float':  return 0.0;\n
            case 'bool':   return false;\n
            case 'array':  return [];\n
\n
            case 'callable':\n
            case 'Closure':\n
                return function () {\n
                };\n
\n
            case 'Traversable':\n
            case 'Generator':\n
                // Remove eval() when minimum version >=5.5\n
                $generator = eval('return function () { yield; };');\n
                return $generator();\n
\n
            case 'self':\n
                return \Mockery::mock($rm->getDeclaringClass()->getName());\n
\n
            case 'void':\n
                return null;\n
\n
            case 'object':\n
                if (version_compare(PHP_VERSION, '7.2.0-dev') >= 0) {\n
                    return \Mockery::mock();\n
                }\n
\n
            default:\n
                return \Mockery::mock($type);\n
        }\n
    }\n
\n
    public function shouldHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->atLeast()->once();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return $director;\n
    }\n
\n
    public function shouldHaveBeenCalled()\n
    {\n
        return $this->shouldHaveReceived("__invoke");\n
    }\n
\n
    public function shouldNotHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldNotHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->never();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return null;\n
    }\n
\n
    public function shouldNotHaveBeenCalled(array $args = null)\n
    {\n
        return $this->shouldNotHaveReceived("__invoke", $args);\n
    }\n
\n
    protected static function _mockery_handleStaticMethodCall($method, array $args)\n
    {\n
        $associatedRealObject = \Mockery::fetchMock(__CLASS__);\n
        try {\n
            return $associatedRealObject->__call($method, $args);\n
        } catch (BadMethodCallException $e) {\n
            throw new BadMethodCallException(\n
                'Static method ' . $associatedRealObject->mockery_getName() . '::' . $method\n
                . '() does not exist on this mock object',\n
                null,\n
                $e\n
            );\n
        }\n
    }\n
\n
    protected function _mockery_getReceivedMethodCalls()\n
    {\n
        return $this->_mockery_receivedMethodCalls ?: $this->_mockery_receivedMethodCalls = new \Mockery\ReceivedMethodCalls();\n
    }\n
\n
    /**\n
     * Called when an instance Mock was created and its constructor is getting called\n
     *\n
     * @see \Mockery\Generator\StringManipulation\Pass\InstanceMockPass\n
     * @param array $args\n
     */\n
    protected function _mockery_constructorCalled(array $args)\n
    {\n
        if (!isset($this->_mockery_expectations['__construct']) /* _mockery_handleMethodCall runs the other checks */) {\n
            return;\n
        }\n
        $this->_mockery_handleMethodCall('__construct', $args);\n
    }\n
\n
    protected function _mockery_findExpectedMethodHandler($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
\n
        $lowerCasedMockeryExpectations = array_change_key_case($this->_mockery_expectations, CASE_LOWER);\n
        $lowerCasedMethod = strtolower($method);\n
\n
        if (isset($lowerCasedMockeryExpectations[$lowerCasedMethod])) {\n
            return $lowerCasedMockeryExpectations[$lowerCasedMethod];\n
        }\n
\n
        return null;\n
    }\n
\n
    protected function _mockery_handleMethodCall($method, array $args)\n
    {\n
        $this->_mockery_getReceivedMethodCalls()->push(new \Mockery\MethodCall($method, $args));\n
\n
        $rm = $this->mockery_getMethod($method);\n
        if ($rm && $rm->isProtected() && !$this->_mockery_allowMockingProtectedMethods) {\n
            if ($rm->isAbstract()) {\n
                return;\n
            }\n
\n
            try {\n
                $prototype = $rm->getPrototype();\n
                if ($prototype->isAbstract()) {\n
                    return;\n
                }\n
            } catch (\ReflectionException $re) {\n
                // noop - there is no hasPrototype method\n
            }\n
\n
            return call_user_func_array("parent::$method", $args);\n
        }\n
\n
        $handler = $this->_mockery_findExpectedMethodHandler($method);\n
\n
        if ($handler !== null && !$this->_mockery_disableExpectationMatching) {\n
            try {\n
                return $handler->call($args);\n
            } catch (\Mockery\Exception\NoMatchingExpectationException $e) {\n
                if (!$this->_mockery_ignoreMissing && !$this->_mockery_deferMissing) {\n
                    throw $e;\n
                }\n
            }\n
        }\n
\n
        if (!is_null($this->_mockery_partial) &&\n
            (method_exists($this->_mockery_partial, $method) || method_exists($this->_mockery_partial, '__call'))\n
        ) {\n
            return call_user_func_array(array($this->_mockery_partial, $method), $args);\n
        } elseif ($this->_mockery_deferMissing && is_callable("parent::$method")\n
            && (!$this->hasMethodOverloadingInParentClass() || method_exists(get_parent_class($this), $method))) {\n
            return call_user_func_array("parent::$method", $args);\n
        } elseif ($this->_mockery_deferMissing && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $method, $args);\n
        } elseif ($method == '__toString') {\n
            // __toString is special because we force its addition to the class API regardless of the\n
            // original implementation.  Thus, we should always return a string rather than honor\n
            // _mockery_ignoreMissing and break the API with an error.\n
            return sprintf("%s#%s", __CLASS__, spl_object_hash($this));\n
        } elseif ($this->_mockery_ignoreMissing) {\n
            if (\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed() || (method_exists($this->_mockery_partial, $method) || is_callable("parent::$method"))) {\n
                if ($this->_mockery_defaultReturnValue instanceof \Mockery\Undefined) {\n
                    return call_user_func_array(array($this->_mockery_defaultReturnValue, $method), $args);\n
                } elseif (null === $this->_mockery_defaultReturnValue) {\n
                    return $this->mockery_returnValueForMethod($method);\n
                }\n
\n
                return $this->_mockery_defaultReturnValue;\n
            }\n
        }\n
\n
        $message = 'Method ' . __CLASS__ . '::' . $method .\n
            '() does not exist on this mock object';\n
\n
        if (!is_null($rm)) {\n
            $message = 'Received ' . __CLASS__ .\n
                '::' . $method . '(), but no expectations were specified';\n
        }\n
\n
        $bmce = new BadMethodCallException($message);\n
        $this->_mockery_thrownExceptions[] = $bmce;\n
        throw $bmce;\n
    }\n
\n
    /**\n
     * Uses reflection to get the list of all\n
     * methods within the current mock object\n
     *\n
     * @return array\n
     */\n
    protected function mockery_getMethods()\n
    {\n
        if (static::$_mockery_methods && \Mockery::getConfiguration()->reflectionCacheEnabled()) {\n
            return static::$_mockery_methods;\n
        }\n
\n
        if (isset($this->_mockery_partial)) {\n
            $reflected = new \ReflectionObject($this->_mockery_partial);\n
        } else {\n
            $reflected = new \ReflectionClass($this);\n
        }\n
\n
        return static::$_mockery_methods = $reflected->getMethods();\n
    }\n
\n
    private function hasMethodOverloadingInParentClass()\n
    {\n
        // if there's __call any name would be callable\n
        return is_callable('parent::aFunctionNameThatNoOneWouldEverUseInRealLife12345');\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    private function getNonPublicMethods()\n
    {\n
        return array_map(\n
            function ($method) {\n
                return $method->getName();\n
            },\n
            array_filter($this->mockery_getMethods(), function ($method) {\n
                return !$method->isPublic();\n
            })\n
        );\n
    }\n
public function __construct(\Inpsyde\PayPalCommerce\ApiClient\Factory\ItemFactory $itemFactory){\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function fromWcCart(\WC_Cart $cart): \Inpsyde\PayPalCommerce\ApiClient\Entity\Amount{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function fromWcOrder(\WC_Order $order): \Inpsyde\PayPalCommerce\ApiClient\Entity\Amount{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function fromPayPalResponse(\stdClass $data): \Inpsyde\PayPalCommerce\ApiClient\Entity\Amount{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    private function breakDown(\stdClass $data): \Inpsyde\PayPalCommerce\ApiClient\Entity\AmountBreakdown{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    }\n
'
                                        )
                                        '28ef26298324b9c5eed2aed6d410644c' => Mockery\Generator\MockDefinition Object &0000000021e1fefd000000005777935d (
                                            'config' => Mockery\Generator\MockConfiguration Object &0000000021e1fe93000000005777935d (
                                                'targetClass' => Mockery\Generator\DefinedTargetClass Object &0000000021e1fec4000000005777935d (
                                                    'rfc' => ReflectionClass Object &0000000021e1fec3000000005777935d (
                                                        'name' => 'Inpsyde\PayPalCommerce\ApiClient\Factory\PayeeFactory'
                                                    )
                                                )
                                                'targetClassName' => '\Inpsyde\PayPalCommerce\ApiClient\Factory\PayeeFactory'
                                                'targetInterfaces' => Array &2168 ()
                                                'targetInterfaceNames' => Array &2169 ()
                                                'targetTraits' => Array &2170 ()
                                                'targetTraitNames' => Array &2171 ()
                                                'targetObject' => null
                                                'name' => 'Mockery_8_Inpsyde_PayPalCommerce_ApiClient_Factory_PayeeFactory'
                                                'blackListedMethods' => Array &2172 (
                                                    0 => '__call'
                                                    1 => '__callStatic'
                                                    2 => '__clone'
                                                    3 => '__wakeup'
                                                    4 => '__set'
                                                    5 => '__get'
                                                    6 => '__toString'
                                                    7 => '__isset'
                                                    8 => '__destruct'
                                                    9 => '__debugInfo'
                                                    10 => '__halt_compiler'
                                                    30 => 'empty'
                                                    37 => 'eval'
                                                    53 => 'isset'
                                                    70 => 'unset'
                                                )
                                                'whiteListedMethods' => Array &2173 ()
                                                'instanceMock' => false
                                                'parameterOverrides' => Array &2174 ()
                                                'allMethods' => Array &2175 (
                                                    0 => Mockery\Generator\Method Object &0000000021e1fec0000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fec1000000005777935d (
                                                            'name' => 'fromPayPalResponse'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Factory\PayeeFactory'
                                                        )
                                                    )
                                                )
                                                'mockOriginalDestructor' => true
                                                'constantsMap' => Array &2176 ()
                                            )
                                            'code' => '<?php\n
/**\n
 * Mockery\n
 *\n
 * LICENSE\n
 *\n
 * This source file is subject to the new BSD license that is bundled\n
 * with this package in the file LICENSE.txt.\n
 * It is also available through the world-wide-web at this URL:\n
 * http://github.com/padraic/mockery/blob/master/LICENSE\n
 * If you did not receive a copy of the license and are unable to\n
 * obtain it through the world-wide-web, please send an email\n
 * to padraic@php.net so we can send you a copy immediately.\n
 *\n
 * @category   Mockery\n
 * @package    Mockery\n
 * @copyright  Copyright (c) 2010 Pádraic Brady (http://blog.astrumfutura.com)\n
 * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License\n
 */\n
\n
\n
\n
use Mockery\HigherOrderMessage;\n
use Mockery\MockInterface;\n
use Mockery\LegacyMockInterface;\n
use Mockery\ExpectsHigherOrderMessage;\n
use Mockery\Exception\BadMethodCallException;\n
\n
class Mockery_8_Inpsyde_PayPalCommerce_ApiClient_Factory_PayeeFactory extends \Inpsyde\PayPalCommerce\ApiClient\Factory\PayeeFactory implements MockInterface\n
{\n
    /**\n
     * Stores an array of all expectation directors for this mock\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_expectations = array();\n
\n
    /**\n
     * Stores an inital number of expectations that can be manipulated\n
     * while using the getter method.\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_expectations_count = 0;\n
\n
    /**\n
     * Flag to indicate whether we can ignore method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_ignoreMissing = false;\n
\n
    /**\n
     * Flag to indicate whether we can defer method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_deferMissing = false;\n
\n
    /**\n
     * Flag to indicate whether this mock was verified\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_verified = false;\n
\n
    /**\n
     * Given name of the mock\n
     *\n
     * @var string\n
     */\n
    protected $_mockery_name = null;\n
\n
    /**\n
     * Order number of allocation\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_allocatedOrder = 0;\n
\n
    /**\n
     * Current ordered number\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_currentOrder = 0;\n
\n
    /**\n
     * Ordered groups\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_groups = array();\n
\n
    /**\n
     * Mock container containing this mock object\n
     *\n
     * @var \Mockery\Container\n
     */\n
    protected $_mockery_container = null;\n
\n
    /**\n
     * Instance of a core object on which methods are called in the event\n
     * it has been set, and an expectation for one of the object's methods\n
     * does not exist. This implements a simple partial mock proxy system.\n
     *\n
     * @var object\n
     */\n
    protected $_mockery_partial = null;\n
\n
    /**\n
     * Flag to indicate we should ignore all expectations temporarily. Used\n
     * mainly to prevent expectation matching when in the middle of a mock\n
     * object recording session.\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_disableExpectationMatching = false;\n
\n
    /**\n
     * Stores all stubbed public methods separate from any on-object public\n
     * properties that may exist.\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_mockableProperties = array();\n
\n
    /**\n
     * @var array\n
     */\n
    protected $_mockery_mockableMethods = array();\n
\n
    /**\n
     * Just a local cache for this mock's target's methods\n
     *\n
     * @var \ReflectionMethod[]\n
     */\n
    protected static $_mockery_methods;\n
\n
    protected $_mockery_allowMockingProtectedMethods = false;\n
\n
    protected $_mockery_receivedMethodCalls;\n
\n
    /**\n
     * If shouldIgnoreMissing is called, this value will be returned on all calls to missing methods\n
     * @var mixed\n
     */\n
    protected $_mockery_defaultReturnValue = null;\n
\n
    /**\n
     * Tracks internally all the bad method call exceptions that happened during runtime\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_thrownExceptions = [];\n
\n
    protected $_mockery_instanceMock = true;\n
\n
    /**\n
     * We want to avoid constructors since class is copied to Generator.php\n
     * for inclusion on extending class definitions.\n
     *\n
     * @param \Mockery\Container $container\n
     * @param object $partialObject\n
     * @param bool $instanceMock\n
     * @return void\n
     */\n
    public function mockery_init(\Mockery\Container $container = null, $partialObject = null, $instanceMock = true)\n
    {\n
        if (is_null($container)) {\n
            $container = new \Mockery\Container;\n
        }\n
        $this->_mockery_container = $container;\n
        if (!is_null($partialObject)) {\n
            $this->_mockery_partial = $partialObject;\n
        }\n
\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isPublic()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_instanceMock = $instanceMock;\n
    }\n
\n
    /**\n
     * Set expected method calls\n
     *\n
     * @param mixed ...$methodNames one or many methods that are expected to be called in this mock\n
     *\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldReceive");\n
        }\n
\n
        foreach ($methodNames as $method) {\n
            if ("" == $method) {\n
                throw new \InvalidArgumentException("Received empty method name");\n
            }\n
        }\n
\n
        $self = $this;\n
        $allowMockingProtectedMethods = $this->_mockery_allowMockingProtectedMethods;\n
\n
        $lastExpectation = \Mockery::parseShouldReturnArgs(\n
            $this, $methodNames, function ($method) use ($self, $allowMockingProtectedMethods) {\n
                $rm = $self->mockery_getMethod($method);\n
                if ($rm) {\n
                    if ($rm->isPrivate()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a private method");\n
                    }\n
                    if (!$allowMockingProtectedMethods && $rm->isProtected()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a protected method and mocking protected methods is not enabled for the currently used mock object. Use shouldAllowMockingProtectedMethods() to enable mocking of protected methods.");\n
                    }\n
                }\n
\n
                $director = $self->mockery_getExpectationsFor($method);\n
                if (!$director) {\n
                    $director = new \Mockery\ExpectationDirector($method, $self);\n
                    $self->mockery_setExpectationsFor($method, $director);\n
                }\n
                $expectation = new \Mockery\Expectation($self, $method);\n
                $director->addExpectation($expectation);\n
                return $expectation;\n
            }\n
        );\n
        return $lastExpectation;\n
    }\n
\n
    // start method allows\n
    /**\n
     * @param mixed $something  String method name or map of method => return\n
     * @return self|\Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function allows($something = [])\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something);\n
        }\n
\n
        if (empty($something)) {\n
            return $this->shouldReceive();\n
        }\n
\n
        foreach ($something as $method => $returnValue) {\n
            $this->shouldReceive($method)->andReturn($returnValue);\n
        }\n
\n
        return $this;\n
    }\n
    // end method allows\n
\n
    // start method expects\n
    /**\n
    /**\n
     * @param mixed $something  String method name (optional)\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|ExpectsHigherOrderMessage\n
     */\n
    public function expects($something = null)\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something)->once();\n
        }\n
\n
        return new ExpectsHigherOrderMessage($this);\n
    }\n
    // end method expects\n
\n
    /**\n
     * Shortcut method for setting an expectation that a method should not be called.\n
     *\n
     * @param array ...$methodNames one or many methods that are expected not to be called in this mock\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldNotReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldNotReceive");\n
        }\n
\n
        $expectation = call_user_func_array(array($this, 'shouldReceive'), $methodNames);\n
        $expectation->never();\n
        return $expectation;\n
    }\n
\n
    /**\n
     * Allows additional methods to be mocked that do not explicitly exist on mocked class\n
     * @param String $method name of the method to be mocked\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingMethod($method)\n
    {\n
        $this->_mockery_mockableMethods[] = $method;\n
        return $this;\n
    }\n
\n
    /**\n
     * Set mock to ignore unexpected methods and return Undefined class\n
     * @param mixed $returnValue the default return value for calls to missing functions on this mock\n
     * @return Mock\n
     */\n
    public function shouldIgnoreMissing($returnValue = null)\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = $returnValue;\n
        return $this;\n
    }\n
\n
    public function asUndefined()\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = new \Mockery\Undefined;\n
        return $this;\n
    }\n
\n
    /**\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingProtectedMethods()\n
    {\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isProtected()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_allowMockingProtectedMethods = true;\n
        return $this;\n
    }\n
\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * This is particularly useless for this class, as it doesn't have a parent,\n
     * but included for completeness\n
     *\n
     * @deprecated 2.0.0 Please use makePartial() instead\n
     *\n
     * @return Mock\n
     */\n
    public function shouldDeferMissing()\n
    {\n
        return $this->makePartial();\n
    }\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * It was an alias for shouldDeferMissing(), which will be removed\n
     * in 2.0.0.\n
     *\n
     * @return Mock\n
     */\n
    public function makePartial()\n
    {\n
        $this->_mockery_deferMissing = true;\n
        return $this;\n
    }\n
\n
    /**\n
     * In the event shouldReceive() accepting one or more methods/returns,\n
     * this method will switch them from normal expectations to default\n
     * expectations\n
     *\n
     * @return self\n
     */\n
    public function byDefault()\n
    {\n
        foreach ($this->_mockery_expectations as $director) {\n
            $exps = $director->getExpectations();\n
            foreach ($exps as $exp) {\n
                $exp->byDefault();\n
            }\n
        }\n
        return $this;\n
    }\n
\n
    /**\n
     * Capture calls to this mock\n
     */\n
    public function __call($method, array $args)\n
    {\n
        return $this->_mockery_handleMethodCall($method, $args);\n
    }\n
\n
    public static function __callStatic($method, array $args)\n
    {\n
        return self::_mockery_handleStaticMethodCall($method, $args);\n
    }\n
\n
    /**\n
     * Forward calls to this magic method to the __call method\n
     */\n
    public function __toString()\n
    {\n
        return $this->__call('__toString', array());\n
    }\n
\n
    /**\n
     * Iterate across all expectation directors and validate each\n
     *\n
     * @throws \Mockery\CountValidator\Exception\n
     * @return void\n
     */\n
    public function mockery_verify()\n
    {\n
        if ($this->_mockery_verified) {\n
            return;\n
        }\n
        if (isset($this->_mockery_ignoreVerification)\n
            && $this->_mockery_ignoreVerification == true) {\n
            return;\n
        }\n
        $this->_mockery_verified = true;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $director->verify();\n
        }\n
    }\n
\n
    /**\n
     * Gets a list of exceptions thrown by this mock\n
     *\n
     * @return array\n
     */\n
    public function mockery_thrownExceptions()\n
    {\n
        return $this->_mockery_thrownExceptions;\n
    }\n
\n
    /**\n
     * Tear down tasks for this mock\n
     *\n
     * @return void\n
     */\n
    public function mockery_teardown()\n
    {\n
    }\n
\n
    /**\n
     * Fetch the next available allocation order number\n
     *\n
     * @return int\n
     */\n
    public function mockery_allocateOrder()\n
    {\n
        $this->_mockery_allocatedOrder += 1;\n
        return $this->_mockery_allocatedOrder;\n
    }\n
\n
    /**\n
     * Set ordering for a group\n
     *\n
     * @param mixed $group\n
     * @param int $order\n
     */\n
    public function mockery_setGroup($group, $order)\n
    {\n
        $this->_mockery_groups[$group] = $order;\n
    }\n
\n
    /**\n
     * Fetch array of ordered groups\n
     *\n
     * @return array\n
     */\n
    public function mockery_getGroups()\n
    {\n
        return $this->_mockery_groups;\n
    }\n
\n
    /**\n
     * Set current ordered number\n
     *\n
     * @param int $order\n
     */\n
    public function mockery_setCurrentOrder($order)\n
    {\n
        $this->_mockery_currentOrder = $order;\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Get current ordered number\n
     *\n
     * @return int\n
     */\n
    public function mockery_getCurrentOrder()\n
    {\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Validate the current mock's ordering\n
     *\n
     * @param string $method\n
     * @param int $order\n
     * @throws \Mockery\Exception\n
     * @return void\n
     */\n
    public function mockery_validateOrder($method, $order)\n
    {\n
        if ($order < $this->_mockery_currentOrder) {\n
            $exception = new \Mockery\Exception\InvalidOrderException(\n
                'Method ' . __CLASS__ . '::' . $method . '()'\n
                . ' called out of order: expected order '\n
                . $order . ', was ' . $this->_mockery_currentOrder\n
            );\n
            $exception->setMock($this)\n
                ->setMethodName($method)\n
                ->setExpectedOrder($order)\n
                ->setActualOrder($this->_mockery_currentOrder);\n
            throw $exception;\n
        }\n
        $this->mockery_setCurrentOrder($order);\n
    }\n
\n
    /**\n
     * Gets the count of expectations for this mock\n
     *\n
     * @return int\n
     */\n
    public function mockery_getExpectationCount()\n
    {\n
        $count = $this->_mockery_expectations_count;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $count += $director->getExpectationCount();\n
        }\n
        return $count;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_setExpectationsFor($method, \Mockery\ExpectationDirector $director)\n
    {\n
        $this->_mockery_expectations[$method] = $director;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_getExpectationsFor($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
    }\n
\n
    /**\n
     * Find an expectation matching the given method and arguments\n
     *\n
     * @var string $method\n
     * @var array $args\n
     * @return \Mockery\Expectation|null\n
     */\n
    public function mockery_findExpectation($method, array $args)\n
    {\n
        if (!isset($this->_mockery_expectations[$method])) {\n
            return null;\n
        }\n
        $director = $this->_mockery_expectations[$method];\n
\n
        return $director->findExpectation($args);\n
    }\n
\n
    /**\n
     * Return the container for this mock\n
     *\n
     * @return \Mockery\Container\n
     */\n
    public function mockery_getContainer()\n
    {\n
        return $this->_mockery_container;\n
    }\n
\n
    /**\n
     * Return the name for this mock\n
     *\n
     * @return string\n
     */\n
    public function mockery_getName()\n
    {\n
        return __CLASS__;\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    public function mockery_getMockableProperties()\n
    {\n
        return $this->_mockery_mockableProperties;\n
    }\n
\n
    public function __isset($name)\n
    {\n
        if (false === stripos($name, '_mockery_') && method_exists(get_parent_class($this), '__isset')) {\n
            return call_user_func('parent::__isset', $name);\n
        }\n
\n
        return false;\n
    }\n
\n
    public function mockery_getExpectations()\n
    {\n
        return $this->_mockery_expectations;\n
    }\n
\n
    /**\n
     * Calls a parent class method and returns the result. Used in a passthru\n
     * expectation where a real return value is required while still taking\n
     * advantage of expectation matching and call count verification.\n
     *\n
     * @param string $name\n
     * @param array $args\n
     * @return mixed\n
     */\n
    public function mockery_callSubjectMethod($name, array $args)\n
    {\n
        if (!method_exists($this, $name) && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $name, $args);\n
        }\n
        return call_user_func_array('parent::' . $name, $args);\n
    }\n
\n
    /**\n
     * @return string[]\n
     */\n
    public function mockery_getMockableMethods()\n
    {\n
        return $this->_mockery_mockableMethods;\n
    }\n
\n
    /**\n
     * @return bool\n
     */\n
    public function mockery_isAnonymous()\n
    {\n
        $rfc = new \ReflectionClass($this);\n
\n
        // HHVM has a Stringish interface\n
        $interfaces = array_filter($rfc->getInterfaces(), function ($i) {\n
            return $i->getName() !== "Stringish";\n
        });\n
        $onlyImplementsMock = 2 == count($interfaces);\n
\n
        return (false === $rfc->getParentClass()) && $onlyImplementsMock;\n
    }\n
\n
    public function mockery_isInstance()\n
    {\n
        return $this->_mockery_instanceMock;\n
    }\n
\n
    public function __wakeup()\n
    {\n
        /**\n
         * This does not add __wakeup method support. It's a blind method and any\n
         * expected __wakeup work will NOT be performed. It merely cuts off\n
         * annoying errors where a __wakeup exists but is not essential when\n
         * mocking\n
         */\n
    }\n
\n
    public function __destruct()\n
    {\n
        /**\n
         * Overrides real class destructor in case if class was created without original constructor\n
         */\n
    }\n
\n
    public function mockery_getMethod($name)\n
    {\n
        foreach ($this->mockery_getMethods() as $method) {\n
            if ($method->getName() == $name) {\n
                return $method;\n
            }\n
        }\n
\n
        return null;\n
    }\n
\n
    /**\n
     * @param string $name Method name.\n
     *\n
     * @return mixed Generated return value based on the declared return value of the named method.\n
     */\n
    public function mockery_returnValueForMethod($name)\n
    {\n
        if (version_compare(PHP_VERSION, '7.0.0-dev') < 0) {\n
            return;\n
        }\n
\n
        $rm = $this->mockery_getMethod($name);\n
        if (!$rm || !$rm->hasReturnType()) {\n
            return;\n
        }\n
\n
        $returnType = $rm->getReturnType();\n
\n
        // Default return value for methods with nullable type is null\n
        if ($returnType->allowsNull()) {\n
            return null;\n
        }\n
\n
        $type = PHP_VERSION_ID >= 70100 ? $returnType->getName() : (string) $returnType;\n
        switch ($type) {\n
            case '':       return;\n
            case 'string': return '';\n
            case 'int':    return 0;\n
            case 'float':  return 0.0;\n
            case 'bool':   return false;\n
            case 'array':  return [];\n
\n
            case 'callable':\n
            case 'Closure':\n
                return function () {\n
                };\n
\n
            case 'Traversable':\n
            case 'Generator':\n
                // Remove eval() when minimum version >=5.5\n
                $generator = eval('return function () { yield; };');\n
                return $generator();\n
\n
            case 'self':\n
                return \Mockery::mock($rm->getDeclaringClass()->getName());\n
\n
            case 'void':\n
                return null;\n
\n
            case 'object':\n
                if (version_compare(PHP_VERSION, '7.2.0-dev') >= 0) {\n
                    return \Mockery::mock();\n
                }\n
\n
            default:\n
                return \Mockery::mock($type);\n
        }\n
    }\n
\n
    public function shouldHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->atLeast()->once();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return $director;\n
    }\n
\n
    public function shouldHaveBeenCalled()\n
    {\n
        return $this->shouldHaveReceived("__invoke");\n
    }\n
\n
    public function shouldNotHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldNotHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->never();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return null;\n
    }\n
\n
    public function shouldNotHaveBeenCalled(array $args = null)\n
    {\n
        return $this->shouldNotHaveReceived("__invoke", $args);\n
    }\n
\n
    protected static function _mockery_handleStaticMethodCall($method, array $args)\n
    {\n
        $associatedRealObject = \Mockery::fetchMock(__CLASS__);\n
        try {\n
            return $associatedRealObject->__call($method, $args);\n
        } catch (BadMethodCallException $e) {\n
            throw new BadMethodCallException(\n
                'Static method ' . $associatedRealObject->mockery_getName() . '::' . $method\n
                . '() does not exist on this mock object',\n
                null,\n
                $e\n
            );\n
        }\n
    }\n
\n
    protected function _mockery_getReceivedMethodCalls()\n
    {\n
        return $this->_mockery_receivedMethodCalls ?: $this->_mockery_receivedMethodCalls = new \Mockery\ReceivedMethodCalls();\n
    }\n
\n
    /**\n
     * Called when an instance Mock was created and its constructor is getting called\n
     *\n
     * @see \Mockery\Generator\StringManipulation\Pass\InstanceMockPass\n
     * @param array $args\n
     */\n
    protected function _mockery_constructorCalled(array $args)\n
    {\n
        if (!isset($this->_mockery_expectations['__construct']) /* _mockery_handleMethodCall runs the other checks */) {\n
            return;\n
        }\n
        $this->_mockery_handleMethodCall('__construct', $args);\n
    }\n
\n
    protected function _mockery_findExpectedMethodHandler($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
\n
        $lowerCasedMockeryExpectations = array_change_key_case($this->_mockery_expectations, CASE_LOWER);\n
        $lowerCasedMethod = strtolower($method);\n
\n
        if (isset($lowerCasedMockeryExpectations[$lowerCasedMethod])) {\n
            return $lowerCasedMockeryExpectations[$lowerCasedMethod];\n
        }\n
\n
        return null;\n
    }\n
\n
    protected function _mockery_handleMethodCall($method, array $args)\n
    {\n
        $this->_mockery_getReceivedMethodCalls()->push(new \Mockery\MethodCall($method, $args));\n
\n
        $rm = $this->mockery_getMethod($method);\n
        if ($rm && $rm->isProtected() && !$this->_mockery_allowMockingProtectedMethods) {\n
            if ($rm->isAbstract()) {\n
                return;\n
            }\n
\n
            try {\n
                $prototype = $rm->getPrototype();\n
                if ($prototype->isAbstract()) {\n
                    return;\n
                }\n
            } catch (\ReflectionException $re) {\n
                // noop - there is no hasPrototype method\n
            }\n
\n
            return call_user_func_array("parent::$method", $args);\n
        }\n
\n
        $handler = $this->_mockery_findExpectedMethodHandler($method);\n
\n
        if ($handler !== null && !$this->_mockery_disableExpectationMatching) {\n
            try {\n
                return $handler->call($args);\n
            } catch (\Mockery\Exception\NoMatchingExpectationException $e) {\n
                if (!$this->_mockery_ignoreMissing && !$this->_mockery_deferMissing) {\n
                    throw $e;\n
                }\n
            }\n
        }\n
\n
        if (!is_null($this->_mockery_partial) &&\n
            (method_exists($this->_mockery_partial, $method) || method_exists($this->_mockery_partial, '__call'))\n
        ) {\n
            return call_user_func_array(array($this->_mockery_partial, $method), $args);\n
        } elseif ($this->_mockery_deferMissing && is_callable("parent::$method")\n
            && (!$this->hasMethodOverloadingInParentClass() || method_exists(get_parent_class($this), $method))) {\n
            return call_user_func_array("parent::$method", $args);\n
        } elseif ($this->_mockery_deferMissing && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $method, $args);\n
        } elseif ($method == '__toString') {\n
            // __toString is special because we force its addition to the class API regardless of the\n
            // original implementation.  Thus, we should always return a string rather than honor\n
            // _mockery_ignoreMissing and break the API with an error.\n
            return sprintf("%s#%s", __CLASS__, spl_object_hash($this));\n
        } elseif ($this->_mockery_ignoreMissing) {\n
            if (\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed() || (method_exists($this->_mockery_partial, $method) || is_callable("parent::$method"))) {\n
                if ($this->_mockery_defaultReturnValue instanceof \Mockery\Undefined) {\n
                    return call_user_func_array(array($this->_mockery_defaultReturnValue, $method), $args);\n
                } elseif (null === $this->_mockery_defaultReturnValue) {\n
                    return $this->mockery_returnValueForMethod($method);\n
                }\n
\n
                return $this->_mockery_defaultReturnValue;\n
            }\n
        }\n
\n
        $message = 'Method ' . __CLASS__ . '::' . $method .\n
            '() does not exist on this mock object';\n
\n
        if (!is_null($rm)) {\n
            $message = 'Received ' . __CLASS__ .\n
                '::' . $method . '(), but no expectations were specified';\n
        }\n
\n
        $bmce = new BadMethodCallException($message);\n
        $this->_mockery_thrownExceptions[] = $bmce;\n
        throw $bmce;\n
    }\n
\n
    /**\n
     * Uses reflection to get the list of all\n
     * methods within the current mock object\n
     *\n
     * @return array\n
     */\n
    protected function mockery_getMethods()\n
    {\n
        if (static::$_mockery_methods && \Mockery::getConfiguration()->reflectionCacheEnabled()) {\n
            return static::$_mockery_methods;\n
        }\n
\n
        if (isset($this->_mockery_partial)) {\n
            $reflected = new \ReflectionObject($this->_mockery_partial);\n
        } else {\n
            $reflected = new \ReflectionClass($this);\n
        }\n
\n
        return static::$_mockery_methods = $reflected->getMethods();\n
    }\n
\n
    private function hasMethodOverloadingInParentClass()\n
    {\n
        // if there's __call any name would be callable\n
        return is_callable('parent::aFunctionNameThatNoOneWouldEverUseInRealLife12345');\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    private function getNonPublicMethods()\n
    {\n
        return array_map(\n
            function ($method) {\n
                return $method->getName();\n
            },\n
            array_filter($this->mockery_getMethods(), function ($method) {\n
                return !$method->isPublic();\n
            })\n
        );\n
    }\n
public function fromPayPalResponse(\stdClass $data): ?\Inpsyde\PayPalCommerce\ApiClient\Entity\Payee{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    }\n
'
                                        )
                                        '82a030f49603ef53399b763d307d31a2' => Mockery\Generator\MockDefinition Object &0000000021e1fef5000000005777935d (
                                            'config' => Mockery\Generator\MockConfiguration Object &0000000021e1fec5000000005777935d (
                                                'targetClass' => Mockery\Generator\DefinedTargetClass Object &0000000021e1feff000000005777935d (
                                                    'rfc' => ReflectionClass Object &0000000021e1fefe000000005777935d (
                                                        'name' => 'Inpsyde\PayPalCommerce\ApiClient\Repository\PayeeRepository'
                                                    )
                                                )
                                                'targetClassName' => '\Inpsyde\PayPalCommerce\ApiClient\Repository\PayeeRepository'
                                                'targetInterfaces' => Array &2177 ()
                                                'targetInterfaceNames' => Array &2178 ()
                                                'targetTraits' => Array &2179 ()
                                                'targetTraitNames' => Array &2180 ()
                                                'targetObject' => null
                                                'name' => 'Mockery_9_Inpsyde_PayPalCommerce_ApiClient_Repository_PayeeRepository'
                                                'blackListedMethods' => Array &2181 (
                                                    0 => '__call'
                                                    1 => '__callStatic'
                                                    2 => '__clone'
                                                    3 => '__wakeup'
                                                    4 => '__set'
                                                    5 => '__get'
                                                    6 => '__toString'
                                                    7 => '__isset'
                                                    8 => '__destruct'
                                                    9 => '__debugInfo'
                                                    10 => '__halt_compiler'
                                                    30 => 'empty'
                                                    37 => 'eval'
                                                    53 => 'isset'
                                                    70 => 'unset'
                                                )
                                                'whiteListedMethods' => Array &2182 ()
                                                'instanceMock' => false
                                                'parameterOverrides' => Array &2183 ()
                                                'allMethods' => Array &2184 (
                                                    0 => Mockery\Generator\Method Object &0000000021e1fef8000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fefa000000005777935d (
                                                            'name' => '__construct'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Repository\PayeeRepository'
                                                        )
                                                    )
                                                    1 => Mockery\Generator\Method Object &0000000021e1fef7000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fef9000000005777935d (
                                                            'name' => 'payee'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Repository\PayeeRepository'
                                                        )
                                                    )
                                                )
                                                'mockOriginalDestructor' => true
                                                'constantsMap' => Array &2185 ()
                                            )
                                            'code' => '<?php\n
/**\n
 * Mockery\n
 *\n
 * LICENSE\n
 *\n
 * This source file is subject to the new BSD license that is bundled\n
 * with this package in the file LICENSE.txt.\n
 * It is also available through the world-wide-web at this URL:\n
 * http://github.com/padraic/mockery/blob/master/LICENSE\n
 * If you did not receive a copy of the license and are unable to\n
 * obtain it through the world-wide-web, please send an email\n
 * to padraic@php.net so we can send you a copy immediately.\n
 *\n
 * @category   Mockery\n
 * @package    Mockery\n
 * @copyright  Copyright (c) 2010 Pádraic Brady (http://blog.astrumfutura.com)\n
 * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License\n
 */\n
\n
\n
\n
use Mockery\HigherOrderMessage;\n
use Mockery\MockInterface;\n
use Mockery\LegacyMockInterface;\n
use Mockery\ExpectsHigherOrderMessage;\n
use Mockery\Exception\BadMethodCallException;\n
\n
class Mockery_9_Inpsyde_PayPalCommerce_ApiClient_Repository_PayeeRepository extends \Inpsyde\PayPalCommerce\ApiClient\Repository\PayeeRepository implements MockInterface\n
{\n
    /**\n
     * Stores an array of all expectation directors for this mock\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_expectations = array();\n
\n
    /**\n
     * Stores an inital number of expectations that can be manipulated\n
     * while using the getter method.\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_expectations_count = 0;\n
\n
    /**\n
     * Flag to indicate whether we can ignore method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_ignoreMissing = false;\n
\n
    /**\n
     * Flag to indicate whether we can defer method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_deferMissing = false;\n
\n
    /**\n
     * Flag to indicate whether this mock was verified\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_verified = false;\n
\n
    /**\n
     * Given name of the mock\n
     *\n
     * @var string\n
     */\n
    protected $_mockery_name = null;\n
\n
    /**\n
     * Order number of allocation\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_allocatedOrder = 0;\n
\n
    /**\n
     * Current ordered number\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_currentOrder = 0;\n
\n
    /**\n
     * Ordered groups\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_groups = array();\n
\n
    /**\n
     * Mock container containing this mock object\n
     *\n
     * @var \Mockery\Container\n
     */\n
    protected $_mockery_container = null;\n
\n
    /**\n
     * Instance of a core object on which methods are called in the event\n
     * it has been set, and an expectation for one of the object's methods\n
     * does not exist. This implements a simple partial mock proxy system.\n
     *\n
     * @var object\n
     */\n
    protected $_mockery_partial = null;\n
\n
    /**\n
     * Flag to indicate we should ignore all expectations temporarily. Used\n
     * mainly to prevent expectation matching when in the middle of a mock\n
     * object recording session.\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_disableExpectationMatching = false;\n
\n
    /**\n
     * Stores all stubbed public methods separate from any on-object public\n
     * properties that may exist.\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_mockableProperties = array();\n
\n
    /**\n
     * @var array\n
     */\n
    protected $_mockery_mockableMethods = array();\n
\n
    /**\n
     * Just a local cache for this mock's target's methods\n
     *\n
     * @var \ReflectionMethod[]\n
     */\n
    protected static $_mockery_methods;\n
\n
    protected $_mockery_allowMockingProtectedMethods = false;\n
\n
    protected $_mockery_receivedMethodCalls;\n
\n
    /**\n
     * If shouldIgnoreMissing is called, this value will be returned on all calls to missing methods\n
     * @var mixed\n
     */\n
    protected $_mockery_defaultReturnValue = null;\n
\n
    /**\n
     * Tracks internally all the bad method call exceptions that happened during runtime\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_thrownExceptions = [];\n
\n
    protected $_mockery_instanceMock = true;\n
\n
    /**\n
     * We want to avoid constructors since class is copied to Generator.php\n
     * for inclusion on extending class definitions.\n
     *\n
     * @param \Mockery\Container $container\n
     * @param object $partialObject\n
     * @param bool $instanceMock\n
     * @return void\n
     */\n
    public function mockery_init(\Mockery\Container $container = null, $partialObject = null, $instanceMock = true)\n
    {\n
        if (is_null($container)) {\n
            $container = new \Mockery\Container;\n
        }\n
        $this->_mockery_container = $container;\n
        if (!is_null($partialObject)) {\n
            $this->_mockery_partial = $partialObject;\n
        }\n
\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isPublic()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_instanceMock = $instanceMock;\n
    }\n
\n
    /**\n
     * Set expected method calls\n
     *\n
     * @param mixed ...$methodNames one or many methods that are expected to be called in this mock\n
     *\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldReceive");\n
        }\n
\n
        foreach ($methodNames as $method) {\n
            if ("" == $method) {\n
                throw new \InvalidArgumentException("Received empty method name");\n
            }\n
        }\n
\n
        $self = $this;\n
        $allowMockingProtectedMethods = $this->_mockery_allowMockingProtectedMethods;\n
\n
        $lastExpectation = \Mockery::parseShouldReturnArgs(\n
            $this, $methodNames, function ($method) use ($self, $allowMockingProtectedMethods) {\n
                $rm = $self->mockery_getMethod($method);\n
                if ($rm) {\n
                    if ($rm->isPrivate()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a private method");\n
                    }\n
                    if (!$allowMockingProtectedMethods && $rm->isProtected()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a protected method and mocking protected methods is not enabled for the currently used mock object. Use shouldAllowMockingProtectedMethods() to enable mocking of protected methods.");\n
                    }\n
                }\n
\n
                $director = $self->mockery_getExpectationsFor($method);\n
                if (!$director) {\n
                    $director = new \Mockery\ExpectationDirector($method, $self);\n
                    $self->mockery_setExpectationsFor($method, $director);\n
                }\n
                $expectation = new \Mockery\Expectation($self, $method);\n
                $director->addExpectation($expectation);\n
                return $expectation;\n
            }\n
        );\n
        return $lastExpectation;\n
    }\n
\n
    // start method allows\n
    /**\n
     * @param mixed $something  String method name or map of method => return\n
     * @return self|\Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function allows($something = [])\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something);\n
        }\n
\n
        if (empty($something)) {\n
            return $this->shouldReceive();\n
        }\n
\n
        foreach ($something as $method => $returnValue) {\n
            $this->shouldReceive($method)->andReturn($returnValue);\n
        }\n
\n
        return $this;\n
    }\n
    // end method allows\n
\n
    // start method expects\n
    /**\n
    /**\n
     * @param mixed $something  String method name (optional)\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|ExpectsHigherOrderMessage\n
     */\n
    public function expects($something = null)\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something)->once();\n
        }\n
\n
        return new ExpectsHigherOrderMessage($this);\n
    }\n
    // end method expects\n
\n
    /**\n
     * Shortcut method for setting an expectation that a method should not be called.\n
     *\n
     * @param array ...$methodNames one or many methods that are expected not to be called in this mock\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldNotReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldNotReceive");\n
        }\n
\n
        $expectation = call_user_func_array(array($this, 'shouldReceive'), $methodNames);\n
        $expectation->never();\n
        return $expectation;\n
    }\n
\n
    /**\n
     * Allows additional methods to be mocked that do not explicitly exist on mocked class\n
     * @param String $method name of the method to be mocked\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingMethod($method)\n
    {\n
        $this->_mockery_mockableMethods[] = $method;\n
        return $this;\n
    }\n
\n
    /**\n
     * Set mock to ignore unexpected methods and return Undefined class\n
     * @param mixed $returnValue the default return value for calls to missing functions on this mock\n
     * @return Mock\n
     */\n
    public function shouldIgnoreMissing($returnValue = null)\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = $returnValue;\n
        return $this;\n
    }\n
\n
    public function asUndefined()\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = new \Mockery\Undefined;\n
        return $this;\n
    }\n
\n
    /**\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingProtectedMethods()\n
    {\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isProtected()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_allowMockingProtectedMethods = true;\n
        return $this;\n
    }\n
\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * This is particularly useless for this class, as it doesn't have a parent,\n
     * but included for completeness\n
     *\n
     * @deprecated 2.0.0 Please use makePartial() instead\n
     *\n
     * @return Mock\n
     */\n
    public function shouldDeferMissing()\n
    {\n
        return $this->makePartial();\n
    }\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * It was an alias for shouldDeferMissing(), which will be removed\n
     * in 2.0.0.\n
     *\n
     * @return Mock\n
     */\n
    public function makePartial()\n
    {\n
        $this->_mockery_deferMissing = true;\n
        return $this;\n
    }\n
\n
    /**\n
     * In the event shouldReceive() accepting one or more methods/returns,\n
     * this method will switch them from normal expectations to default\n
     * expectations\n
     *\n
     * @return self\n
     */\n
    public function byDefault()\n
    {\n
        foreach ($this->_mockery_expectations as $director) {\n
            $exps = $director->getExpectations();\n
            foreach ($exps as $exp) {\n
                $exp->byDefault();\n
            }\n
        }\n
        return $this;\n
    }\n
\n
    /**\n
     * Capture calls to this mock\n
     */\n
    public function __call($method, array $args)\n
    {\n
        return $this->_mockery_handleMethodCall($method, $args);\n
    }\n
\n
    public static function __callStatic($method, array $args)\n
    {\n
        return self::_mockery_handleStaticMethodCall($method, $args);\n
    }\n
\n
    /**\n
     * Forward calls to this magic method to the __call method\n
     */\n
    public function __toString()\n
    {\n
        return $this->__call('__toString', array());\n
    }\n
\n
    /**\n
     * Iterate across all expectation directors and validate each\n
     *\n
     * @throws \Mockery\CountValidator\Exception\n
     * @return void\n
     */\n
    public function mockery_verify()\n
    {\n
        if ($this->_mockery_verified) {\n
            return;\n
        }\n
        if (isset($this->_mockery_ignoreVerification)\n
            && $this->_mockery_ignoreVerification == true) {\n
            return;\n
        }\n
        $this->_mockery_verified = true;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $director->verify();\n
        }\n
    }\n
\n
    /**\n
     * Gets a list of exceptions thrown by this mock\n
     *\n
     * @return array\n
     */\n
    public function mockery_thrownExceptions()\n
    {\n
        return $this->_mockery_thrownExceptions;\n
    }\n
\n
    /**\n
     * Tear down tasks for this mock\n
     *\n
     * @return void\n
     */\n
    public function mockery_teardown()\n
    {\n
    }\n
\n
    /**\n
     * Fetch the next available allocation order number\n
     *\n
     * @return int\n
     */\n
    public function mockery_allocateOrder()\n
    {\n
        $this->_mockery_allocatedOrder += 1;\n
        return $this->_mockery_allocatedOrder;\n
    }\n
\n
    /**\n
     * Set ordering for a group\n
     *\n
     * @param mixed $group\n
     * @param int $order\n
     */\n
    public function mockery_setGroup($group, $order)\n
    {\n
        $this->_mockery_groups[$group] = $order;\n
    }\n
\n
    /**\n
     * Fetch array of ordered groups\n
     *\n
     * @return array\n
     */\n
    public function mockery_getGroups()\n
    {\n
        return $this->_mockery_groups;\n
    }\n
\n
    /**\n
     * Set current ordered number\n
     *\n
     * @param int $order\n
     */\n
    public function mockery_setCurrentOrder($order)\n
    {\n
        $this->_mockery_currentOrder = $order;\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Get current ordered number\n
     *\n
     * @return int\n
     */\n
    public function mockery_getCurrentOrder()\n
    {\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Validate the current mock's ordering\n
     *\n
     * @param string $method\n
     * @param int $order\n
     * @throws \Mockery\Exception\n
     * @return void\n
     */\n
    public function mockery_validateOrder($method, $order)\n
    {\n
        if ($order < $this->_mockery_currentOrder) {\n
            $exception = new \Mockery\Exception\InvalidOrderException(\n
                'Method ' . __CLASS__ . '::' . $method . '()'\n
                . ' called out of order: expected order '\n
                . $order . ', was ' . $this->_mockery_currentOrder\n
            );\n
            $exception->setMock($this)\n
                ->setMethodName($method)\n
                ->setExpectedOrder($order)\n
                ->setActualOrder($this->_mockery_currentOrder);\n
            throw $exception;\n
        }\n
        $this->mockery_setCurrentOrder($order);\n
    }\n
\n
    /**\n
     * Gets the count of expectations for this mock\n
     *\n
     * @return int\n
     */\n
    public function mockery_getExpectationCount()\n
    {\n
        $count = $this->_mockery_expectations_count;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $count += $director->getExpectationCount();\n
        }\n
        return $count;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_setExpectationsFor($method, \Mockery\ExpectationDirector $director)\n
    {\n
        $this->_mockery_expectations[$method] = $director;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_getExpectationsFor($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
    }\n
\n
    /**\n
     * Find an expectation matching the given method and arguments\n
     *\n
     * @var string $method\n
     * @var array $args\n
     * @return \Mockery\Expectation|null\n
     */\n
    public function mockery_findExpectation($method, array $args)\n
    {\n
        if (!isset($this->_mockery_expectations[$method])) {\n
            return null;\n
        }\n
        $director = $this->_mockery_expectations[$method];\n
\n
        return $director->findExpectation($args);\n
    }\n
\n
    /**\n
     * Return the container for this mock\n
     *\n
     * @return \Mockery\Container\n
     */\n
    public function mockery_getContainer()\n
    {\n
        return $this->_mockery_container;\n
    }\n
\n
    /**\n
     * Return the name for this mock\n
     *\n
     * @return string\n
     */\n
    public function mockery_getName()\n
    {\n
        return __CLASS__;\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    public function mockery_getMockableProperties()\n
    {\n
        return $this->_mockery_mockableProperties;\n
    }\n
\n
    public function __isset($name)\n
    {\n
        if (false === stripos($name, '_mockery_') && method_exists(get_parent_class($this), '__isset')) {\n
            return call_user_func('parent::__isset', $name);\n
        }\n
\n
        return false;\n
    }\n
\n
    public function mockery_getExpectations()\n
    {\n
        return $this->_mockery_expectations;\n
    }\n
\n
    /**\n
     * Calls a parent class method and returns the result. Used in a passthru\n
     * expectation where a real return value is required while still taking\n
     * advantage of expectation matching and call count verification.\n
     *\n
     * @param string $name\n
     * @param array $args\n
     * @return mixed\n
     */\n
    public function mockery_callSubjectMethod($name, array $args)\n
    {\n
        if (!method_exists($this, $name) && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $name, $args);\n
        }\n
        return call_user_func_array('parent::' . $name, $args);\n
    }\n
\n
    /**\n
     * @return string[]\n
     */\n
    public function mockery_getMockableMethods()\n
    {\n
        return $this->_mockery_mockableMethods;\n
    }\n
\n
    /**\n
     * @return bool\n
     */\n
    public function mockery_isAnonymous()\n
    {\n
        $rfc = new \ReflectionClass($this);\n
\n
        // HHVM has a Stringish interface\n
        $interfaces = array_filter($rfc->getInterfaces(), function ($i) {\n
            return $i->getName() !== "Stringish";\n
        });\n
        $onlyImplementsMock = 2 == count($interfaces);\n
\n
        return (false === $rfc->getParentClass()) && $onlyImplementsMock;\n
    }\n
\n
    public function mockery_isInstance()\n
    {\n
        return $this->_mockery_instanceMock;\n
    }\n
\n
    public function __wakeup()\n
    {\n
        /**\n
         * This does not add __wakeup method support. It's a blind method and any\n
         * expected __wakeup work will NOT be performed. It merely cuts off\n
         * annoying errors where a __wakeup exists but is not essential when\n
         * mocking\n
         */\n
    }\n
\n
    public function __destruct()\n
    {\n
        /**\n
         * Overrides real class destructor in case if class was created without original constructor\n
         */\n
    }\n
\n
    public function mockery_getMethod($name)\n
    {\n
        foreach ($this->mockery_getMethods() as $method) {\n
            if ($method->getName() == $name) {\n
                return $method;\n
            }\n
        }\n
\n
        return null;\n
    }\n
\n
    /**\n
     * @param string $name Method name.\n
     *\n
     * @return mixed Generated return value based on the declared return value of the named method.\n
     */\n
    public function mockery_returnValueForMethod($name)\n
    {\n
        if (version_compare(PHP_VERSION, '7.0.0-dev') < 0) {\n
            return;\n
        }\n
\n
        $rm = $this->mockery_getMethod($name);\n
        if (!$rm || !$rm->hasReturnType()) {\n
            return;\n
        }\n
\n
        $returnType = $rm->getReturnType();\n
\n
        // Default return value for methods with nullable type is null\n
        if ($returnType->allowsNull()) {\n
            return null;\n
        }\n
\n
        $type = PHP_VERSION_ID >= 70100 ? $returnType->getName() : (string) $returnType;\n
        switch ($type) {\n
            case '':       return;\n
            case 'string': return '';\n
            case 'int':    return 0;\n
            case 'float':  return 0.0;\n
            case 'bool':   return false;\n
            case 'array':  return [];\n
\n
            case 'callable':\n
            case 'Closure':\n
                return function () {\n
                };\n
\n
            case 'Traversable':\n
            case 'Generator':\n
                // Remove eval() when minimum version >=5.5\n
                $generator = eval('return function () { yield; };');\n
                return $generator();\n
\n
            case 'self':\n
                return \Mockery::mock($rm->getDeclaringClass()->getName());\n
\n
            case 'void':\n
                return null;\n
\n
            case 'object':\n
                if (version_compare(PHP_VERSION, '7.2.0-dev') >= 0) {\n
                    return \Mockery::mock();\n
                }\n
\n
            default:\n
                return \Mockery::mock($type);\n
        }\n
    }\n
\n
    public function shouldHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->atLeast()->once();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return $director;\n
    }\n
\n
    public function shouldHaveBeenCalled()\n
    {\n
        return $this->shouldHaveReceived("__invoke");\n
    }\n
\n
    public function shouldNotHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldNotHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->never();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return null;\n
    }\n
\n
    public function shouldNotHaveBeenCalled(array $args = null)\n
    {\n
        return $this->shouldNotHaveReceived("__invoke", $args);\n
    }\n
\n
    protected static function _mockery_handleStaticMethodCall($method, array $args)\n
    {\n
        $associatedRealObject = \Mockery::fetchMock(__CLASS__);\n
        try {\n
            return $associatedRealObject->__call($method, $args);\n
        } catch (BadMethodCallException $e) {\n
            throw new BadMethodCallException(\n
                'Static method ' . $associatedRealObject->mockery_getName() . '::' . $method\n
                . '() does not exist on this mock object',\n
                null,\n
                $e\n
            );\n
        }\n
    }\n
\n
    protected function _mockery_getReceivedMethodCalls()\n
    {\n
        return $this->_mockery_receivedMethodCalls ?: $this->_mockery_receivedMethodCalls = new \Mockery\ReceivedMethodCalls();\n
    }\n
\n
    /**\n
     * Called when an instance Mock was created and its constructor is getting called\n
     *\n
     * @see \Mockery\Generator\StringManipulation\Pass\InstanceMockPass\n
     * @param array $args\n
     */\n
    protected function _mockery_constructorCalled(array $args)\n
    {\n
        if (!isset($this->_mockery_expectations['__construct']) /* _mockery_handleMethodCall runs the other checks */) {\n
            return;\n
        }\n
        $this->_mockery_handleMethodCall('__construct', $args);\n
    }\n
\n
    protected function _mockery_findExpectedMethodHandler($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
\n
        $lowerCasedMockeryExpectations = array_change_key_case($this->_mockery_expectations, CASE_LOWER);\n
        $lowerCasedMethod = strtolower($method);\n
\n
        if (isset($lowerCasedMockeryExpectations[$lowerCasedMethod])) {\n
            return $lowerCasedMockeryExpectations[$lowerCasedMethod];\n
        }\n
\n
        return null;\n
    }\n
\n
    protected function _mockery_handleMethodCall($method, array $args)\n
    {\n
        $this->_mockery_getReceivedMethodCalls()->push(new \Mockery\MethodCall($method, $args));\n
\n
        $rm = $this->mockery_getMethod($method);\n
        if ($rm && $rm->isProtected() && !$this->_mockery_allowMockingProtectedMethods) {\n
            if ($rm->isAbstract()) {\n
                return;\n
            }\n
\n
            try {\n
                $prototype = $rm->getPrototype();\n
                if ($prototype->isAbstract()) {\n
                    return;\n
                }\n
            } catch (\ReflectionException $re) {\n
                // noop - there is no hasPrototype method\n
            }\n
\n
            return call_user_func_array("parent::$method", $args);\n
        }\n
\n
        $handler = $this->_mockery_findExpectedMethodHandler($method);\n
\n
        if ($handler !== null && !$this->_mockery_disableExpectationMatching) {\n
            try {\n
                return $handler->call($args);\n
            } catch (\Mockery\Exception\NoMatchingExpectationException $e) {\n
                if (!$this->_mockery_ignoreMissing && !$this->_mockery_deferMissing) {\n
                    throw $e;\n
                }\n
            }\n
        }\n
\n
        if (!is_null($this->_mockery_partial) &&\n
            (method_exists($this->_mockery_partial, $method) || method_exists($this->_mockery_partial, '__call'))\n
        ) {\n
            return call_user_func_array(array($this->_mockery_partial, $method), $args);\n
        } elseif ($this->_mockery_deferMissing && is_callable("parent::$method")\n
            && (!$this->hasMethodOverloadingInParentClass() || method_exists(get_parent_class($this), $method))) {\n
            return call_user_func_array("parent::$method", $args);\n
        } elseif ($this->_mockery_deferMissing && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $method, $args);\n
        } elseif ($method == '__toString') {\n
            // __toString is special because we force its addition to the class API regardless of the\n
            // original implementation.  Thus, we should always return a string rather than honor\n
            // _mockery_ignoreMissing and break the API with an error.\n
            return sprintf("%s#%s", __CLASS__, spl_object_hash($this));\n
        } elseif ($this->_mockery_ignoreMissing) {\n
            if (\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed() || (method_exists($this->_mockery_partial, $method) || is_callable("parent::$method"))) {\n
                if ($this->_mockery_defaultReturnValue instanceof \Mockery\Undefined) {\n
                    return call_user_func_array(array($this->_mockery_defaultReturnValue, $method), $args);\n
                } elseif (null === $this->_mockery_defaultReturnValue) {\n
                    return $this->mockery_returnValueForMethod($method);\n
                }\n
\n
                return $this->_mockery_defaultReturnValue;\n
            }\n
        }\n
\n
        $message = 'Method ' . __CLASS__ . '::' . $method .\n
            '() does not exist on this mock object';\n
\n
        if (!is_null($rm)) {\n
            $message = 'Received ' . __CLASS__ .\n
                '::' . $method . '(), but no expectations were specified';\n
        }\n
\n
        $bmce = new BadMethodCallException($message);\n
        $this->_mockery_thrownExceptions[] = $bmce;\n
        throw $bmce;\n
    }\n
\n
    /**\n
     * Uses reflection to get the list of all\n
     * methods within the current mock object\n
     *\n
     * @return array\n
     */\n
    protected function mockery_getMethods()\n
    {\n
        if (static::$_mockery_methods && \Mockery::getConfiguration()->reflectionCacheEnabled()) {\n
            return static::$_mockery_methods;\n
        }\n
\n
        if (isset($this->_mockery_partial)) {\n
            $reflected = new \ReflectionObject($this->_mockery_partial);\n
        } else {\n
            $reflected = new \ReflectionClass($this);\n
        }\n
\n
        return static::$_mockery_methods = $reflected->getMethods();\n
    }\n
\n
    private function hasMethodOverloadingInParentClass()\n
    {\n
        // if there's __call any name would be callable\n
        return is_callable('parent::aFunctionNameThatNoOneWouldEverUseInRealLife12345');\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    private function getNonPublicMethods()\n
    {\n
        return array_map(\n
            function ($method) {\n
                return $method->getName();\n
            },\n
            array_filter($this->mockery_getMethods(), function ($method) {\n
                return !$method->isPublic();\n
            })\n
        );\n
    }\n
public function __construct(\Inpsyde\PayPalCommerce\ApiClient\Config\Config $config){\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function payee(): \Inpsyde\PayPalCommerce\ApiClient\Entity\Payee{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    }\n
'
                                        )
                                        '1e88774f4d8e87e1894276b6c355766c' => Mockery\Generator\MockDefinition Object &0000000021e1fee8000000005777935d (
                                            'config' => Mockery\Generator\MockConfiguration Object &0000000021e1fec2000000005777935d (
                                                'targetClass' => Mockery\Generator\DefinedTargetClass Object &0000000021e1fef4000000005777935d (
                                                    'rfc' => ReflectionClass Object &0000000021e1fefb000000005777935d (
                                                        'name' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Payee'
                                                    )
                                                )
                                                'targetClassName' => '\Inpsyde\PayPalCommerce\ApiClient\Entity\Payee'
                                                'targetInterfaces' => Array &2186 ()
                                                'targetInterfaceNames' => Array &2187 ()
                                                'targetTraits' => Array &2188 ()
                                                'targetTraitNames' => Array &2189 ()
                                                'targetObject' => null
                                                'name' => 'Mockery_10_Inpsyde_PayPalCommerce_ApiClient_Entity_Payee'
                                                'blackListedMethods' => Array &2190 (
                                                    0 => '__call'
                                                    1 => '__callStatic'
                                                    2 => '__clone'
                                                    3 => '__wakeup'
                                                    4 => '__set'
                                                    5 => '__get'
                                                    6 => '__toString'
                                                    7 => '__isset'
                                                    8 => '__destruct'
                                                    9 => '__debugInfo'
                                                    10 => '__halt_compiler'
                                                    30 => 'empty'
                                                    37 => 'eval'
                                                    53 => 'isset'
                                                    70 => 'unset'
                                                )
                                                'whiteListedMethods' => Array &2191 ()
                                                'instanceMock' => false
                                                'parameterOverrides' => Array &2192 ()
                                                'allMethods' => Array &2193 (
                                                    0 => Mockery\Generator\Method Object &0000000021e1feed000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fef1000000005777935d (
                                                            'name' => '__construct'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Payee'
                                                        )
                                                    )
                                                    1 => Mockery\Generator\Method Object &0000000021e1feec000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1fef0000000005777935d (
                                                            'name' => 'email'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Payee'
                                                        )
                                                    )
                                                    2 => Mockery\Generator\Method Object &0000000021e1feeb000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1feef000000005777935d (
                                                            'name' => 'merchantId'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Payee'
                                                        )
                                                    )
                                                    3 => Mockery\Generator\Method Object &0000000021e1feea000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1feee000000005777935d (
                                                            'name' => 'toArray'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Payee'
                                                        )
                                                    )
                                                )
                                                'mockOriginalDestructor' => true
                                                'constantsMap' => Array &2194 ()
                                            )
                                            'code' => '<?php\n
/**\n
 * Mockery\n
 *\n
 * LICENSE\n
 *\n
 * This source file is subject to the new BSD license that is bundled\n
 * with this package in the file LICENSE.txt.\n
 * It is also available through the world-wide-web at this URL:\n
 * http://github.com/padraic/mockery/blob/master/LICENSE\n
 * If you did not receive a copy of the license and are unable to\n
 * obtain it through the world-wide-web, please send an email\n
 * to padraic@php.net so we can send you a copy immediately.\n
 *\n
 * @category   Mockery\n
 * @package    Mockery\n
 * @copyright  Copyright (c) 2010 Pádraic Brady (http://blog.astrumfutura.com)\n
 * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License\n
 */\n
\n
\n
\n
use Mockery\HigherOrderMessage;\n
use Mockery\MockInterface;\n
use Mockery\LegacyMockInterface;\n
use Mockery\ExpectsHigherOrderMessage;\n
use Mockery\Exception\BadMethodCallException;\n
\n
class Mockery_10_Inpsyde_PayPalCommerce_ApiClient_Entity_Payee extends \Inpsyde\PayPalCommerce\ApiClient\Entity\Payee implements MockInterface\n
{\n
    /**\n
     * Stores an array of all expectation directors for this mock\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_expectations = array();\n
\n
    /**\n
     * Stores an inital number of expectations that can be manipulated\n
     * while using the getter method.\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_expectations_count = 0;\n
\n
    /**\n
     * Flag to indicate whether we can ignore method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_ignoreMissing = false;\n
\n
    /**\n
     * Flag to indicate whether we can defer method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_deferMissing = false;\n
\n
    /**\n
     * Flag to indicate whether this mock was verified\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_verified = false;\n
\n
    /**\n
     * Given name of the mock\n
     *\n
     * @var string\n
     */\n
    protected $_mockery_name = null;\n
\n
    /**\n
     * Order number of allocation\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_allocatedOrder = 0;\n
\n
    /**\n
     * Current ordered number\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_currentOrder = 0;\n
\n
    /**\n
     * Ordered groups\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_groups = array();\n
\n
    /**\n
     * Mock container containing this mock object\n
     *\n
     * @var \Mockery\Container\n
     */\n
    protected $_mockery_container = null;\n
\n
    /**\n
     * Instance of a core object on which methods are called in the event\n
     * it has been set, and an expectation for one of the object's methods\n
     * does not exist. This implements a simple partial mock proxy system.\n
     *\n
     * @var object\n
     */\n
    protected $_mockery_partial = null;\n
\n
    /**\n
     * Flag to indicate we should ignore all expectations temporarily. Used\n
     * mainly to prevent expectation matching when in the middle of a mock\n
     * object recording session.\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_disableExpectationMatching = false;\n
\n
    /**\n
     * Stores all stubbed public methods separate from any on-object public\n
     * properties that may exist.\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_mockableProperties = array();\n
\n
    /**\n
     * @var array\n
     */\n
    protected $_mockery_mockableMethods = array();\n
\n
    /**\n
     * Just a local cache for this mock's target's methods\n
     *\n
     * @var \ReflectionMethod[]\n
     */\n
    protected static $_mockery_methods;\n
\n
    protected $_mockery_allowMockingProtectedMethods = false;\n
\n
    protected $_mockery_receivedMethodCalls;\n
\n
    /**\n
     * If shouldIgnoreMissing is called, this value will be returned on all calls to missing methods\n
     * @var mixed\n
     */\n
    protected $_mockery_defaultReturnValue = null;\n
\n
    /**\n
     * Tracks internally all the bad method call exceptions that happened during runtime\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_thrownExceptions = [];\n
\n
    protected $_mockery_instanceMock = true;\n
\n
    /**\n
     * We want to avoid constructors since class is copied to Generator.php\n
     * for inclusion on extending class definitions.\n
     *\n
     * @param \Mockery\Container $container\n
     * @param object $partialObject\n
     * @param bool $instanceMock\n
     * @return void\n
     */\n
    public function mockery_init(\Mockery\Container $container = null, $partialObject = null, $instanceMock = true)\n
    {\n
        if (is_null($container)) {\n
            $container = new \Mockery\Container;\n
        }\n
        $this->_mockery_container = $container;\n
        if (!is_null($partialObject)) {\n
            $this->_mockery_partial = $partialObject;\n
        }\n
\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isPublic()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_instanceMock = $instanceMock;\n
    }\n
\n
    /**\n
     * Set expected method calls\n
     *\n
     * @param mixed ...$methodNames one or many methods that are expected to be called in this mock\n
     *\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldReceive");\n
        }\n
\n
        foreach ($methodNames as $method) {\n
            if ("" == $method) {\n
                throw new \InvalidArgumentException("Received empty method name");\n
            }\n
        }\n
\n
        $self = $this;\n
        $allowMockingProtectedMethods = $this->_mockery_allowMockingProtectedMethods;\n
\n
        $lastExpectation = \Mockery::parseShouldReturnArgs(\n
            $this, $methodNames, function ($method) use ($self, $allowMockingProtectedMethods) {\n
                $rm = $self->mockery_getMethod($method);\n
                if ($rm) {\n
                    if ($rm->isPrivate()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a private method");\n
                    }\n
                    if (!$allowMockingProtectedMethods && $rm->isProtected()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a protected method and mocking protected methods is not enabled for the currently used mock object. Use shouldAllowMockingProtectedMethods() to enable mocking of protected methods.");\n
                    }\n
                }\n
\n
                $director = $self->mockery_getExpectationsFor($method);\n
                if (!$director) {\n
                    $director = new \Mockery\ExpectationDirector($method, $self);\n
                    $self->mockery_setExpectationsFor($method, $director);\n
                }\n
                $expectation = new \Mockery\Expectation($self, $method);\n
                $director->addExpectation($expectation);\n
                return $expectation;\n
            }\n
        );\n
        return $lastExpectation;\n
    }\n
\n
    // start method allows\n
    /**\n
     * @param mixed $something  String method name or map of method => return\n
     * @return self|\Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function allows($something = [])\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something);\n
        }\n
\n
        if (empty($something)) {\n
            return $this->shouldReceive();\n
        }\n
\n
        foreach ($something as $method => $returnValue) {\n
            $this->shouldReceive($method)->andReturn($returnValue);\n
        }\n
\n
        return $this;\n
    }\n
    // end method allows\n
\n
    // start method expects\n
    /**\n
    /**\n
     * @param mixed $something  String method name (optional)\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|ExpectsHigherOrderMessage\n
     */\n
    public function expects($something = null)\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something)->once();\n
        }\n
\n
        return new ExpectsHigherOrderMessage($this);\n
    }\n
    // end method expects\n
\n
    /**\n
     * Shortcut method for setting an expectation that a method should not be called.\n
     *\n
     * @param array ...$methodNames one or many methods that are expected not to be called in this mock\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldNotReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldNotReceive");\n
        }\n
\n
        $expectation = call_user_func_array(array($this, 'shouldReceive'), $methodNames);\n
        $expectation->never();\n
        return $expectation;\n
    }\n
\n
    /**\n
     * Allows additional methods to be mocked that do not explicitly exist on mocked class\n
     * @param String $method name of the method to be mocked\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingMethod($method)\n
    {\n
        $this->_mockery_mockableMethods[] = $method;\n
        return $this;\n
    }\n
\n
    /**\n
     * Set mock to ignore unexpected methods and return Undefined class\n
     * @param mixed $returnValue the default return value for calls to missing functions on this mock\n
     * @return Mock\n
     */\n
    public function shouldIgnoreMissing($returnValue = null)\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = $returnValue;\n
        return $this;\n
    }\n
\n
    public function asUndefined()\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = new \Mockery\Undefined;\n
        return $this;\n
    }\n
\n
    /**\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingProtectedMethods()\n
    {\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isProtected()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_allowMockingProtectedMethods = true;\n
        return $this;\n
    }\n
\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * This is particularly useless for this class, as it doesn't have a parent,\n
     * but included for completeness\n
     *\n
     * @deprecated 2.0.0 Please use makePartial() instead\n
     *\n
     * @return Mock\n
     */\n
    public function shouldDeferMissing()\n
    {\n
        return $this->makePartial();\n
    }\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * It was an alias for shouldDeferMissing(), which will be removed\n
     * in 2.0.0.\n
     *\n
     * @return Mock\n
     */\n
    public function makePartial()\n
    {\n
        $this->_mockery_deferMissing = true;\n
        return $this;\n
    }\n
\n
    /**\n
     * In the event shouldReceive() accepting one or more methods/returns,\n
     * this method will switch them from normal expectations to default\n
     * expectations\n
     *\n
     * @return self\n
     */\n
    public function byDefault()\n
    {\n
        foreach ($this->_mockery_expectations as $director) {\n
            $exps = $director->getExpectations();\n
            foreach ($exps as $exp) {\n
                $exp->byDefault();\n
            }\n
        }\n
        return $this;\n
    }\n
\n
    /**\n
     * Capture calls to this mock\n
     */\n
    public function __call($method, array $args)\n
    {\n
        return $this->_mockery_handleMethodCall($method, $args);\n
    }\n
\n
    public static function __callStatic($method, array $args)\n
    {\n
        return self::_mockery_handleStaticMethodCall($method, $args);\n
    }\n
\n
    /**\n
     * Forward calls to this magic method to the __call method\n
     */\n
    public function __toString()\n
    {\n
        return $this->__call('__toString', array());\n
    }\n
\n
    /**\n
     * Iterate across all expectation directors and validate each\n
     *\n
     * @throws \Mockery\CountValidator\Exception\n
     * @return void\n
     */\n
    public function mockery_verify()\n
    {\n
        if ($this->_mockery_verified) {\n
            return;\n
        }\n
        if (isset($this->_mockery_ignoreVerification)\n
            && $this->_mockery_ignoreVerification == true) {\n
            return;\n
        }\n
        $this->_mockery_verified = true;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $director->verify();\n
        }\n
    }\n
\n
    /**\n
     * Gets a list of exceptions thrown by this mock\n
     *\n
     * @return array\n
     */\n
    public function mockery_thrownExceptions()\n
    {\n
        return $this->_mockery_thrownExceptions;\n
    }\n
\n
    /**\n
     * Tear down tasks for this mock\n
     *\n
     * @return void\n
     */\n
    public function mockery_teardown()\n
    {\n
    }\n
\n
    /**\n
     * Fetch the next available allocation order number\n
     *\n
     * @return int\n
     */\n
    public function mockery_allocateOrder()\n
    {\n
        $this->_mockery_allocatedOrder += 1;\n
        return $this->_mockery_allocatedOrder;\n
    }\n
\n
    /**\n
     * Set ordering for a group\n
     *\n
     * @param mixed $group\n
     * @param int $order\n
     */\n
    public function mockery_setGroup($group, $order)\n
    {\n
        $this->_mockery_groups[$group] = $order;\n
    }\n
\n
    /**\n
     * Fetch array of ordered groups\n
     *\n
     * @return array\n
     */\n
    public function mockery_getGroups()\n
    {\n
        return $this->_mockery_groups;\n
    }\n
\n
    /**\n
     * Set current ordered number\n
     *\n
     * @param int $order\n
     */\n
    public function mockery_setCurrentOrder($order)\n
    {\n
        $this->_mockery_currentOrder = $order;\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Get current ordered number\n
     *\n
     * @return int\n
     */\n
    public function mockery_getCurrentOrder()\n
    {\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Validate the current mock's ordering\n
     *\n
     * @param string $method\n
     * @param int $order\n
     * @throws \Mockery\Exception\n
     * @return void\n
     */\n
    public function mockery_validateOrder($method, $order)\n
    {\n
        if ($order < $this->_mockery_currentOrder) {\n
            $exception = new \Mockery\Exception\InvalidOrderException(\n
                'Method ' . __CLASS__ . '::' . $method . '()'\n
                . ' called out of order: expected order '\n
                . $order . ', was ' . $this->_mockery_currentOrder\n
            );\n
            $exception->setMock($this)\n
                ->setMethodName($method)\n
                ->setExpectedOrder($order)\n
                ->setActualOrder($this->_mockery_currentOrder);\n
            throw $exception;\n
        }\n
        $this->mockery_setCurrentOrder($order);\n
    }\n
\n
    /**\n
     * Gets the count of expectations for this mock\n
     *\n
     * @return int\n
     */\n
    public function mockery_getExpectationCount()\n
    {\n
        $count = $this->_mockery_expectations_count;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $count += $director->getExpectationCount();\n
        }\n
        return $count;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_setExpectationsFor($method, \Mockery\ExpectationDirector $director)\n
    {\n
        $this->_mockery_expectations[$method] = $director;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_getExpectationsFor($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
    }\n
\n
    /**\n
     * Find an expectation matching the given method and arguments\n
     *\n
     * @var string $method\n
     * @var array $args\n
     * @return \Mockery\Expectation|null\n
     */\n
    public function mockery_findExpectation($method, array $args)\n
    {\n
        if (!isset($this->_mockery_expectations[$method])) {\n
            return null;\n
        }\n
        $director = $this->_mockery_expectations[$method];\n
\n
        return $director->findExpectation($args);\n
    }\n
\n
    /**\n
     * Return the container for this mock\n
     *\n
     * @return \Mockery\Container\n
     */\n
    public function mockery_getContainer()\n
    {\n
        return $this->_mockery_container;\n
    }\n
\n
    /**\n
     * Return the name for this mock\n
     *\n
     * @return string\n
     */\n
    public function mockery_getName()\n
    {\n
        return __CLASS__;\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    public function mockery_getMockableProperties()\n
    {\n
        return $this->_mockery_mockableProperties;\n
    }\n
\n
    public function __isset($name)\n
    {\n
        if (false === stripos($name, '_mockery_') && method_exists(get_parent_class($this), '__isset')) {\n
            return call_user_func('parent::__isset', $name);\n
        }\n
\n
        return false;\n
    }\n
\n
    public function mockery_getExpectations()\n
    {\n
        return $this->_mockery_expectations;\n
    }\n
\n
    /**\n
     * Calls a parent class method and returns the result. Used in a passthru\n
     * expectation where a real return value is required while still taking\n
     * advantage of expectation matching and call count verification.\n
     *\n
     * @param string $name\n
     * @param array $args\n
     * @return mixed\n
     */\n
    public function mockery_callSubjectMethod($name, array $args)\n
    {\n
        if (!method_exists($this, $name) && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $name, $args);\n
        }\n
        return call_user_func_array('parent::' . $name, $args);\n
    }\n
\n
    /**\n
     * @return string[]\n
     */\n
    public function mockery_getMockableMethods()\n
    {\n
        return $this->_mockery_mockableMethods;\n
    }\n
\n
    /**\n
     * @return bool\n
     */\n
    public function mockery_isAnonymous()\n
    {\n
        $rfc = new \ReflectionClass($this);\n
\n
        // HHVM has a Stringish interface\n
        $interfaces = array_filter($rfc->getInterfaces(), function ($i) {\n
            return $i->getName() !== "Stringish";\n
        });\n
        $onlyImplementsMock = 2 == count($interfaces);\n
\n
        return (false === $rfc->getParentClass()) && $onlyImplementsMock;\n
    }\n
\n
    public function mockery_isInstance()\n
    {\n
        return $this->_mockery_instanceMock;\n
    }\n
\n
    public function __wakeup()\n
    {\n
        /**\n
         * This does not add __wakeup method support. It's a blind method and any\n
         * expected __wakeup work will NOT be performed. It merely cuts off\n
         * annoying errors where a __wakeup exists but is not essential when\n
         * mocking\n
         */\n
    }\n
\n
    public function __destruct()\n
    {\n
        /**\n
         * Overrides real class destructor in case if class was created without original constructor\n
         */\n
    }\n
\n
    public function mockery_getMethod($name)\n
    {\n
        foreach ($this->mockery_getMethods() as $method) {\n
            if ($method->getName() == $name) {\n
                return $method;\n
            }\n
        }\n
\n
        return null;\n
    }\n
\n
    /**\n
     * @param string $name Method name.\n
     *\n
     * @return mixed Generated return value based on the declared return value of the named method.\n
     */\n
    public function mockery_returnValueForMethod($name)\n
    {\n
        if (version_compare(PHP_VERSION, '7.0.0-dev') < 0) {\n
            return;\n
        }\n
\n
        $rm = $this->mockery_getMethod($name);\n
        if (!$rm || !$rm->hasReturnType()) {\n
            return;\n
        }\n
\n
        $returnType = $rm->getReturnType();\n
\n
        // Default return value for methods with nullable type is null\n
        if ($returnType->allowsNull()) {\n
            return null;\n
        }\n
\n
        $type = PHP_VERSION_ID >= 70100 ? $returnType->getName() : (string) $returnType;\n
        switch ($type) {\n
            case '':       return;\n
            case 'string': return '';\n
            case 'int':    return 0;\n
            case 'float':  return 0.0;\n
            case 'bool':   return false;\n
            case 'array':  return [];\n
\n
            case 'callable':\n
            case 'Closure':\n
                return function () {\n
                };\n
\n
            case 'Traversable':\n
            case 'Generator':\n
                // Remove eval() when minimum version >=5.5\n
                $generator = eval('return function () { yield; };');\n
                return $generator();\n
\n
            case 'self':\n
                return \Mockery::mock($rm->getDeclaringClass()->getName());\n
\n
            case 'void':\n
                return null;\n
\n
            case 'object':\n
                if (version_compare(PHP_VERSION, '7.2.0-dev') >= 0) {\n
                    return \Mockery::mock();\n
                }\n
\n
            default:\n
                return \Mockery::mock($type);\n
        }\n
    }\n
\n
    public function shouldHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->atLeast()->once();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return $director;\n
    }\n
\n
    public function shouldHaveBeenCalled()\n
    {\n
        return $this->shouldHaveReceived("__invoke");\n
    }\n
\n
    public function shouldNotHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldNotHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->never();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return null;\n
    }\n
\n
    public function shouldNotHaveBeenCalled(array $args = null)\n
    {\n
        return $this->shouldNotHaveReceived("__invoke", $args);\n
    }\n
\n
    protected static function _mockery_handleStaticMethodCall($method, array $args)\n
    {\n
        $associatedRealObject = \Mockery::fetchMock(__CLASS__);\n
        try {\n
            return $associatedRealObject->__call($method, $args);\n
        } catch (BadMethodCallException $e) {\n
            throw new BadMethodCallException(\n
                'Static method ' . $associatedRealObject->mockery_getName() . '::' . $method\n
                . '() does not exist on this mock object',\n
                null,\n
                $e\n
            );\n
        }\n
    }\n
\n
    protected function _mockery_getReceivedMethodCalls()\n
    {\n
        return $this->_mockery_receivedMethodCalls ?: $this->_mockery_receivedMethodCalls = new \Mockery\ReceivedMethodCalls();\n
    }\n
\n
    /**\n
     * Called when an instance Mock was created and its constructor is getting called\n
     *\n
     * @see \Mockery\Generator\StringManipulation\Pass\InstanceMockPass\n
     * @param array $args\n
     */\n
    protected function _mockery_constructorCalled(array $args)\n
    {\n
        if (!isset($this->_mockery_expectations['__construct']) /* _mockery_handleMethodCall runs the other checks */) {\n
            return;\n
        }\n
        $this->_mockery_handleMethodCall('__construct', $args);\n
    }\n
\n
    protected function _mockery_findExpectedMethodHandler($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
\n
        $lowerCasedMockeryExpectations = array_change_key_case($this->_mockery_expectations, CASE_LOWER);\n
        $lowerCasedMethod = strtolower($method);\n
\n
        if (isset($lowerCasedMockeryExpectations[$lowerCasedMethod])) {\n
            return $lowerCasedMockeryExpectations[$lowerCasedMethod];\n
        }\n
\n
        return null;\n
    }\n
\n
    protected function _mockery_handleMethodCall($method, array $args)\n
    {\n
        $this->_mockery_getReceivedMethodCalls()->push(new \Mockery\MethodCall($method, $args));\n
\n
        $rm = $this->mockery_getMethod($method);\n
        if ($rm && $rm->isProtected() && !$this->_mockery_allowMockingProtectedMethods) {\n
            if ($rm->isAbstract()) {\n
                return;\n
            }\n
\n
            try {\n
                $prototype = $rm->getPrototype();\n
                if ($prototype->isAbstract()) {\n
                    return;\n
                }\n
            } catch (\ReflectionException $re) {\n
                // noop - there is no hasPrototype method\n
            }\n
\n
            return call_user_func_array("parent::$method", $args);\n
        }\n
\n
        $handler = $this->_mockery_findExpectedMethodHandler($method);\n
\n
        if ($handler !== null && !$this->_mockery_disableExpectationMatching) {\n
            try {\n
                return $handler->call($args);\n
            } catch (\Mockery\Exception\NoMatchingExpectationException $e) {\n
                if (!$this->_mockery_ignoreMissing && !$this->_mockery_deferMissing) {\n
                    throw $e;\n
                }\n
            }\n
        }\n
\n
        if (!is_null($this->_mockery_partial) &&\n
            (method_exists($this->_mockery_partial, $method) || method_exists($this->_mockery_partial, '__call'))\n
        ) {\n
            return call_user_func_array(array($this->_mockery_partial, $method), $args);\n
        } elseif ($this->_mockery_deferMissing && is_callable("parent::$method")\n
            && (!$this->hasMethodOverloadingInParentClass() || method_exists(get_parent_class($this), $method))) {\n
            return call_user_func_array("parent::$method", $args);\n
        } elseif ($this->_mockery_deferMissing && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $method, $args);\n
        } elseif ($method == '__toString') {\n
            // __toString is special because we force its addition to the class API regardless of the\n
            // original implementation.  Thus, we should always return a string rather than honor\n
            // _mockery_ignoreMissing and break the API with an error.\n
            return sprintf("%s#%s", __CLASS__, spl_object_hash($this));\n
        } elseif ($this->_mockery_ignoreMissing) {\n
            if (\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed() || (method_exists($this->_mockery_partial, $method) || is_callable("parent::$method"))) {\n
                if ($this->_mockery_defaultReturnValue instanceof \Mockery\Undefined) {\n
                    return call_user_func_array(array($this->_mockery_defaultReturnValue, $method), $args);\n
                } elseif (null === $this->_mockery_defaultReturnValue) {\n
                    return $this->mockery_returnValueForMethod($method);\n
                }\n
\n
                return $this->_mockery_defaultReturnValue;\n
            }\n
        }\n
\n
        $message = 'Method ' . __CLASS__ . '::' . $method .\n
            '() does not exist on this mock object';\n
\n
        if (!is_null($rm)) {\n
            $message = 'Received ' . __CLASS__ .\n
                '::' . $method . '(), but no expectations were specified';\n
        }\n
\n
        $bmce = new BadMethodCallException($message);\n
        $this->_mockery_thrownExceptions[] = $bmce;\n
        throw $bmce;\n
    }\n
\n
    /**\n
     * Uses reflection to get the list of all\n
     * methods within the current mock object\n
     *\n
     * @return array\n
     */\n
    protected function mockery_getMethods()\n
    {\n
        if (static::$_mockery_methods && \Mockery::getConfiguration()->reflectionCacheEnabled()) {\n
            return static::$_mockery_methods;\n
        }\n
\n
        if (isset($this->_mockery_partial)) {\n
            $reflected = new \ReflectionObject($this->_mockery_partial);\n
        } else {\n
            $reflected = new \ReflectionClass($this);\n
        }\n
\n
        return static::$_mockery_methods = $reflected->getMethods();\n
    }\n
\n
    private function hasMethodOverloadingInParentClass()\n
    {\n
        // if there's __call any name would be callable\n
        return is_callable('parent::aFunctionNameThatNoOneWouldEverUseInRealLife12345');\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    private function getNonPublicMethods()\n
    {\n
        return array_map(\n
            function ($method) {\n
                return $method->getName();\n
            },\n
            array_filter($this->mockery_getMethods(), function ($method) {\n
                return !$method->isPublic();\n
            })\n
        );\n
    }\n
public function __construct(string $email, string $merchantId){\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function email(): string{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function merchantId(): string{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function toArray(): array{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    }\n
'
                                        )
                                        '454c867cdcdc1bbc388625ad6b85a562' => Mockery\Generator\MockDefinition Object &0000000021e1ff5e000000005777935d (
                                            'config' => Mockery\Generator\MockConfiguration Object &0000000021e1ff2f000000005777935d (
                                                'targetClass' => Mockery\Generator\DefinedTargetClass Object &0000000021e1ff2c000000005777935d (
                                                    'rfc' => ReflectionClass Object &0000000021e1ff2b000000005777935d (
                                                        'name' => 'Inpsyde\PayPalCommerce\ApiClient\Factory\ItemFactory'
                                                    )
                                                )
                                                'targetClassName' => '\Inpsyde\PayPalCommerce\ApiClient\Factory\ItemFactory'
                                                'targetInterfaces' => Array &2195 ()
                                                'targetInterfaceNames' => Array &2196 ()
                                                'targetTraits' => Array &2197 ()
                                                'targetTraitNames' => Array &2198 ()
                                                'targetObject' => null
                                                'name' => 'Mockery_11_Inpsyde_PayPalCommerce_ApiClient_Factory_ItemFactory'
                                                'blackListedMethods' => Array &2199 (
                                                    0 => '__call'
                                                    1 => '__callStatic'
                                                    2 => '__clone'
                                                    3 => '__wakeup'
                                                    4 => '__set'
                                                    5 => '__get'
                                                    6 => '__toString'
                                                    7 => '__isset'
                                                    8 => '__destruct'
                                                    9 => '__debugInfo'
                                                    10 => '__halt_compiler'
                                                    30 => 'empty'
                                                    37 => 'eval'
                                                    53 => 'isset'
                                                    70 => 'unset'
                                                )
                                                'whiteListedMethods' => Array &2200 ()
                                                'instanceMock' => false
                                                'parameterOverrides' => Array &2201 ()
                                                'allMethods' => Array &2202 (
                                                    0 => Mockery\Generator\Method Object &0000000021e1ff24000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1ff29000000005777935d (
                                                            'name' => '__construct'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Factory\ItemFactory'
                                                        )
                                                    )
                                                    1 => Mockery\Generator\Method Object &0000000021e1ff23000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1ff28000000005777935d (
                                                            'name' => 'fromWcCart'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Factory\ItemFactory'
                                                        )
                                                    )
                                                    2 => Mockery\Generator\Method Object &0000000021e1ff22000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1ff27000000005777935d (
                                                            'name' => 'fromWcOrder'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Factory\ItemFactory'
                                                        )
                                                    )
                                                    3 => Mockery\Generator\Method Object &0000000021e1ff21000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1ff26000000005777935d (
                                                            'name' => 'fromWcOrderLineItem'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Factory\ItemFactory'
                                                        )
                                                    )
                                                    4 => Mockery\Generator\Method Object &0000000021e1ff20000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1ff25000000005777935d (
                                                            'name' => 'fromPayPalRequest'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Factory\ItemFactory'
                                                        )
                                                    )
                                                )
                                                'mockOriginalDestructor' => true
                                                'constantsMap' => Array &2203 ()
                                            )
                                            'code' => '<?php\n
/**\n
 * Mockery\n
 *\n
 * LICENSE\n
 *\n
 * This source file is subject to the new BSD license that is bundled\n
 * with this package in the file LICENSE.txt.\n
 * It is also available through the world-wide-web at this URL:\n
 * http://github.com/padraic/mockery/blob/master/LICENSE\n
 * If you did not receive a copy of the license and are unable to\n
 * obtain it through the world-wide-web, please send an email\n
 * to padraic@php.net so we can send you a copy immediately.\n
 *\n
 * @category   Mockery\n
 * @package    Mockery\n
 * @copyright  Copyright (c) 2010 Pádraic Brady (http://blog.astrumfutura.com)\n
 * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License\n
 */\n
\n
\n
\n
use Mockery\HigherOrderMessage;\n
use Mockery\MockInterface;\n
use Mockery\LegacyMockInterface;\n
use Mockery\ExpectsHigherOrderMessage;\n
use Mockery\Exception\BadMethodCallException;\n
\n
class Mockery_11_Inpsyde_PayPalCommerce_ApiClient_Factory_ItemFactory extends \Inpsyde\PayPalCommerce\ApiClient\Factory\ItemFactory implements MockInterface\n
{\n
    /**\n
     * Stores an array of all expectation directors for this mock\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_expectations = array();\n
\n
    /**\n
     * Stores an inital number of expectations that can be manipulated\n
     * while using the getter method.\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_expectations_count = 0;\n
\n
    /**\n
     * Flag to indicate whether we can ignore method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_ignoreMissing = false;\n
\n
    /**\n
     * Flag to indicate whether we can defer method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_deferMissing = false;\n
\n
    /**\n
     * Flag to indicate whether this mock was verified\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_verified = false;\n
\n
    /**\n
     * Given name of the mock\n
     *\n
     * @var string\n
     */\n
    protected $_mockery_name = null;\n
\n
    /**\n
     * Order number of allocation\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_allocatedOrder = 0;\n
\n
    /**\n
     * Current ordered number\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_currentOrder = 0;\n
\n
    /**\n
     * Ordered groups\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_groups = array();\n
\n
    /**\n
     * Mock container containing this mock object\n
     *\n
     * @var \Mockery\Container\n
     */\n
    protected $_mockery_container = null;\n
\n
    /**\n
     * Instance of a core object on which methods are called in the event\n
     * it has been set, and an expectation for one of the object's methods\n
     * does not exist. This implements a simple partial mock proxy system.\n
     *\n
     * @var object\n
     */\n
    protected $_mockery_partial = null;\n
\n
    /**\n
     * Flag to indicate we should ignore all expectations temporarily. Used\n
     * mainly to prevent expectation matching when in the middle of a mock\n
     * object recording session.\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_disableExpectationMatching = false;\n
\n
    /**\n
     * Stores all stubbed public methods separate from any on-object public\n
     * properties that may exist.\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_mockableProperties = array();\n
\n
    /**\n
     * @var array\n
     */\n
    protected $_mockery_mockableMethods = array();\n
\n
    /**\n
     * Just a local cache for this mock's target's methods\n
     *\n
     * @var \ReflectionMethod[]\n
     */\n
    protected static $_mockery_methods;\n
\n
    protected $_mockery_allowMockingProtectedMethods = false;\n
\n
    protected $_mockery_receivedMethodCalls;\n
\n
    /**\n
     * If shouldIgnoreMissing is called, this value will be returned on all calls to missing methods\n
     * @var mixed\n
     */\n
    protected $_mockery_defaultReturnValue = null;\n
\n
    /**\n
     * Tracks internally all the bad method call exceptions that happened during runtime\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_thrownExceptions = [];\n
\n
    protected $_mockery_instanceMock = true;\n
\n
    /**\n
     * We want to avoid constructors since class is copied to Generator.php\n
     * for inclusion on extending class definitions.\n
     *\n
     * @param \Mockery\Container $container\n
     * @param object $partialObject\n
     * @param bool $instanceMock\n
     * @return void\n
     */\n
    public function mockery_init(\Mockery\Container $container = null, $partialObject = null, $instanceMock = true)\n
    {\n
        if (is_null($container)) {\n
            $container = new \Mockery\Container;\n
        }\n
        $this->_mockery_container = $container;\n
        if (!is_null($partialObject)) {\n
            $this->_mockery_partial = $partialObject;\n
        }\n
\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isPublic()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_instanceMock = $instanceMock;\n
    }\n
\n
    /**\n
     * Set expected method calls\n
     *\n
     * @param mixed ...$methodNames one or many methods that are expected to be called in this mock\n
     *\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldReceive");\n
        }\n
\n
        foreach ($methodNames as $method) {\n
            if ("" == $method) {\n
                throw new \InvalidArgumentException("Received empty method name");\n
            }\n
        }\n
\n
        $self = $this;\n
        $allowMockingProtectedMethods = $this->_mockery_allowMockingProtectedMethods;\n
\n
        $lastExpectation = \Mockery::parseShouldReturnArgs(\n
            $this, $methodNames, function ($method) use ($self, $allowMockingProtectedMethods) {\n
                $rm = $self->mockery_getMethod($method);\n
                if ($rm) {\n
                    if ($rm->isPrivate()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a private method");\n
                    }\n
                    if (!$allowMockingProtectedMethods && $rm->isProtected()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a protected method and mocking protected methods is not enabled for the currently used mock object. Use shouldAllowMockingProtectedMethods() to enable mocking of protected methods.");\n
                    }\n
                }\n
\n
                $director = $self->mockery_getExpectationsFor($method);\n
                if (!$director) {\n
                    $director = new \Mockery\ExpectationDirector($method, $self);\n
                    $self->mockery_setExpectationsFor($method, $director);\n
                }\n
                $expectation = new \Mockery\Expectation($self, $method);\n
                $director->addExpectation($expectation);\n
                return $expectation;\n
            }\n
        );\n
        return $lastExpectation;\n
    }\n
\n
    // start method allows\n
    /**\n
     * @param mixed $something  String method name or map of method => return\n
     * @return self|\Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function allows($something = [])\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something);\n
        }\n
\n
        if (empty($something)) {\n
            return $this->shouldReceive();\n
        }\n
\n
        foreach ($something as $method => $returnValue) {\n
            $this->shouldReceive($method)->andReturn($returnValue);\n
        }\n
\n
        return $this;\n
    }\n
    // end method allows\n
\n
    // start method expects\n
    /**\n
    /**\n
     * @param mixed $something  String method name (optional)\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|ExpectsHigherOrderMessage\n
     */\n
    public function expects($something = null)\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something)->once();\n
        }\n
\n
        return new ExpectsHigherOrderMessage($this);\n
    }\n
    // end method expects\n
\n
    /**\n
     * Shortcut method for setting an expectation that a method should not be called.\n
     *\n
     * @param array ...$methodNames one or many methods that are expected not to be called in this mock\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldNotReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldNotReceive");\n
        }\n
\n
        $expectation = call_user_func_array(array($this, 'shouldReceive'), $methodNames);\n
        $expectation->never();\n
        return $expectation;\n
    }\n
\n
    /**\n
     * Allows additional methods to be mocked that do not explicitly exist on mocked class\n
     * @param String $method name of the method to be mocked\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingMethod($method)\n
    {\n
        $this->_mockery_mockableMethods[] = $method;\n
        return $this;\n
    }\n
\n
    /**\n
     * Set mock to ignore unexpected methods and return Undefined class\n
     * @param mixed $returnValue the default return value for calls to missing functions on this mock\n
     * @return Mock\n
     */\n
    public function shouldIgnoreMissing($returnValue = null)\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = $returnValue;\n
        return $this;\n
    }\n
\n
    public function asUndefined()\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = new \Mockery\Undefined;\n
        return $this;\n
    }\n
\n
    /**\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingProtectedMethods()\n
    {\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isProtected()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_allowMockingProtectedMethods = true;\n
        return $this;\n
    }\n
\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * This is particularly useless for this class, as it doesn't have a parent,\n
     * but included for completeness\n
     *\n
     * @deprecated 2.0.0 Please use makePartial() instead\n
     *\n
     * @return Mock\n
     */\n
    public function shouldDeferMissing()\n
    {\n
        return $this->makePartial();\n
    }\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * It was an alias for shouldDeferMissing(), which will be removed\n
     * in 2.0.0.\n
     *\n
     * @return Mock\n
     */\n
    public function makePartial()\n
    {\n
        $this->_mockery_deferMissing = true;\n
        return $this;\n
    }\n
\n
    /**\n
     * In the event shouldReceive() accepting one or more methods/returns,\n
     * this method will switch them from normal expectations to default\n
     * expectations\n
     *\n
     * @return self\n
     */\n
    public function byDefault()\n
    {\n
        foreach ($this->_mockery_expectations as $director) {\n
            $exps = $director->getExpectations();\n
            foreach ($exps as $exp) {\n
                $exp->byDefault();\n
            }\n
        }\n
        return $this;\n
    }\n
\n
    /**\n
     * Capture calls to this mock\n
     */\n
    public function __call($method, array $args)\n
    {\n
        return $this->_mockery_handleMethodCall($method, $args);\n
    }\n
\n
    public static function __callStatic($method, array $args)\n
    {\n
        return self::_mockery_handleStaticMethodCall($method, $args);\n
    }\n
\n
    /**\n
     * Forward calls to this magic method to the __call method\n
     */\n
    public function __toString()\n
    {\n
        return $this->__call('__toString', array());\n
    }\n
\n
    /**\n
     * Iterate across all expectation directors and validate each\n
     *\n
     * @throws \Mockery\CountValidator\Exception\n
     * @return void\n
     */\n
    public function mockery_verify()\n
    {\n
        if ($this->_mockery_verified) {\n
            return;\n
        }\n
        if (isset($this->_mockery_ignoreVerification)\n
            && $this->_mockery_ignoreVerification == true) {\n
            return;\n
        }\n
        $this->_mockery_verified = true;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $director->verify();\n
        }\n
    }\n
\n
    /**\n
     * Gets a list of exceptions thrown by this mock\n
     *\n
     * @return array\n
     */\n
    public function mockery_thrownExceptions()\n
    {\n
        return $this->_mockery_thrownExceptions;\n
    }\n
\n
    /**\n
     * Tear down tasks for this mock\n
     *\n
     * @return void\n
     */\n
    public function mockery_teardown()\n
    {\n
    }\n
\n
    /**\n
     * Fetch the next available allocation order number\n
     *\n
     * @return int\n
     */\n
    public function mockery_allocateOrder()\n
    {\n
        $this->_mockery_allocatedOrder += 1;\n
        return $this->_mockery_allocatedOrder;\n
    }\n
\n
    /**\n
     * Set ordering for a group\n
     *\n
     * @param mixed $group\n
     * @param int $order\n
     */\n
    public function mockery_setGroup($group, $order)\n
    {\n
        $this->_mockery_groups[$group] = $order;\n
    }\n
\n
    /**\n
     * Fetch array of ordered groups\n
     *\n
     * @return array\n
     */\n
    public function mockery_getGroups()\n
    {\n
        return $this->_mockery_groups;\n
    }\n
\n
    /**\n
     * Set current ordered number\n
     *\n
     * @param int $order\n
     */\n
    public function mockery_setCurrentOrder($order)\n
    {\n
        $this->_mockery_currentOrder = $order;\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Get current ordered number\n
     *\n
     * @return int\n
     */\n
    public function mockery_getCurrentOrder()\n
    {\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Validate the current mock's ordering\n
     *\n
     * @param string $method\n
     * @param int $order\n
     * @throws \Mockery\Exception\n
     * @return void\n
     */\n
    public function mockery_validateOrder($method, $order)\n
    {\n
        if ($order < $this->_mockery_currentOrder) {\n
            $exception = new \Mockery\Exception\InvalidOrderException(\n
                'Method ' . __CLASS__ . '::' . $method . '()'\n
                . ' called out of order: expected order '\n
                . $order . ', was ' . $this->_mockery_currentOrder\n
            );\n
            $exception->setMock($this)\n
                ->setMethodName($method)\n
                ->setExpectedOrder($order)\n
                ->setActualOrder($this->_mockery_currentOrder);\n
            throw $exception;\n
        }\n
        $this->mockery_setCurrentOrder($order);\n
    }\n
\n
    /**\n
     * Gets the count of expectations for this mock\n
     *\n
     * @return int\n
     */\n
    public function mockery_getExpectationCount()\n
    {\n
        $count = $this->_mockery_expectations_count;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $count += $director->getExpectationCount();\n
        }\n
        return $count;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_setExpectationsFor($method, \Mockery\ExpectationDirector $director)\n
    {\n
        $this->_mockery_expectations[$method] = $director;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_getExpectationsFor($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
    }\n
\n
    /**\n
     * Find an expectation matching the given method and arguments\n
     *\n
     * @var string $method\n
     * @var array $args\n
     * @return \Mockery\Expectation|null\n
     */\n
    public function mockery_findExpectation($method, array $args)\n
    {\n
        if (!isset($this->_mockery_expectations[$method])) {\n
            return null;\n
        }\n
        $director = $this->_mockery_expectations[$method];\n
\n
        return $director->findExpectation($args);\n
    }\n
\n
    /**\n
     * Return the container for this mock\n
     *\n
     * @return \Mockery\Container\n
     */\n
    public function mockery_getContainer()\n
    {\n
        return $this->_mockery_container;\n
    }\n
\n
    /**\n
     * Return the name for this mock\n
     *\n
     * @return string\n
     */\n
    public function mockery_getName()\n
    {\n
        return __CLASS__;\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    public function mockery_getMockableProperties()\n
    {\n
        return $this->_mockery_mockableProperties;\n
    }\n
\n
    public function __isset($name)\n
    {\n
        if (false === stripos($name, '_mockery_') && method_exists(get_parent_class($this), '__isset')) {\n
            return call_user_func('parent::__isset', $name);\n
        }\n
\n
        return false;\n
    }\n
\n
    public function mockery_getExpectations()\n
    {\n
        return $this->_mockery_expectations;\n
    }\n
\n
    /**\n
     * Calls a parent class method and returns the result. Used in a passthru\n
     * expectation where a real return value is required while still taking\n
     * advantage of expectation matching and call count verification.\n
     *\n
     * @param string $name\n
     * @param array $args\n
     * @return mixed\n
     */\n
    public function mockery_callSubjectMethod($name, array $args)\n
    {\n
        if (!method_exists($this, $name) && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $name, $args);\n
        }\n
        return call_user_func_array('parent::' . $name, $args);\n
    }\n
\n
    /**\n
     * @return string[]\n
     */\n
    public function mockery_getMockableMethods()\n
    {\n
        return $this->_mockery_mockableMethods;\n
    }\n
\n
    /**\n
     * @return bool\n
     */\n
    public function mockery_isAnonymous()\n
    {\n
        $rfc = new \ReflectionClass($this);\n
\n
        // HHVM has a Stringish interface\n
        $interfaces = array_filter($rfc->getInterfaces(), function ($i) {\n
            return $i->getName() !== "Stringish";\n
        });\n
        $onlyImplementsMock = 2 == count($interfaces);\n
\n
        return (false === $rfc->getParentClass()) && $onlyImplementsMock;\n
    }\n
\n
    public function mockery_isInstance()\n
    {\n
        return $this->_mockery_instanceMock;\n
    }\n
\n
    public function __wakeup()\n
    {\n
        /**\n
         * This does not add __wakeup method support. It's a blind method and any\n
         * expected __wakeup work will NOT be performed. It merely cuts off\n
         * annoying errors where a __wakeup exists but is not essential when\n
         * mocking\n
         */\n
    }\n
\n
    public function __destruct()\n
    {\n
        /**\n
         * Overrides real class destructor in case if class was created without original constructor\n
         */\n
    }\n
\n
    public function mockery_getMethod($name)\n
    {\n
        foreach ($this->mockery_getMethods() as $method) {\n
            if ($method->getName() == $name) {\n
                return $method;\n
            }\n
        }\n
\n
        return null;\n
    }\n
\n
    /**\n
     * @param string $name Method name.\n
     *\n
     * @return mixed Generated return value based on the declared return value of the named method.\n
     */\n
    public function mockery_returnValueForMethod($name)\n
    {\n
        if (version_compare(PHP_VERSION, '7.0.0-dev') < 0) {\n
            return;\n
        }\n
\n
        $rm = $this->mockery_getMethod($name);\n
        if (!$rm || !$rm->hasReturnType()) {\n
            return;\n
        }\n
\n
        $returnType = $rm->getReturnType();\n
\n
        // Default return value for methods with nullable type is null\n
        if ($returnType->allowsNull()) {\n
            return null;\n
        }\n
\n
        $type = PHP_VERSION_ID >= 70100 ? $returnType->getName() : (string) $returnType;\n
        switch ($type) {\n
            case '':       return;\n
            case 'string': return '';\n
            case 'int':    return 0;\n
            case 'float':  return 0.0;\n
            case 'bool':   return false;\n
            case 'array':  return [];\n
\n
            case 'callable':\n
            case 'Closure':\n
                return function () {\n
                };\n
\n
            case 'Traversable':\n
            case 'Generator':\n
                // Remove eval() when minimum version >=5.5\n
                $generator = eval('return function () { yield; };');\n
                return $generator();\n
\n
            case 'self':\n
                return \Mockery::mock($rm->getDeclaringClass()->getName());\n
\n
            case 'void':\n
                return null;\n
\n
            case 'object':\n
                if (version_compare(PHP_VERSION, '7.2.0-dev') >= 0) {\n
                    return \Mockery::mock();\n
                }\n
\n
            default:\n
                return \Mockery::mock($type);\n
        }\n
    }\n
\n
    public function shouldHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->atLeast()->once();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return $director;\n
    }\n
\n
    public function shouldHaveBeenCalled()\n
    {\n
        return $this->shouldHaveReceived("__invoke");\n
    }\n
\n
    public function shouldNotHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldNotHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->never();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return null;\n
    }\n
\n
    public function shouldNotHaveBeenCalled(array $args = null)\n
    {\n
        return $this->shouldNotHaveReceived("__invoke", $args);\n
    }\n
\n
    protected static function _mockery_handleStaticMethodCall($method, array $args)\n
    {\n
        $associatedRealObject = \Mockery::fetchMock(__CLASS__);\n
        try {\n
            return $associatedRealObject->__call($method, $args);\n
        } catch (BadMethodCallException $e) {\n
            throw new BadMethodCallException(\n
                'Static method ' . $associatedRealObject->mockery_getName() . '::' . $method\n
                . '() does not exist on this mock object',\n
                null,\n
                $e\n
            );\n
        }\n
    }\n
\n
    protected function _mockery_getReceivedMethodCalls()\n
    {\n
        return $this->_mockery_receivedMethodCalls ?: $this->_mockery_receivedMethodCalls = new \Mockery\ReceivedMethodCalls();\n
    }\n
\n
    /**\n
     * Called when an instance Mock was created and its constructor is getting called\n
     *\n
     * @see \Mockery\Generator\StringManipulation\Pass\InstanceMockPass\n
     * @param array $args\n
     */\n
    protected function _mockery_constructorCalled(array $args)\n
    {\n
        if (!isset($this->_mockery_expectations['__construct']) /* _mockery_handleMethodCall runs the other checks */) {\n
            return;\n
        }\n
        $this->_mockery_handleMethodCall('__construct', $args);\n
    }\n
\n
    protected function _mockery_findExpectedMethodHandler($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
\n
        $lowerCasedMockeryExpectations = array_change_key_case($this->_mockery_expectations, CASE_LOWER);\n
        $lowerCasedMethod = strtolower($method);\n
\n
        if (isset($lowerCasedMockeryExpectations[$lowerCasedMethod])) {\n
            return $lowerCasedMockeryExpectations[$lowerCasedMethod];\n
        }\n
\n
        return null;\n
    }\n
\n
    protected function _mockery_handleMethodCall($method, array $args)\n
    {\n
        $this->_mockery_getReceivedMethodCalls()->push(new \Mockery\MethodCall($method, $args));\n
\n
        $rm = $this->mockery_getMethod($method);\n
        if ($rm && $rm->isProtected() && !$this->_mockery_allowMockingProtectedMethods) {\n
            if ($rm->isAbstract()) {\n
                return;\n
            }\n
\n
            try {\n
                $prototype = $rm->getPrototype();\n
                if ($prototype->isAbstract()) {\n
                    return;\n
                }\n
            } catch (\ReflectionException $re) {\n
                // noop - there is no hasPrototype method\n
            }\n
\n
            return call_user_func_array("parent::$method", $args);\n
        }\n
\n
        $handler = $this->_mockery_findExpectedMethodHandler($method);\n
\n
        if ($handler !== null && !$this->_mockery_disableExpectationMatching) {\n
            try {\n
                return $handler->call($args);\n
            } catch (\Mockery\Exception\NoMatchingExpectationException $e) {\n
                if (!$this->_mockery_ignoreMissing && !$this->_mockery_deferMissing) {\n
                    throw $e;\n
                }\n
            }\n
        }\n
\n
        if (!is_null($this->_mockery_partial) &&\n
            (method_exists($this->_mockery_partial, $method) || method_exists($this->_mockery_partial, '__call'))\n
        ) {\n
            return call_user_func_array(array($this->_mockery_partial, $method), $args);\n
        } elseif ($this->_mockery_deferMissing && is_callable("parent::$method")\n
            && (!$this->hasMethodOverloadingInParentClass() || method_exists(get_parent_class($this), $method))) {\n
            return call_user_func_array("parent::$method", $args);\n
        } elseif ($this->_mockery_deferMissing && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $method, $args);\n
        } elseif ($method == '__toString') {\n
            // __toString is special because we force its addition to the class API regardless of the\n
            // original implementation.  Thus, we should always return a string rather than honor\n
            // _mockery_ignoreMissing and break the API with an error.\n
            return sprintf("%s#%s", __CLASS__, spl_object_hash($this));\n
        } elseif ($this->_mockery_ignoreMissing) {\n
            if (\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed() || (method_exists($this->_mockery_partial, $method) || is_callable("parent::$method"))) {\n
                if ($this->_mockery_defaultReturnValue instanceof \Mockery\Undefined) {\n
                    return call_user_func_array(array($this->_mockery_defaultReturnValue, $method), $args);\n
                } elseif (null === $this->_mockery_defaultReturnValue) {\n
                    return $this->mockery_returnValueForMethod($method);\n
                }\n
\n
                return $this->_mockery_defaultReturnValue;\n
            }\n
        }\n
\n
        $message = 'Method ' . __CLASS__ . '::' . $method .\n
            '() does not exist on this mock object';\n
\n
        if (!is_null($rm)) {\n
            $message = 'Received ' . __CLASS__ .\n
                '::' . $method . '(), but no expectations were specified';\n
        }\n
\n
        $bmce = new BadMethodCallException($message);\n
        $this->_mockery_thrownExceptions[] = $bmce;\n
        throw $bmce;\n
    }\n
\n
    /**\n
     * Uses reflection to get the list of all\n
     * methods within the current mock object\n
     *\n
     * @return array\n
     */\n
    protected function mockery_getMethods()\n
    {\n
        if (static::$_mockery_methods && \Mockery::getConfiguration()->reflectionCacheEnabled()) {\n
            return static::$_mockery_methods;\n
        }\n
\n
        if (isset($this->_mockery_partial)) {\n
            $reflected = new \ReflectionObject($this->_mockery_partial);\n
        } else {\n
            $reflected = new \ReflectionClass($this);\n
        }\n
\n
        return static::$_mockery_methods = $reflected->getMethods();\n
    }\n
\n
    private function hasMethodOverloadingInParentClass()\n
    {\n
        // if there's __call any name would be callable\n
        return is_callable('parent::aFunctionNameThatNoOneWouldEverUseInRealLife12345');\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    private function getNonPublicMethods()\n
    {\n
        return array_map(\n
            function ($method) {\n
                return $method->getName();\n
            },\n
            array_filter($this->mockery_getMethods(), function ($method) {\n
                return !$method->isPublic();\n
            })\n
        );\n
    }\n
public function __construct(){\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function fromWcCart(\WC_Cart $cart): array{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function fromWcOrder(\WC_Order $order): array{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    private function fromWcOrderLineItem(\WC_Order_Item_Product $item, \WC_Order $order): \Inpsyde\PayPalCommerce\ApiClient\Entity\Item{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function fromPayPalRequest(\stdClass $data): \Inpsyde\PayPalCommerce\ApiClient\Entity\Item{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    }\n
'
                                        )
                                        '881ff651f91d58410942a8652e8440cd' => Mockery\Generator\MockDefinition Object &0000000021e1f885000000005777935d (
                                            'config' => Mockery\Generator\MockConfiguration Object &0000000021e1ff2d000000005777935d (
                                                'targetClass' => Mockery\Generator\DefinedTargetClass Object &0000000021e1f899000000005777935d (
                                                    'rfc' => ReflectionClass Object &0000000021e1f898000000005777935d (
                                                        'name' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Address'
                                                    )
                                                )
                                                'targetClassName' => '\Inpsyde\PayPalCommerce\ApiClient\Entity\Address'
                                                'targetInterfaces' => Array &2204 ()
                                                'targetInterfaceNames' => Array &2205 ()
                                                'targetTraits' => Array &2206 ()
                                                'targetTraitNames' => Array &2207 ()
                                                'targetObject' => null
                                                'name' => 'Mockery_12_Inpsyde_PayPalCommerce_ApiClient_Entity_Address'
                                                'blackListedMethods' => Array &2208 (
                                                    0 => '__call'
                                                    1 => '__callStatic'
                                                    2 => '__clone'
                                                    3 => '__wakeup'
                                                    4 => '__set'
                                                    5 => '__get'
                                                    6 => '__toString'
                                                    7 => '__isset'
                                                    8 => '__destruct'
                                                    9 => '__debugInfo'
                                                    10 => '__halt_compiler'
                                                    30 => 'empty'
                                                    37 => 'eval'
                                                    53 => 'isset'
                                                    70 => 'unset'
                                                )
                                                'whiteListedMethods' => Array &2209 ()
                                                'instanceMock' => false
                                                'parameterOverrides' => Array &2210 ()
                                                'allMethods' => Array &2211 (
                                                    0 => Mockery\Generator\Method Object &0000000021e1f88e000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1f896000000005777935d (
                                                            'name' => '__construct'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Address'
                                                        )
                                                    )
                                                    1 => Mockery\Generator\Method Object &0000000021e1f88d000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1f895000000005777935d (
                                                            'name' => 'countryCode'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Address'
                                                        )
                                                    )
                                                    2 => Mockery\Generator\Method Object &0000000021e1f88c000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1f894000000005777935d (
                                                            'name' => 'addressLine1'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Address'
                                                        )
                                                    )
                                                    3 => Mockery\Generator\Method Object &0000000021e1f88b000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1f893000000005777935d (
                                                            'name' => 'addressLine2'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Address'
                                                        )
                                                    )
                                                    4 => Mockery\Generator\Method Object &0000000021e1f88a000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1f892000000005777935d (
                                                            'name' => 'adminArea1'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Address'
                                                        )
                                                    )
                                                    5 => Mockery\Generator\Method Object &0000000021e1f889000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1f891000000005777935d (
                                                            'name' => 'adminArea2'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Address'
                                                        )
                                                    )
                                                    6 => Mockery\Generator\Method Object &0000000021e1f888000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1f890000000005777935d (
                                                            'name' => 'postalCode'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Address'
                                                        )
                                                    )
                                                    7 => Mockery\Generator\Method Object &0000000021e1f887000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1f88f000000005777935d (
                                                            'name' => 'toArray'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Address'
                                                        )
                                                    )
                                                )
                                                'mockOriginalDestructor' => true
                                                'constantsMap' => Array &2212 ()
                                            )
                                            'code' => '<?php\n
/**\n
 * Mockery\n
 *\n
 * LICENSE\n
 *\n
 * This source file is subject to the new BSD license that is bundled\n
 * with this package in the file LICENSE.txt.\n
 * It is also available through the world-wide-web at this URL:\n
 * http://github.com/padraic/mockery/blob/master/LICENSE\n
 * If you did not receive a copy of the license and are unable to\n
 * obtain it through the world-wide-web, please send an email\n
 * to padraic@php.net so we can send you a copy immediately.\n
 *\n
 * @category   Mockery\n
 * @package    Mockery\n
 * @copyright  Copyright (c) 2010 Pádraic Brady (http://blog.astrumfutura.com)\n
 * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License\n
 */\n
\n
\n
\n
use Mockery\HigherOrderMessage;\n
use Mockery\MockInterface;\n
use Mockery\LegacyMockInterface;\n
use Mockery\ExpectsHigherOrderMessage;\n
use Mockery\Exception\BadMethodCallException;\n
\n
class Mockery_12_Inpsyde_PayPalCommerce_ApiClient_Entity_Address extends \Inpsyde\PayPalCommerce\ApiClient\Entity\Address implements MockInterface\n
{\n
    /**\n
     * Stores an array of all expectation directors for this mock\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_expectations = array();\n
\n
    /**\n
     * Stores an inital number of expectations that can be manipulated\n
     * while using the getter method.\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_expectations_count = 0;\n
\n
    /**\n
     * Flag to indicate whether we can ignore method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_ignoreMissing = false;\n
\n
    /**\n
     * Flag to indicate whether we can defer method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_deferMissing = false;\n
\n
    /**\n
     * Flag to indicate whether this mock was verified\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_verified = false;\n
\n
    /**\n
     * Given name of the mock\n
     *\n
     * @var string\n
     */\n
    protected $_mockery_name = null;\n
\n
    /**\n
     * Order number of allocation\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_allocatedOrder = 0;\n
\n
    /**\n
     * Current ordered number\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_currentOrder = 0;\n
\n
    /**\n
     * Ordered groups\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_groups = array();\n
\n
    /**\n
     * Mock container containing this mock object\n
     *\n
     * @var \Mockery\Container\n
     */\n
    protected $_mockery_container = null;\n
\n
    /**\n
     * Instance of a core object on which methods are called in the event\n
     * it has been set, and an expectation for one of the object's methods\n
     * does not exist. This implements a simple partial mock proxy system.\n
     *\n
     * @var object\n
     */\n
    protected $_mockery_partial = null;\n
\n
    /**\n
     * Flag to indicate we should ignore all expectations temporarily. Used\n
     * mainly to prevent expectation matching when in the middle of a mock\n
     * object recording session.\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_disableExpectationMatching = false;\n
\n
    /**\n
     * Stores all stubbed public methods separate from any on-object public\n
     * properties that may exist.\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_mockableProperties = array();\n
\n
    /**\n
     * @var array\n
     */\n
    protected $_mockery_mockableMethods = array();\n
\n
    /**\n
     * Just a local cache for this mock's target's methods\n
     *\n
     * @var \ReflectionMethod[]\n
     */\n
    protected static $_mockery_methods;\n
\n
    protected $_mockery_allowMockingProtectedMethods = false;\n
\n
    protected $_mockery_receivedMethodCalls;\n
\n
    /**\n
     * If shouldIgnoreMissing is called, this value will be returned on all calls to missing methods\n
     * @var mixed\n
     */\n
    protected $_mockery_defaultReturnValue = null;\n
\n
    /**\n
     * Tracks internally all the bad method call exceptions that happened during runtime\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_thrownExceptions = [];\n
\n
    protected $_mockery_instanceMock = true;\n
\n
    /**\n
     * We want to avoid constructors since class is copied to Generator.php\n
     * for inclusion on extending class definitions.\n
     *\n
     * @param \Mockery\Container $container\n
     * @param object $partialObject\n
     * @param bool $instanceMock\n
     * @return void\n
     */\n
    public function mockery_init(\Mockery\Container $container = null, $partialObject = null, $instanceMock = true)\n
    {\n
        if (is_null($container)) {\n
            $container = new \Mockery\Container;\n
        }\n
        $this->_mockery_container = $container;\n
        if (!is_null($partialObject)) {\n
            $this->_mockery_partial = $partialObject;\n
        }\n
\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isPublic()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_instanceMock = $instanceMock;\n
    }\n
\n
    /**\n
     * Set expected method calls\n
     *\n
     * @param mixed ...$methodNames one or many methods that are expected to be called in this mock\n
     *\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldReceive");\n
        }\n
\n
        foreach ($methodNames as $method) {\n
            if ("" == $method) {\n
                throw new \InvalidArgumentException("Received empty method name");\n
            }\n
        }\n
\n
        $self = $this;\n
        $allowMockingProtectedMethods = $this->_mockery_allowMockingProtectedMethods;\n
\n
        $lastExpectation = \Mockery::parseShouldReturnArgs(\n
            $this, $methodNames, function ($method) use ($self, $allowMockingProtectedMethods) {\n
                $rm = $self->mockery_getMethod($method);\n
                if ($rm) {\n
                    if ($rm->isPrivate()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a private method");\n
                    }\n
                    if (!$allowMockingProtectedMethods && $rm->isProtected()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a protected method and mocking protected methods is not enabled for the currently used mock object. Use shouldAllowMockingProtectedMethods() to enable mocking of protected methods.");\n
                    }\n
                }\n
\n
                $director = $self->mockery_getExpectationsFor($method);\n
                if (!$director) {\n
                    $director = new \Mockery\ExpectationDirector($method, $self);\n
                    $self->mockery_setExpectationsFor($method, $director);\n
                }\n
                $expectation = new \Mockery\Expectation($self, $method);\n
                $director->addExpectation($expectation);\n
                return $expectation;\n
            }\n
        );\n
        return $lastExpectation;\n
    }\n
\n
    // start method allows\n
    /**\n
     * @param mixed $something  String method name or map of method => return\n
     * @return self|\Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function allows($something = [])\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something);\n
        }\n
\n
        if (empty($something)) {\n
            return $this->shouldReceive();\n
        }\n
\n
        foreach ($something as $method => $returnValue) {\n
            $this->shouldReceive($method)->andReturn($returnValue);\n
        }\n
\n
        return $this;\n
    }\n
    // end method allows\n
\n
    // start method expects\n
    /**\n
    /**\n
     * @param mixed $something  String method name (optional)\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|ExpectsHigherOrderMessage\n
     */\n
    public function expects($something = null)\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something)->once();\n
        }\n
\n
        return new ExpectsHigherOrderMessage($this);\n
    }\n
    // end method expects\n
\n
    /**\n
     * Shortcut method for setting an expectation that a method should not be called.\n
     *\n
     * @param array ...$methodNames one or many methods that are expected not to be called in this mock\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldNotReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldNotReceive");\n
        }\n
\n
        $expectation = call_user_func_array(array($this, 'shouldReceive'), $methodNames);\n
        $expectation->never();\n
        return $expectation;\n
    }\n
\n
    /**\n
     * Allows additional methods to be mocked that do not explicitly exist on mocked class\n
     * @param String $method name of the method to be mocked\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingMethod($method)\n
    {\n
        $this->_mockery_mockableMethods[] = $method;\n
        return $this;\n
    }\n
\n
    /**\n
     * Set mock to ignore unexpected methods and return Undefined class\n
     * @param mixed $returnValue the default return value for calls to missing functions on this mock\n
     * @return Mock\n
     */\n
    public function shouldIgnoreMissing($returnValue = null)\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = $returnValue;\n
        return $this;\n
    }\n
\n
    public function asUndefined()\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = new \Mockery\Undefined;\n
        return $this;\n
    }\n
\n
    /**\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingProtectedMethods()\n
    {\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isProtected()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_allowMockingProtectedMethods = true;\n
        return $this;\n
    }\n
\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * This is particularly useless for this class, as it doesn't have a parent,\n
     * but included for completeness\n
     *\n
     * @deprecated 2.0.0 Please use makePartial() instead\n
     *\n
     * @return Mock\n
     */\n
    public function shouldDeferMissing()\n
    {\n
        return $this->makePartial();\n
    }\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * It was an alias for shouldDeferMissing(), which will be removed\n
     * in 2.0.0.\n
     *\n
     * @return Mock\n
     */\n
    public function makePartial()\n
    {\n
        $this->_mockery_deferMissing = true;\n
        return $this;\n
    }\n
\n
    /**\n
     * In the event shouldReceive() accepting one or more methods/returns,\n
     * this method will switch them from normal expectations to default\n
     * expectations\n
     *\n
     * @return self\n
     */\n
    public function byDefault()\n
    {\n
        foreach ($this->_mockery_expectations as $director) {\n
            $exps = $director->getExpectations();\n
            foreach ($exps as $exp) {\n
                $exp->byDefault();\n
            }\n
        }\n
        return $this;\n
    }\n
\n
    /**\n
     * Capture calls to this mock\n
     */\n
    public function __call($method, array $args)\n
    {\n
        return $this->_mockery_handleMethodCall($method, $args);\n
    }\n
\n
    public static function __callStatic($method, array $args)\n
    {\n
        return self::_mockery_handleStaticMethodCall($method, $args);\n
    }\n
\n
    /**\n
     * Forward calls to this magic method to the __call method\n
     */\n
    public function __toString()\n
    {\n
        return $this->__call('__toString', array());\n
    }\n
\n
    /**\n
     * Iterate across all expectation directors and validate each\n
     *\n
     * @throws \Mockery\CountValidator\Exception\n
     * @return void\n
     */\n
    public function mockery_verify()\n
    {\n
        if ($this->_mockery_verified) {\n
            return;\n
        }\n
        if (isset($this->_mockery_ignoreVerification)\n
            && $this->_mockery_ignoreVerification == true) {\n
            return;\n
        }\n
        $this->_mockery_verified = true;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $director->verify();\n
        }\n
    }\n
\n
    /**\n
     * Gets a list of exceptions thrown by this mock\n
     *\n
     * @return array\n
     */\n
    public function mockery_thrownExceptions()\n
    {\n
        return $this->_mockery_thrownExceptions;\n
    }\n
\n
    /**\n
     * Tear down tasks for this mock\n
     *\n
     * @return void\n
     */\n
    public function mockery_teardown()\n
    {\n
    }\n
\n
    /**\n
     * Fetch the next available allocation order number\n
     *\n
     * @return int\n
     */\n
    public function mockery_allocateOrder()\n
    {\n
        $this->_mockery_allocatedOrder += 1;\n
        return $this->_mockery_allocatedOrder;\n
    }\n
\n
    /**\n
     * Set ordering for a group\n
     *\n
     * @param mixed $group\n
     * @param int $order\n
     */\n
    public function mockery_setGroup($group, $order)\n
    {\n
        $this->_mockery_groups[$group] = $order;\n
    }\n
\n
    /**\n
     * Fetch array of ordered groups\n
     *\n
     * @return array\n
     */\n
    public function mockery_getGroups()\n
    {\n
        return $this->_mockery_groups;\n
    }\n
\n
    /**\n
     * Set current ordered number\n
     *\n
     * @param int $order\n
     */\n
    public function mockery_setCurrentOrder($order)\n
    {\n
        $this->_mockery_currentOrder = $order;\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Get current ordered number\n
     *\n
     * @return int\n
     */\n
    public function mockery_getCurrentOrder()\n
    {\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Validate the current mock's ordering\n
     *\n
     * @param string $method\n
     * @param int $order\n
     * @throws \Mockery\Exception\n
     * @return void\n
     */\n
    public function mockery_validateOrder($method, $order)\n
    {\n
        if ($order < $this->_mockery_currentOrder) {\n
            $exception = new \Mockery\Exception\InvalidOrderException(\n
                'Method ' . __CLASS__ . '::' . $method . '()'\n
                . ' called out of order: expected order '\n
                . $order . ', was ' . $this->_mockery_currentOrder\n
            );\n
            $exception->setMock($this)\n
                ->setMethodName($method)\n
                ->setExpectedOrder($order)\n
                ->setActualOrder($this->_mockery_currentOrder);\n
            throw $exception;\n
        }\n
        $this->mockery_setCurrentOrder($order);\n
    }\n
\n
    /**\n
     * Gets the count of expectations for this mock\n
     *\n
     * @return int\n
     */\n
    public function mockery_getExpectationCount()\n
    {\n
        $count = $this->_mockery_expectations_count;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $count += $director->getExpectationCount();\n
        }\n
        return $count;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_setExpectationsFor($method, \Mockery\ExpectationDirector $director)\n
    {\n
        $this->_mockery_expectations[$method] = $director;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_getExpectationsFor($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
    }\n
\n
    /**\n
     * Find an expectation matching the given method and arguments\n
     *\n
     * @var string $method\n
     * @var array $args\n
     * @return \Mockery\Expectation|null\n
     */\n
    public function mockery_findExpectation($method, array $args)\n
    {\n
        if (!isset($this->_mockery_expectations[$method])) {\n
            return null;\n
        }\n
        $director = $this->_mockery_expectations[$method];\n
\n
        return $director->findExpectation($args);\n
    }\n
\n
    /**\n
     * Return the container for this mock\n
     *\n
     * @return \Mockery\Container\n
     */\n
    public function mockery_getContainer()\n
    {\n
        return $this->_mockery_container;\n
    }\n
\n
    /**\n
     * Return the name for this mock\n
     *\n
     * @return string\n
     */\n
    public function mockery_getName()\n
    {\n
        return __CLASS__;\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    public function mockery_getMockableProperties()\n
    {\n
        return $this->_mockery_mockableProperties;\n
    }\n
\n
    public function __isset($name)\n
    {\n
        if (false === stripos($name, '_mockery_') && method_exists(get_parent_class($this), '__isset')) {\n
            return call_user_func('parent::__isset', $name);\n
        }\n
\n
        return false;\n
    }\n
\n
    public function mockery_getExpectations()\n
    {\n
        return $this->_mockery_expectations;\n
    }\n
\n
    /**\n
     * Calls a parent class method and returns the result. Used in a passthru\n
     * expectation where a real return value is required while still taking\n
     * advantage of expectation matching and call count verification.\n
     *\n
     * @param string $name\n
     * @param array $args\n
     * @return mixed\n
     */\n
    public function mockery_callSubjectMethod($name, array $args)\n
    {\n
        if (!method_exists($this, $name) && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $name, $args);\n
        }\n
        return call_user_func_array('parent::' . $name, $args);\n
    }\n
\n
    /**\n
     * @return string[]\n
     */\n
    public function mockery_getMockableMethods()\n
    {\n
        return $this->_mockery_mockableMethods;\n
    }\n
\n
    /**\n
     * @return bool\n
     */\n
    public function mockery_isAnonymous()\n
    {\n
        $rfc = new \ReflectionClass($this);\n
\n
        // HHVM has a Stringish interface\n
        $interfaces = array_filter($rfc->getInterfaces(), function ($i) {\n
            return $i->getName() !== "Stringish";\n
        });\n
        $onlyImplementsMock = 2 == count($interfaces);\n
\n
        return (false === $rfc->getParentClass()) && $onlyImplementsMock;\n
    }\n
\n
    public function mockery_isInstance()\n
    {\n
        return $this->_mockery_instanceMock;\n
    }\n
\n
    public function __wakeup()\n
    {\n
        /**\n
         * This does not add __wakeup method support. It's a blind method and any\n
         * expected __wakeup work will NOT be performed. It merely cuts off\n
         * annoying errors where a __wakeup exists but is not essential when\n
         * mocking\n
         */\n
    }\n
\n
    public function __destruct()\n
    {\n
        /**\n
         * Overrides real class destructor in case if class was created without original constructor\n
         */\n
    }\n
\n
    public function mockery_getMethod($name)\n
    {\n
        foreach ($this->mockery_getMethods() as $method) {\n
            if ($method->getName() == $name) {\n
                return $method;\n
            }\n
        }\n
\n
        return null;\n
    }\n
\n
    /**\n
     * @param string $name Method name.\n
     *\n
     * @return mixed Generated return value based on the declared return value of the named method.\n
     */\n
    public function mockery_returnValueForMethod($name)\n
    {\n
        if (version_compare(PHP_VERSION, '7.0.0-dev') < 0) {\n
            return;\n
        }\n
\n
        $rm = $this->mockery_getMethod($name);\n
        if (!$rm || !$rm->hasReturnType()) {\n
            return;\n
        }\n
\n
        $returnType = $rm->getReturnType();\n
\n
        // Default return value for methods with nullable type is null\n
        if ($returnType->allowsNull()) {\n
            return null;\n
        }\n
\n
        $type = PHP_VERSION_ID >= 70100 ? $returnType->getName() : (string) $returnType;\n
        switch ($type) {\n
            case '':       return;\n
            case 'string': return '';\n
            case 'int':    return 0;\n
            case 'float':  return 0.0;\n
            case 'bool':   return false;\n
            case 'array':  return [];\n
\n
            case 'callable':\n
            case 'Closure':\n
                return function () {\n
                };\n
\n
            case 'Traversable':\n
            case 'Generator':\n
                // Remove eval() when minimum version >=5.5\n
                $generator = eval('return function () { yield; };');\n
                return $generator();\n
\n
            case 'self':\n
                return \Mockery::mock($rm->getDeclaringClass()->getName());\n
\n
            case 'void':\n
                return null;\n
\n
            case 'object':\n
                if (version_compare(PHP_VERSION, '7.2.0-dev') >= 0) {\n
                    return \Mockery::mock();\n
                }\n
\n
            default:\n
                return \Mockery::mock($type);\n
        }\n
    }\n
\n
    public function shouldHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->atLeast()->once();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return $director;\n
    }\n
\n
    public function shouldHaveBeenCalled()\n
    {\n
        return $this->shouldHaveReceived("__invoke");\n
    }\n
\n
    public function shouldNotHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldNotHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->never();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return null;\n
    }\n
\n
    public function shouldNotHaveBeenCalled(array $args = null)\n
    {\n
        return $this->shouldNotHaveReceived("__invoke", $args);\n
    }\n
\n
    protected static function _mockery_handleStaticMethodCall($method, array $args)\n
    {\n
        $associatedRealObject = \Mockery::fetchMock(__CLASS__);\n
        try {\n
            return $associatedRealObject->__call($method, $args);\n
        } catch (BadMethodCallException $e) {\n
            throw new BadMethodCallException(\n
                'Static method ' . $associatedRealObject->mockery_getName() . '::' . $method\n
                . '() does not exist on this mock object',\n
                null,\n
                $e\n
            );\n
        }\n
    }\n
\n
    protected function _mockery_getReceivedMethodCalls()\n
    {\n
        return $this->_mockery_receivedMethodCalls ?: $this->_mockery_receivedMethodCalls = new \Mockery\ReceivedMethodCalls();\n
    }\n
\n
    /**\n
     * Called when an instance Mock was created and its constructor is getting called\n
     *\n
     * @see \Mockery\Generator\StringManipulation\Pass\InstanceMockPass\n
     * @param array $args\n
     */\n
    protected function _mockery_constructorCalled(array $args)\n
    {\n
        if (!isset($this->_mockery_expectations['__construct']) /* _mockery_handleMethodCall runs the other checks */) {\n
            return;\n
        }\n
        $this->_mockery_handleMethodCall('__construct', $args);\n
    }\n
\n
    protected function _mockery_findExpectedMethodHandler($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
\n
        $lowerCasedMockeryExpectations = array_change_key_case($this->_mockery_expectations, CASE_LOWER);\n
        $lowerCasedMethod = strtolower($method);\n
\n
        if (isset($lowerCasedMockeryExpectations[$lowerCasedMethod])) {\n
            return $lowerCasedMockeryExpectations[$lowerCasedMethod];\n
        }\n
\n
        return null;\n
    }\n
\n
    protected function _mockery_handleMethodCall($method, array $args)\n
    {\n
        $this->_mockery_getReceivedMethodCalls()->push(new \Mockery\MethodCall($method, $args));\n
\n
        $rm = $this->mockery_getMethod($method);\n
        if ($rm && $rm->isProtected() && !$this->_mockery_allowMockingProtectedMethods) {\n
            if ($rm->isAbstract()) {\n
                return;\n
            }\n
\n
            try {\n
                $prototype = $rm->getPrototype();\n
                if ($prototype->isAbstract()) {\n
                    return;\n
                }\n
            } catch (\ReflectionException $re) {\n
                // noop - there is no hasPrototype method\n
            }\n
\n
            return call_user_func_array("parent::$method", $args);\n
        }\n
\n
        $handler = $this->_mockery_findExpectedMethodHandler($method);\n
\n
        if ($handler !== null && !$this->_mockery_disableExpectationMatching) {\n
            try {\n
                return $handler->call($args);\n
            } catch (\Mockery\Exception\NoMatchingExpectationException $e) {\n
                if (!$this->_mockery_ignoreMissing && !$this->_mockery_deferMissing) {\n
                    throw $e;\n
                }\n
            }\n
        }\n
\n
        if (!is_null($this->_mockery_partial) &&\n
            (method_exists($this->_mockery_partial, $method) || method_exists($this->_mockery_partial, '__call'))\n
        ) {\n
            return call_user_func_array(array($this->_mockery_partial, $method), $args);\n
        } elseif ($this->_mockery_deferMissing && is_callable("parent::$method")\n
            && (!$this->hasMethodOverloadingInParentClass() || method_exists(get_parent_class($this), $method))) {\n
            return call_user_func_array("parent::$method", $args);\n
        } elseif ($this->_mockery_deferMissing && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $method, $args);\n
        } elseif ($method == '__toString') {\n
            // __toString is special because we force its addition to the class API regardless of the\n
            // original implementation.  Thus, we should always return a string rather than honor\n
            // _mockery_ignoreMissing and break the API with an error.\n
            return sprintf("%s#%s", __CLASS__, spl_object_hash($this));\n
        } elseif ($this->_mockery_ignoreMissing) {\n
            if (\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed() || (method_exists($this->_mockery_partial, $method) || is_callable("parent::$method"))) {\n
                if ($this->_mockery_defaultReturnValue instanceof \Mockery\Undefined) {\n
                    return call_user_func_array(array($this->_mockery_defaultReturnValue, $method), $args);\n
                } elseif (null === $this->_mockery_defaultReturnValue) {\n
                    return $this->mockery_returnValueForMethod($method);\n
                }\n
\n
                return $this->_mockery_defaultReturnValue;\n
            }\n
        }\n
\n
        $message = 'Method ' . __CLASS__ . '::' . $method .\n
            '() does not exist on this mock object';\n
\n
        if (!is_null($rm)) {\n
            $message = 'Received ' . __CLASS__ .\n
                '::' . $method . '(), but no expectations were specified';\n
        }\n
\n
        $bmce = new BadMethodCallException($message);\n
        $this->_mockery_thrownExceptions[] = $bmce;\n
        throw $bmce;\n
    }\n
\n
    /**\n
     * Uses reflection to get the list of all\n
     * methods within the current mock object\n
     *\n
     * @return array\n
     */\n
    protected function mockery_getMethods()\n
    {\n
        if (static::$_mockery_methods && \Mockery::getConfiguration()->reflectionCacheEnabled()) {\n
            return static::$_mockery_methods;\n
        }\n
\n
        if (isset($this->_mockery_partial)) {\n
            $reflected = new \ReflectionObject($this->_mockery_partial);\n
        } else {\n
            $reflected = new \ReflectionClass($this);\n
        }\n
\n
        return static::$_mockery_methods = $reflected->getMethods();\n
    }\n
\n
    private function hasMethodOverloadingInParentClass()\n
    {\n
        // if there's __call any name would be callable\n
        return is_callable('parent::aFunctionNameThatNoOneWouldEverUseInRealLife12345');\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    private function getNonPublicMethods()\n
    {\n
        return array_map(\n
            function ($method) {\n
                return $method->getName();\n
            },\n
            array_filter($this->mockery_getMethods(), function ($method) {\n
                return !$method->isPublic();\n
            })\n
        );\n
    }\n
public function __construct(string $countryCode, string $addressLine1 = '', string $addressLine2 = '', string $adminArea1 = '', string $adminArea2 = '', string $postalCode = ''){\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function countryCode(): string{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function addressLine1(): string{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function addressLine2(): string{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function adminArea1(): string{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function adminArea2(): string{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function postalCode(): string{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function toArray(): array{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    }\n
'
                                        )
                                        '195785cf9b46bb6e7551074267059716' => Mockery\Generator\MockDefinition Object &0000000021e1f8f8000000005777935d (
                                            'config' => Mockery\Generator\MockConfiguration Object &0000000021e1f89a000000005777935d (
                                                'targetClass' => Mockery\Generator\DefinedTargetClass Object &0000000021e1f8c4000000005777935d (
                                                    'rfc' => ReflectionClass Object &0000000021e1f8c3000000005777935d (
                                                        'name' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Shipping'
                                                    )
                                                )
                                                'targetClassName' => '\Inpsyde\PayPalCommerce\ApiClient\Entity\Shipping'
                                                'targetInterfaces' => Array &2213 ()
                                                'targetInterfaceNames' => Array &2214 ()
                                                'targetTraits' => Array &2215 ()
                                                'targetTraitNames' => Array &2216 ()
                                                'targetObject' => null
                                                'name' => 'Mockery_13_Inpsyde_PayPalCommerce_ApiClient_Entity_Shipping'
                                                'blackListedMethods' => Array &2217 (
                                                    0 => '__call'
                                                    1 => '__callStatic'
                                                    2 => '__clone'
                                                    3 => '__wakeup'
                                                    4 => '__set'
                                                    5 => '__get'
                                                    6 => '__toString'
                                                    7 => '__isset'
                                                    8 => '__destruct'
                                                    9 => '__debugInfo'
                                                    10 => '__halt_compiler'
                                                    30 => 'empty'
                                                    37 => 'eval'
                                                    53 => 'isset'
                                                    70 => 'unset'
                                                )
                                                'whiteListedMethods' => Array &2218 ()
                                                'instanceMock' => false
                                                'parameterOverrides' => Array &2219 ()
                                                'allMethods' => Array &2220 (
                                                    0 => Mockery\Generator\Method Object &0000000021e1f8fd000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1f8c1000000005777935d (
                                                            'name' => '__construct'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Shipping'
                                                        )
                                                    )
                                                    1 => Mockery\Generator\Method Object &0000000021e1f8fc000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1f8c0000000005777935d (
                                                            'name' => 'name'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Shipping'
                                                        )
                                                    )
                                                    2 => Mockery\Generator\Method Object &0000000021e1f8fb000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1f8ff000000005777935d (
                                                            'name' => 'address'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Shipping'
                                                        )
                                                    )
                                                    3 => Mockery\Generator\Method Object &0000000021e1f8fa000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1f8fe000000005777935d (
                                                            'name' => 'toArray'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Entity\Shipping'
                                                        )
                                                    )
                                                )
                                                'mockOriginalDestructor' => true
                                                'constantsMap' => Array &2221 ()
                                            )
                                            'code' => '<?php\n
/**\n
 * Mockery\n
 *\n
 * LICENSE\n
 *\n
 * This source file is subject to the new BSD license that is bundled\n
 * with this package in the file LICENSE.txt.\n
 * It is also available through the world-wide-web at this URL:\n
 * http://github.com/padraic/mockery/blob/master/LICENSE\n
 * If you did not receive a copy of the license and are unable to\n
 * obtain it through the world-wide-web, please send an email\n
 * to padraic@php.net so we can send you a copy immediately.\n
 *\n
 * @category   Mockery\n
 * @package    Mockery\n
 * @copyright  Copyright (c) 2010 Pádraic Brady (http://blog.astrumfutura.com)\n
 * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License\n
 */\n
\n
\n
\n
use Mockery\HigherOrderMessage;\n
use Mockery\MockInterface;\n
use Mockery\LegacyMockInterface;\n
use Mockery\ExpectsHigherOrderMessage;\n
use Mockery\Exception\BadMethodCallException;\n
\n
class Mockery_13_Inpsyde_PayPalCommerce_ApiClient_Entity_Shipping extends \Inpsyde\PayPalCommerce\ApiClient\Entity\Shipping implements MockInterface\n
{\n
    /**\n
     * Stores an array of all expectation directors for this mock\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_expectations = array();\n
\n
    /**\n
     * Stores an inital number of expectations that can be manipulated\n
     * while using the getter method.\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_expectations_count = 0;\n
\n
    /**\n
     * Flag to indicate whether we can ignore method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_ignoreMissing = false;\n
\n
    /**\n
     * Flag to indicate whether we can defer method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_deferMissing = false;\n
\n
    /**\n
     * Flag to indicate whether this mock was verified\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_verified = false;\n
\n
    /**\n
     * Given name of the mock\n
     *\n
     * @var string\n
     */\n
    protected $_mockery_name = null;\n
\n
    /**\n
     * Order number of allocation\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_allocatedOrder = 0;\n
\n
    /**\n
     * Current ordered number\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_currentOrder = 0;\n
\n
    /**\n
     * Ordered groups\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_groups = array();\n
\n
    /**\n
     * Mock container containing this mock object\n
     *\n
     * @var \Mockery\Container\n
     */\n
    protected $_mockery_container = null;\n
\n
    /**\n
     * Instance of a core object on which methods are called in the event\n
     * it has been set, and an expectation for one of the object's methods\n
     * does not exist. This implements a simple partial mock proxy system.\n
     *\n
     * @var object\n
     */\n
    protected $_mockery_partial = null;\n
\n
    /**\n
     * Flag to indicate we should ignore all expectations temporarily. Used\n
     * mainly to prevent expectation matching when in the middle of a mock\n
     * object recording session.\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_disableExpectationMatching = false;\n
\n
    /**\n
     * Stores all stubbed public methods separate from any on-object public\n
     * properties that may exist.\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_mockableProperties = array();\n
\n
    /**\n
     * @var array\n
     */\n
    protected $_mockery_mockableMethods = array();\n
\n
    /**\n
     * Just a local cache for this mock's target's methods\n
     *\n
     * @var \ReflectionMethod[]\n
     */\n
    protected static $_mockery_methods;\n
\n
    protected $_mockery_allowMockingProtectedMethods = false;\n
\n
    protected $_mockery_receivedMethodCalls;\n
\n
    /**\n
     * If shouldIgnoreMissing is called, this value will be returned on all calls to missing methods\n
     * @var mixed\n
     */\n
    protected $_mockery_defaultReturnValue = null;\n
\n
    /**\n
     * Tracks internally all the bad method call exceptions that happened during runtime\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_thrownExceptions = [];\n
\n
    protected $_mockery_instanceMock = true;\n
\n
    /**\n
     * We want to avoid constructors since class is copied to Generator.php\n
     * for inclusion on extending class definitions.\n
     *\n
     * @param \Mockery\Container $container\n
     * @param object $partialObject\n
     * @param bool $instanceMock\n
     * @return void\n
     */\n
    public function mockery_init(\Mockery\Container $container = null, $partialObject = null, $instanceMock = true)\n
    {\n
        if (is_null($container)) {\n
            $container = new \Mockery\Container;\n
        }\n
        $this->_mockery_container = $container;\n
        if (!is_null($partialObject)) {\n
            $this->_mockery_partial = $partialObject;\n
        }\n
\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isPublic()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_instanceMock = $instanceMock;\n
    }\n
\n
    /**\n
     * Set expected method calls\n
     *\n
     * @param mixed ...$methodNames one or many methods that are expected to be called in this mock\n
     *\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldReceive");\n
        }\n
\n
        foreach ($methodNames as $method) {\n
            if ("" == $method) {\n
                throw new \InvalidArgumentException("Received empty method name");\n
            }\n
        }\n
\n
        $self = $this;\n
        $allowMockingProtectedMethods = $this->_mockery_allowMockingProtectedMethods;\n
\n
        $lastExpectation = \Mockery::parseShouldReturnArgs(\n
            $this, $methodNames, function ($method) use ($self, $allowMockingProtectedMethods) {\n
                $rm = $self->mockery_getMethod($method);\n
                if ($rm) {\n
                    if ($rm->isPrivate()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a private method");\n
                    }\n
                    if (!$allowMockingProtectedMethods && $rm->isProtected()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a protected method and mocking protected methods is not enabled for the currently used mock object. Use shouldAllowMockingProtectedMethods() to enable mocking of protected methods.");\n
                    }\n
                }\n
\n
                $director = $self->mockery_getExpectationsFor($method);\n
                if (!$director) {\n
                    $director = new \Mockery\ExpectationDirector($method, $self);\n
                    $self->mockery_setExpectationsFor($method, $director);\n
                }\n
                $expectation = new \Mockery\Expectation($self, $method);\n
                $director->addExpectation($expectation);\n
                return $expectation;\n
            }\n
        );\n
        return $lastExpectation;\n
    }\n
\n
    // start method allows\n
    /**\n
     * @param mixed $something  String method name or map of method => return\n
     * @return self|\Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function allows($something = [])\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something);\n
        }\n
\n
        if (empty($something)) {\n
            return $this->shouldReceive();\n
        }\n
\n
        foreach ($something as $method => $returnValue) {\n
            $this->shouldReceive($method)->andReturn($returnValue);\n
        }\n
\n
        return $this;\n
    }\n
    // end method allows\n
\n
    // start method expects\n
    /**\n
    /**\n
     * @param mixed $something  String method name (optional)\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|ExpectsHigherOrderMessage\n
     */\n
    public function expects($something = null)\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something)->once();\n
        }\n
\n
        return new ExpectsHigherOrderMessage($this);\n
    }\n
    // end method expects\n
\n
    /**\n
     * Shortcut method for setting an expectation that a method should not be called.\n
     *\n
     * @param array ...$methodNames one or many methods that are expected not to be called in this mock\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldNotReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldNotReceive");\n
        }\n
\n
        $expectation = call_user_func_array(array($this, 'shouldReceive'), $methodNames);\n
        $expectation->never();\n
        return $expectation;\n
    }\n
\n
    /**\n
     * Allows additional methods to be mocked that do not explicitly exist on mocked class\n
     * @param String $method name of the method to be mocked\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingMethod($method)\n
    {\n
        $this->_mockery_mockableMethods[] = $method;\n
        return $this;\n
    }\n
\n
    /**\n
     * Set mock to ignore unexpected methods and return Undefined class\n
     * @param mixed $returnValue the default return value for calls to missing functions on this mock\n
     * @return Mock\n
     */\n
    public function shouldIgnoreMissing($returnValue = null)\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = $returnValue;\n
        return $this;\n
    }\n
\n
    public function asUndefined()\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = new \Mockery\Undefined;\n
        return $this;\n
    }\n
\n
    /**\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingProtectedMethods()\n
    {\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isProtected()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_allowMockingProtectedMethods = true;\n
        return $this;\n
    }\n
\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * This is particularly useless for this class, as it doesn't have a parent,\n
     * but included for completeness\n
     *\n
     * @deprecated 2.0.0 Please use makePartial() instead\n
     *\n
     * @return Mock\n
     */\n
    public function shouldDeferMissing()\n
    {\n
        return $this->makePartial();\n
    }\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * It was an alias for shouldDeferMissing(), which will be removed\n
     * in 2.0.0.\n
     *\n
     * @return Mock\n
     */\n
    public function makePartial()\n
    {\n
        $this->_mockery_deferMissing = true;\n
        return $this;\n
    }\n
\n
    /**\n
     * In the event shouldReceive() accepting one or more methods/returns,\n
     * this method will switch them from normal expectations to default\n
     * expectations\n
     *\n
     * @return self\n
     */\n
    public function byDefault()\n
    {\n
        foreach ($this->_mockery_expectations as $director) {\n
            $exps = $director->getExpectations();\n
            foreach ($exps as $exp) {\n
                $exp->byDefault();\n
            }\n
        }\n
        return $this;\n
    }\n
\n
    /**\n
     * Capture calls to this mock\n
     */\n
    public function __call($method, array $args)\n
    {\n
        return $this->_mockery_handleMethodCall($method, $args);\n
    }\n
\n
    public static function __callStatic($method, array $args)\n
    {\n
        return self::_mockery_handleStaticMethodCall($method, $args);\n
    }\n
\n
    /**\n
     * Forward calls to this magic method to the __call method\n
     */\n
    public function __toString()\n
    {\n
        return $this->__call('__toString', array());\n
    }\n
\n
    /**\n
     * Iterate across all expectation directors and validate each\n
     *\n
     * @throws \Mockery\CountValidator\Exception\n
     * @return void\n
     */\n
    public function mockery_verify()\n
    {\n
        if ($this->_mockery_verified) {\n
            return;\n
        }\n
        if (isset($this->_mockery_ignoreVerification)\n
            && $this->_mockery_ignoreVerification == true) {\n
            return;\n
        }\n
        $this->_mockery_verified = true;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $director->verify();\n
        }\n
    }\n
\n
    /**\n
     * Gets a list of exceptions thrown by this mock\n
     *\n
     * @return array\n
     */\n
    public function mockery_thrownExceptions()\n
    {\n
        return $this->_mockery_thrownExceptions;\n
    }\n
\n
    /**\n
     * Tear down tasks for this mock\n
     *\n
     * @return void\n
     */\n
    public function mockery_teardown()\n
    {\n
    }\n
\n
    /**\n
     * Fetch the next available allocation order number\n
     *\n
     * @return int\n
     */\n
    public function mockery_allocateOrder()\n
    {\n
        $this->_mockery_allocatedOrder += 1;\n
        return $this->_mockery_allocatedOrder;\n
    }\n
\n
    /**\n
     * Set ordering for a group\n
     *\n
     * @param mixed $group\n
     * @param int $order\n
     */\n
    public function mockery_setGroup($group, $order)\n
    {\n
        $this->_mockery_groups[$group] = $order;\n
    }\n
\n
    /**\n
     * Fetch array of ordered groups\n
     *\n
     * @return array\n
     */\n
    public function mockery_getGroups()\n
    {\n
        return $this->_mockery_groups;\n
    }\n
\n
    /**\n
     * Set current ordered number\n
     *\n
     * @param int $order\n
     */\n
    public function mockery_setCurrentOrder($order)\n
    {\n
        $this->_mockery_currentOrder = $order;\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Get current ordered number\n
     *\n
     * @return int\n
     */\n
    public function mockery_getCurrentOrder()\n
    {\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Validate the current mock's ordering\n
     *\n
     * @param string $method\n
     * @param int $order\n
     * @throws \Mockery\Exception\n
     * @return void\n
     */\n
    public function mockery_validateOrder($method, $order)\n
    {\n
        if ($order < $this->_mockery_currentOrder) {\n
            $exception = new \Mockery\Exception\InvalidOrderException(\n
                'Method ' . __CLASS__ . '::' . $method . '()'\n
                . ' called out of order: expected order '\n
                . $order . ', was ' . $this->_mockery_currentOrder\n
            );\n
            $exception->setMock($this)\n
                ->setMethodName($method)\n
                ->setExpectedOrder($order)\n
                ->setActualOrder($this->_mockery_currentOrder);\n
            throw $exception;\n
        }\n
        $this->mockery_setCurrentOrder($order);\n
    }\n
\n
    /**\n
     * Gets the count of expectations for this mock\n
     *\n
     * @return int\n
     */\n
    public function mockery_getExpectationCount()\n
    {\n
        $count = $this->_mockery_expectations_count;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $count += $director->getExpectationCount();\n
        }\n
        return $count;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_setExpectationsFor($method, \Mockery\ExpectationDirector $director)\n
    {\n
        $this->_mockery_expectations[$method] = $director;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_getExpectationsFor($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
    }\n
\n
    /**\n
     * Find an expectation matching the given method and arguments\n
     *\n
     * @var string $method\n
     * @var array $args\n
     * @return \Mockery\Expectation|null\n
     */\n
    public function mockery_findExpectation($method, array $args)\n
    {\n
        if (!isset($this->_mockery_expectations[$method])) {\n
            return null;\n
        }\n
        $director = $this->_mockery_expectations[$method];\n
\n
        return $director->findExpectation($args);\n
    }\n
\n
    /**\n
     * Return the container for this mock\n
     *\n
     * @return \Mockery\Container\n
     */\n
    public function mockery_getContainer()\n
    {\n
        return $this->_mockery_container;\n
    }\n
\n
    /**\n
     * Return the name for this mock\n
     *\n
     * @return string\n
     */\n
    public function mockery_getName()\n
    {\n
        return __CLASS__;\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    public function mockery_getMockableProperties()\n
    {\n
        return $this->_mockery_mockableProperties;\n
    }\n
\n
    public function __isset($name)\n
    {\n
        if (false === stripos($name, '_mockery_') && method_exists(get_parent_class($this), '__isset')) {\n
            return call_user_func('parent::__isset', $name);\n
        }\n
\n
        return false;\n
    }\n
\n
    public function mockery_getExpectations()\n
    {\n
        return $this->_mockery_expectations;\n
    }\n
\n
    /**\n
     * Calls a parent class method and returns the result. Used in a passthru\n
     * expectation where a real return value is required while still taking\n
     * advantage of expectation matching and call count verification.\n
     *\n
     * @param string $name\n
     * @param array $args\n
     * @return mixed\n
     */\n
    public function mockery_callSubjectMethod($name, array $args)\n
    {\n
        if (!method_exists($this, $name) && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $name, $args);\n
        }\n
        return call_user_func_array('parent::' . $name, $args);\n
    }\n
\n
    /**\n
     * @return string[]\n
     */\n
    public function mockery_getMockableMethods()\n
    {\n
        return $this->_mockery_mockableMethods;\n
    }\n
\n
    /**\n
     * @return bool\n
     */\n
    public function mockery_isAnonymous()\n
    {\n
        $rfc = new \ReflectionClass($this);\n
\n
        // HHVM has a Stringish interface\n
        $interfaces = array_filter($rfc->getInterfaces(), function ($i) {\n
            return $i->getName() !== "Stringish";\n
        });\n
        $onlyImplementsMock = 2 == count($interfaces);\n
\n
        return (false === $rfc->getParentClass()) && $onlyImplementsMock;\n
    }\n
\n
    public function mockery_isInstance()\n
    {\n
        return $this->_mockery_instanceMock;\n
    }\n
\n
    public function __wakeup()\n
    {\n
        /**\n
         * This does not add __wakeup method support. It's a blind method and any\n
         * expected __wakeup work will NOT be performed. It merely cuts off\n
         * annoying errors where a __wakeup exists but is not essential when\n
         * mocking\n
         */\n
    }\n
\n
    public function __destruct()\n
    {\n
        /**\n
         * Overrides real class destructor in case if class was created without original constructor\n
         */\n
    }\n
\n
    public function mockery_getMethod($name)\n
    {\n
        foreach ($this->mockery_getMethods() as $method) {\n
            if ($method->getName() == $name) {\n
                return $method;\n
            }\n
        }\n
\n
        return null;\n
    }\n
\n
    /**\n
     * @param string $name Method name.\n
     *\n
     * @return mixed Generated return value based on the declared return value of the named method.\n
     */\n
    public function mockery_returnValueForMethod($name)\n
    {\n
        if (version_compare(PHP_VERSION, '7.0.0-dev') < 0) {\n
            return;\n
        }\n
\n
        $rm = $this->mockery_getMethod($name);\n
        if (!$rm || !$rm->hasReturnType()) {\n
            return;\n
        }\n
\n
        $returnType = $rm->getReturnType();\n
\n
        // Default return value for methods with nullable type is null\n
        if ($returnType->allowsNull()) {\n
            return null;\n
        }\n
\n
        $type = PHP_VERSION_ID >= 70100 ? $returnType->getName() : (string) $returnType;\n
        switch ($type) {\n
            case '':       return;\n
            case 'string': return '';\n
            case 'int':    return 0;\n
            case 'float':  return 0.0;\n
            case 'bool':   return false;\n
            case 'array':  return [];\n
\n
            case 'callable':\n
            case 'Closure':\n
                return function () {\n
                };\n
\n
            case 'Traversable':\n
            case 'Generator':\n
                // Remove eval() when minimum version >=5.5\n
                $generator = eval('return function () { yield; };');\n
                return $generator();\n
\n
            case 'self':\n
                return \Mockery::mock($rm->getDeclaringClass()->getName());\n
\n
            case 'void':\n
                return null;\n
\n
            case 'object':\n
                if (version_compare(PHP_VERSION, '7.2.0-dev') >= 0) {\n
                    return \Mockery::mock();\n
                }\n
\n
            default:\n
                return \Mockery::mock($type);\n
        }\n
    }\n
\n
    public function shouldHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->atLeast()->once();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return $director;\n
    }\n
\n
    public function shouldHaveBeenCalled()\n
    {\n
        return $this->shouldHaveReceived("__invoke");\n
    }\n
\n
    public function shouldNotHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldNotHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->never();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return null;\n
    }\n
\n
    public function shouldNotHaveBeenCalled(array $args = null)\n
    {\n
        return $this->shouldNotHaveReceived("__invoke", $args);\n
    }\n
\n
    protected static function _mockery_handleStaticMethodCall($method, array $args)\n
    {\n
        $associatedRealObject = \Mockery::fetchMock(__CLASS__);\n
        try {\n
            return $associatedRealObject->__call($method, $args);\n
        } catch (BadMethodCallException $e) {\n
            throw new BadMethodCallException(\n
                'Static method ' . $associatedRealObject->mockery_getName() . '::' . $method\n
                . '() does not exist on this mock object',\n
                null,\n
                $e\n
            );\n
        }\n
    }\n
\n
    protected function _mockery_getReceivedMethodCalls()\n
    {\n
        return $this->_mockery_receivedMethodCalls ?: $this->_mockery_receivedMethodCalls = new \Mockery\ReceivedMethodCalls();\n
    }\n
\n
    /**\n
     * Called when an instance Mock was created and its constructor is getting called\n
     *\n
     * @see \Mockery\Generator\StringManipulation\Pass\InstanceMockPass\n
     * @param array $args\n
     */\n
    protected function _mockery_constructorCalled(array $args)\n
    {\n
        if (!isset($this->_mockery_expectations['__construct']) /* _mockery_handleMethodCall runs the other checks */) {\n
            return;\n
        }\n
        $this->_mockery_handleMethodCall('__construct', $args);\n
    }\n
\n
    protected function _mockery_findExpectedMethodHandler($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
\n
        $lowerCasedMockeryExpectations = array_change_key_case($this->_mockery_expectations, CASE_LOWER);\n
        $lowerCasedMethod = strtolower($method);\n
\n
        if (isset($lowerCasedMockeryExpectations[$lowerCasedMethod])) {\n
            return $lowerCasedMockeryExpectations[$lowerCasedMethod];\n
        }\n
\n
        return null;\n
    }\n
\n
    protected function _mockery_handleMethodCall($method, array $args)\n
    {\n
        $this->_mockery_getReceivedMethodCalls()->push(new \Mockery\MethodCall($method, $args));\n
\n
        $rm = $this->mockery_getMethod($method);\n
        if ($rm && $rm->isProtected() && !$this->_mockery_allowMockingProtectedMethods) {\n
            if ($rm->isAbstract()) {\n
                return;\n
            }\n
\n
            try {\n
                $prototype = $rm->getPrototype();\n
                if ($prototype->isAbstract()) {\n
                    return;\n
                }\n
            } catch (\ReflectionException $re) {\n
                // noop - there is no hasPrototype method\n
            }\n
\n
            return call_user_func_array("parent::$method", $args);\n
        }\n
\n
        $handler = $this->_mockery_findExpectedMethodHandler($method);\n
\n
        if ($handler !== null && !$this->_mockery_disableExpectationMatching) {\n
            try {\n
                return $handler->call($args);\n
            } catch (\Mockery\Exception\NoMatchingExpectationException $e) {\n
                if (!$this->_mockery_ignoreMissing && !$this->_mockery_deferMissing) {\n
                    throw $e;\n
                }\n
            }\n
        }\n
\n
        if (!is_null($this->_mockery_partial) &&\n
            (method_exists($this->_mockery_partial, $method) || method_exists($this->_mockery_partial, '__call'))\n
        ) {\n
            return call_user_func_array(array($this->_mockery_partial, $method), $args);\n
        } elseif ($this->_mockery_deferMissing && is_callable("parent::$method")\n
            && (!$this->hasMethodOverloadingInParentClass() || method_exists(get_parent_class($this), $method))) {\n
            return call_user_func_array("parent::$method", $args);\n
        } elseif ($this->_mockery_deferMissing && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $method, $args);\n
        } elseif ($method == '__toString') {\n
            // __toString is special because we force its addition to the class API regardless of the\n
            // original implementation.  Thus, we should always return a string rather than honor\n
            // _mockery_ignoreMissing and break the API with an error.\n
            return sprintf("%s#%s", __CLASS__, spl_object_hash($this));\n
        } elseif ($this->_mockery_ignoreMissing) {\n
            if (\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed() || (method_exists($this->_mockery_partial, $method) || is_callable("parent::$method"))) {\n
                if ($this->_mockery_defaultReturnValue instanceof \Mockery\Undefined) {\n
                    return call_user_func_array(array($this->_mockery_defaultReturnValue, $method), $args);\n
                } elseif (null === $this->_mockery_defaultReturnValue) {\n
                    return $this->mockery_returnValueForMethod($method);\n
                }\n
\n
                return $this->_mockery_defaultReturnValue;\n
            }\n
        }\n
\n
        $message = 'Method ' . __CLASS__ . '::' . $method .\n
            '() does not exist on this mock object';\n
\n
        if (!is_null($rm)) {\n
            $message = 'Received ' . __CLASS__ .\n
                '::' . $method . '(), but no expectations were specified';\n
        }\n
\n
        $bmce = new BadMethodCallException($message);\n
        $this->_mockery_thrownExceptions[] = $bmce;\n
        throw $bmce;\n
    }\n
\n
    /**\n
     * Uses reflection to get the list of all\n
     * methods within the current mock object\n
     *\n
     * @return array\n
     */\n
    protected function mockery_getMethods()\n
    {\n
        if (static::$_mockery_methods && \Mockery::getConfiguration()->reflectionCacheEnabled()) {\n
            return static::$_mockery_methods;\n
        }\n
\n
        if (isset($this->_mockery_partial)) {\n
            $reflected = new \ReflectionObject($this->_mockery_partial);\n
        } else {\n
            $reflected = new \ReflectionClass($this);\n
        }\n
\n
        return static::$_mockery_methods = $reflected->getMethods();\n
    }\n
\n
    private function hasMethodOverloadingInParentClass()\n
    {\n
        // if there's __call any name would be callable\n
        return is_callable('parent::aFunctionNameThatNoOneWouldEverUseInRealLife12345');\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    private function getNonPublicMethods()\n
    {\n
        return array_map(\n
            function ($method) {\n
                return $method->getName();\n
            },\n
            array_filter($this->mockery_getMethods(), function ($method) {\n
                return !$method->isPublic();\n
            })\n
        );\n
    }\n
public function __construct(string $name, \Inpsyde\PayPalCommerce\ApiClient\Entity\Address $address){\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function name(): string{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function address(): \Inpsyde\PayPalCommerce\ApiClient\Entity\Address{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function toArray(): array{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    }\n
'
                                        )
                                        '24e87a0977f5f476fc0276a63845fa26' => Mockery\Generator\MockDefinition Object &0000000021e1f92f000000005777935d (
                                            'config' => Mockery\Generator\MockConfiguration Object &0000000021e1f8c5000000005777935d (
                                                'targetClass' => Mockery\Generator\DefinedTargetClass Object &0000000021e1f93b000000005777935d (
                                                    'rfc' => ReflectionClass Object &0000000021e1f93a000000005777935d (
                                                        'name' => 'Inpsyde\PayPalCommerce\ApiClient\Factory\ShippingFactory'
                                                    )
                                                )
                                                'targetClassName' => '\Inpsyde\PayPalCommerce\ApiClient\Factory\ShippingFactory'
                                                'targetInterfaces' => Array &2222 ()
                                                'targetInterfaceNames' => Array &2223 ()
                                                'targetTraits' => Array &2224 ()
                                                'targetTraitNames' => Array &2225 ()
                                                'targetObject' => null
                                                'name' => 'Mockery_14_Inpsyde_PayPalCommerce_ApiClient_Factory_ShippingFactory'
                                                'blackListedMethods' => Array &2226 (
                                                    0 => '__call'
                                                    1 => '__callStatic'
                                                    2 => '__clone'
                                                    3 => '__wakeup'
                                                    4 => '__set'
                                                    5 => '__get'
                                                    6 => '__toString'
                                                    7 => '__isset'
                                                    8 => '__destruct'
                                                    9 => '__debugInfo'
                                                    10 => '__halt_compiler'
                                                    30 => 'empty'
                                                    37 => 'eval'
                                                    53 => 'isset'
                                                    70 => 'unset'
                                                )
                                                'whiteListedMethods' => Array &2227 ()
                                                'instanceMock' => false
                                                'parameterOverrides' => Array &2228 ()
                                                'allMethods' => Array &2229 (
                                                    0 => Mockery\Generator\Method Object &0000000021e1f934000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1f938000000005777935d (
                                                            'name' => '__construct'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Factory\ShippingFactory'
                                                        )
                                                    )
                                                    1 => Mockery\Generator\Method Object &0000000021e1f933000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1f937000000005777935d (
                                                            'name' => 'fromWcCustomer'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Factory\ShippingFactory'
                                                        )
                                                    )
                                                    2 => Mockery\Generator\Method Object &0000000021e1f932000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1f936000000005777935d (
                                                            'name' => 'fromWcOrder'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Factory\ShippingFactory'
                                                        )
                                                    )
                                                    3 => Mockery\Generator\Method Object &0000000021e1f931000000005777935d (
                                                        'method' => ReflectionMethod Object &0000000021e1f935000000005777935d (
                                                            'name' => 'fromPayPalResponse'
                                                            'class' => 'Inpsyde\PayPalCommerce\ApiClient\Factory\ShippingFactory'
                                                        )
                                                    )
                                                )
                                                'mockOriginalDestructor' => true
                                                'constantsMap' => Array &2230 ()
                                            )
                                            'code' => '<?php\n
/**\n
 * Mockery\n
 *\n
 * LICENSE\n
 *\n
 * This source file is subject to the new BSD license that is bundled\n
 * with this package in the file LICENSE.txt.\n
 * It is also available through the world-wide-web at this URL:\n
 * http://github.com/padraic/mockery/blob/master/LICENSE\n
 * If you did not receive a copy of the license and are unable to\n
 * obtain it through the world-wide-web, please send an email\n
 * to padraic@php.net so we can send you a copy immediately.\n
 *\n
 * @category   Mockery\n
 * @package    Mockery\n
 * @copyright  Copyright (c) 2010 Pádraic Brady (http://blog.astrumfutura.com)\n
 * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License\n
 */\n
\n
\n
\n
use Mockery\HigherOrderMessage;\n
use Mockery\MockInterface;\n
use Mockery\LegacyMockInterface;\n
use Mockery\ExpectsHigherOrderMessage;\n
use Mockery\Exception\BadMethodCallException;\n
\n
class Mockery_14_Inpsyde_PayPalCommerce_ApiClient_Factory_ShippingFactory extends \Inpsyde\PayPalCommerce\ApiClient\Factory\ShippingFactory implements MockInterface\n
{\n
    /**\n
     * Stores an array of all expectation directors for this mock\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_expectations = array();\n
\n
    /**\n
     * Stores an inital number of expectations that can be manipulated\n
     * while using the getter method.\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_expectations_count = 0;\n
\n
    /**\n
     * Flag to indicate whether we can ignore method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_ignoreMissing = false;\n
\n
    /**\n
     * Flag to indicate whether we can defer method calls missing from our\n
     * expectations\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_deferMissing = false;\n
\n
    /**\n
     * Flag to indicate whether this mock was verified\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_verified = false;\n
\n
    /**\n
     * Given name of the mock\n
     *\n
     * @var string\n
     */\n
    protected $_mockery_name = null;\n
\n
    /**\n
     * Order number of allocation\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_allocatedOrder = 0;\n
\n
    /**\n
     * Current ordered number\n
     *\n
     * @var int\n
     */\n
    protected $_mockery_currentOrder = 0;\n
\n
    /**\n
     * Ordered groups\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_groups = array();\n
\n
    /**\n
     * Mock container containing this mock object\n
     *\n
     * @var \Mockery\Container\n
     */\n
    protected $_mockery_container = null;\n
\n
    /**\n
     * Instance of a core object on which methods are called in the event\n
     * it has been set, and an expectation for one of the object's methods\n
     * does not exist. This implements a simple partial mock proxy system.\n
     *\n
     * @var object\n
     */\n
    protected $_mockery_partial = null;\n
\n
    /**\n
     * Flag to indicate we should ignore all expectations temporarily. Used\n
     * mainly to prevent expectation matching when in the middle of a mock\n
     * object recording session.\n
     *\n
     * @var bool\n
     */\n
    protected $_mockery_disableExpectationMatching = false;\n
\n
    /**\n
     * Stores all stubbed public methods separate from any on-object public\n
     * properties that may exist.\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_mockableProperties = array();\n
\n
    /**\n
     * @var array\n
     */\n
    protected $_mockery_mockableMethods = array();\n
\n
    /**\n
     * Just a local cache for this mock's target's methods\n
     *\n
     * @var \ReflectionMethod[]\n
     */\n
    protected static $_mockery_methods;\n
\n
    protected $_mockery_allowMockingProtectedMethods = false;\n
\n
    protected $_mockery_receivedMethodCalls;\n
\n
    /**\n
     * If shouldIgnoreMissing is called, this value will be returned on all calls to missing methods\n
     * @var mixed\n
     */\n
    protected $_mockery_defaultReturnValue = null;\n
\n
    /**\n
     * Tracks internally all the bad method call exceptions that happened during runtime\n
     *\n
     * @var array\n
     */\n
    protected $_mockery_thrownExceptions = [];\n
\n
    protected $_mockery_instanceMock = true;\n
\n
    /**\n
     * We want to avoid constructors since class is copied to Generator.php\n
     * for inclusion on extending class definitions.\n
     *\n
     * @param \Mockery\Container $container\n
     * @param object $partialObject\n
     * @param bool $instanceMock\n
     * @return void\n
     */\n
    public function mockery_init(\Mockery\Container $container = null, $partialObject = null, $instanceMock = true)\n
    {\n
        if (is_null($container)) {\n
            $container = new \Mockery\Container;\n
        }\n
        $this->_mockery_container = $container;\n
        if (!is_null($partialObject)) {\n
            $this->_mockery_partial = $partialObject;\n
        }\n
\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isPublic()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_instanceMock = $instanceMock;\n
    }\n
\n
    /**\n
     * Set expected method calls\n
     *\n
     * @param mixed ...$methodNames one or many methods that are expected to be called in this mock\n
     *\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldReceive");\n
        }\n
\n
        foreach ($methodNames as $method) {\n
            if ("" == $method) {\n
                throw new \InvalidArgumentException("Received empty method name");\n
            }\n
        }\n
\n
        $self = $this;\n
        $allowMockingProtectedMethods = $this->_mockery_allowMockingProtectedMethods;\n
\n
        $lastExpectation = \Mockery::parseShouldReturnArgs(\n
            $this, $methodNames, function ($method) use ($self, $allowMockingProtectedMethods) {\n
                $rm = $self->mockery_getMethod($method);\n
                if ($rm) {\n
                    if ($rm->isPrivate()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a private method");\n
                    }\n
                    if (!$allowMockingProtectedMethods && $rm->isProtected()) {\n
                        throw new \InvalidArgumentException("$method() cannot be mocked as it is a protected method and mocking protected methods is not enabled for the currently used mock object. Use shouldAllowMockingProtectedMethods() to enable mocking of protected methods.");\n
                    }\n
                }\n
\n
                $director = $self->mockery_getExpectationsFor($method);\n
                if (!$director) {\n
                    $director = new \Mockery\ExpectationDirector($method, $self);\n
                    $self->mockery_setExpectationsFor($method, $director);\n
                }\n
                $expectation = new \Mockery\Expectation($self, $method);\n
                $director->addExpectation($expectation);\n
                return $expectation;\n
            }\n
        );\n
        return $lastExpectation;\n
    }\n
\n
    // start method allows\n
    /**\n
     * @param mixed $something  String method name or map of method => return\n
     * @return self|\Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function allows($something = [])\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something);\n
        }\n
\n
        if (empty($something)) {\n
            return $this->shouldReceive();\n
        }\n
\n
        foreach ($something as $method => $returnValue) {\n
            $this->shouldReceive($method)->andReturn($returnValue);\n
        }\n
\n
        return $this;\n
    }\n
    // end method allows\n
\n
    // start method expects\n
    /**\n
    /**\n
     * @param mixed $something  String method name (optional)\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|ExpectsHigherOrderMessage\n
     */\n
    public function expects($something = null)\n
    {\n
        if (is_string($something)) {\n
            return $this->shouldReceive($something)->once();\n
        }\n
\n
        return new ExpectsHigherOrderMessage($this);\n
    }\n
    // end method expects\n
\n
    /**\n
     * Shortcut method for setting an expectation that a method should not be called.\n
     *\n
     * @param array ...$methodNames one or many methods that are expected not to be called in this mock\n
     * @return \Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage\n
     */\n
    public function shouldNotReceive(...$methodNames)\n
    {\n
        if (count($methodNames) === 0) {\n
            return new HigherOrderMessage($this, "shouldNotReceive");\n
        }\n
\n
        $expectation = call_user_func_array(array($this, 'shouldReceive'), $methodNames);\n
        $expectation->never();\n
        return $expectation;\n
    }\n
\n
    /**\n
     * Allows additional methods to be mocked that do not explicitly exist on mocked class\n
     * @param String $method name of the method to be mocked\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingMethod($method)\n
    {\n
        $this->_mockery_mockableMethods[] = $method;\n
        return $this;\n
    }\n
\n
    /**\n
     * Set mock to ignore unexpected methods and return Undefined class\n
     * @param mixed $returnValue the default return value for calls to missing functions on this mock\n
     * @return Mock\n
     */\n
    public function shouldIgnoreMissing($returnValue = null)\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = $returnValue;\n
        return $this;\n
    }\n
\n
    public function asUndefined()\n
    {\n
        $this->_mockery_ignoreMissing = true;\n
        $this->_mockery_defaultReturnValue = new \Mockery\Undefined;\n
        return $this;\n
    }\n
\n
    /**\n
     * @return Mock\n
     */\n
    public function shouldAllowMockingProtectedMethods()\n
    {\n
        if (!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed()) {\n
            foreach ($this->mockery_getMethods() as $method) {\n
                if ($method->isProtected()) {\n
                    $this->_mockery_mockableMethods[] = $method->getName();\n
                }\n
            }\n
        }\n
\n
        $this->_mockery_allowMockingProtectedMethods = true;\n
        return $this;\n
    }\n
\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * This is particularly useless for this class, as it doesn't have a parent,\n
     * but included for completeness\n
     *\n
     * @deprecated 2.0.0 Please use makePartial() instead\n
     *\n
     * @return Mock\n
     */\n
    public function shouldDeferMissing()\n
    {\n
        return $this->makePartial();\n
    }\n
\n
    /**\n
     * Set mock to defer unexpected methods to it's parent\n
     *\n
     * It was an alias for shouldDeferMissing(), which will be removed\n
     * in 2.0.0.\n
     *\n
     * @return Mock\n
     */\n
    public function makePartial()\n
    {\n
        $this->_mockery_deferMissing = true;\n
        return $this;\n
    }\n
\n
    /**\n
     * In the event shouldReceive() accepting one or more methods/returns,\n
     * this method will switch them from normal expectations to default\n
     * expectations\n
     *\n
     * @return self\n
     */\n
    public function byDefault()\n
    {\n
        foreach ($this->_mockery_expectations as $director) {\n
            $exps = $director->getExpectations();\n
            foreach ($exps as $exp) {\n
                $exp->byDefault();\n
            }\n
        }\n
        return $this;\n
    }\n
\n
    /**\n
     * Capture calls to this mock\n
     */\n
    public function __call($method, array $args)\n
    {\n
        return $this->_mockery_handleMethodCall($method, $args);\n
    }\n
\n
    public static function __callStatic($method, array $args)\n
    {\n
        return self::_mockery_handleStaticMethodCall($method, $args);\n
    }\n
\n
    /**\n
     * Forward calls to this magic method to the __call method\n
     */\n
    public function __toString()\n
    {\n
        return $this->__call('__toString', array());\n
    }\n
\n
    /**\n
     * Iterate across all expectation directors and validate each\n
     *\n
     * @throws \Mockery\CountValidator\Exception\n
     * @return void\n
     */\n
    public function mockery_verify()\n
    {\n
        if ($this->_mockery_verified) {\n
            return;\n
        }\n
        if (isset($this->_mockery_ignoreVerification)\n
            && $this->_mockery_ignoreVerification == true) {\n
            return;\n
        }\n
        $this->_mockery_verified = true;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $director->verify();\n
        }\n
    }\n
\n
    /**\n
     * Gets a list of exceptions thrown by this mock\n
     *\n
     * @return array\n
     */\n
    public function mockery_thrownExceptions()\n
    {\n
        return $this->_mockery_thrownExceptions;\n
    }\n
\n
    /**\n
     * Tear down tasks for this mock\n
     *\n
     * @return void\n
     */\n
    public function mockery_teardown()\n
    {\n
    }\n
\n
    /**\n
     * Fetch the next available allocation order number\n
     *\n
     * @return int\n
     */\n
    public function mockery_allocateOrder()\n
    {\n
        $this->_mockery_allocatedOrder += 1;\n
        return $this->_mockery_allocatedOrder;\n
    }\n
\n
    /**\n
     * Set ordering for a group\n
     *\n
     * @param mixed $group\n
     * @param int $order\n
     */\n
    public function mockery_setGroup($group, $order)\n
    {\n
        $this->_mockery_groups[$group] = $order;\n
    }\n
\n
    /**\n
     * Fetch array of ordered groups\n
     *\n
     * @return array\n
     */\n
    public function mockery_getGroups()\n
    {\n
        return $this->_mockery_groups;\n
    }\n
\n
    /**\n
     * Set current ordered number\n
     *\n
     * @param int $order\n
     */\n
    public function mockery_setCurrentOrder($order)\n
    {\n
        $this->_mockery_currentOrder = $order;\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Get current ordered number\n
     *\n
     * @return int\n
     */\n
    public function mockery_getCurrentOrder()\n
    {\n
        return $this->_mockery_currentOrder;\n
    }\n
\n
    /**\n
     * Validate the current mock's ordering\n
     *\n
     * @param string $method\n
     * @param int $order\n
     * @throws \Mockery\Exception\n
     * @return void\n
     */\n
    public function mockery_validateOrder($method, $order)\n
    {\n
        if ($order < $this->_mockery_currentOrder) {\n
            $exception = new \Mockery\Exception\InvalidOrderException(\n
                'Method ' . __CLASS__ . '::' . $method . '()'\n
                . ' called out of order: expected order '\n
                . $order . ', was ' . $this->_mockery_currentOrder\n
            );\n
            $exception->setMock($this)\n
                ->setMethodName($method)\n
                ->setExpectedOrder($order)\n
                ->setActualOrder($this->_mockery_currentOrder);\n
            throw $exception;\n
        }\n
        $this->mockery_setCurrentOrder($order);\n
    }\n
\n
    /**\n
     * Gets the count of expectations for this mock\n
     *\n
     * @return int\n
     */\n
    public function mockery_getExpectationCount()\n
    {\n
        $count = $this->_mockery_expectations_count;\n
        foreach ($this->_mockery_expectations as $director) {\n
            $count += $director->getExpectationCount();\n
        }\n
        return $count;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_setExpectationsFor($method, \Mockery\ExpectationDirector $director)\n
    {\n
        $this->_mockery_expectations[$method] = $director;\n
    }\n
\n
    /**\n
     * Return the expectations director for the given method\n
     *\n
     * @var string $method\n
     * @return \Mockery\ExpectationDirector|null\n
     */\n
    public function mockery_getExpectationsFor($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
    }\n
\n
    /**\n
     * Find an expectation matching the given method and arguments\n
     *\n
     * @var string $method\n
     * @var array $args\n
     * @return \Mockery\Expectation|null\n
     */\n
    public function mockery_findExpectation($method, array $args)\n
    {\n
        if (!isset($this->_mockery_expectations[$method])) {\n
            return null;\n
        }\n
        $director = $this->_mockery_expectations[$method];\n
\n
        return $director->findExpectation($args);\n
    }\n
\n
    /**\n
     * Return the container for this mock\n
     *\n
     * @return \Mockery\Container\n
     */\n
    public function mockery_getContainer()\n
    {\n
        return $this->_mockery_container;\n
    }\n
\n
    /**\n
     * Return the name for this mock\n
     *\n
     * @return string\n
     */\n
    public function mockery_getName()\n
    {\n
        return __CLASS__;\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    public function mockery_getMockableProperties()\n
    {\n
        return $this->_mockery_mockableProperties;\n
    }\n
\n
    public function __isset($name)\n
    {\n
        if (false === stripos($name, '_mockery_') && method_exists(get_parent_class($this), '__isset')) {\n
            return call_user_func('parent::__isset', $name);\n
        }\n
\n
        return false;\n
    }\n
\n
    public function mockery_getExpectations()\n
    {\n
        return $this->_mockery_expectations;\n
    }\n
\n
    /**\n
     * Calls a parent class method and returns the result. Used in a passthru\n
     * expectation where a real return value is required while still taking\n
     * advantage of expectation matching and call count verification.\n
     *\n
     * @param string $name\n
     * @param array $args\n
     * @return mixed\n
     */\n
    public function mockery_callSubjectMethod($name, array $args)\n
    {\n
        if (!method_exists($this, $name) && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $name, $args);\n
        }\n
        return call_user_func_array('parent::' . $name, $args);\n
    }\n
\n
    /**\n
     * @return string[]\n
     */\n
    public function mockery_getMockableMethods()\n
    {\n
        return $this->_mockery_mockableMethods;\n
    }\n
\n
    /**\n
     * @return bool\n
     */\n
    public function mockery_isAnonymous()\n
    {\n
        $rfc = new \ReflectionClass($this);\n
\n
        // HHVM has a Stringish interface\n
        $interfaces = array_filter($rfc->getInterfaces(), function ($i) {\n
            return $i->getName() !== "Stringish";\n
        });\n
        $onlyImplementsMock = 2 == count($interfaces);\n
\n
        return (false === $rfc->getParentClass()) && $onlyImplementsMock;\n
    }\n
\n
    public function mockery_isInstance()\n
    {\n
        return $this->_mockery_instanceMock;\n
    }\n
\n
    public function __wakeup()\n
    {\n
        /**\n
         * This does not add __wakeup method support. It's a blind method and any\n
         * expected __wakeup work will NOT be performed. It merely cuts off\n
         * annoying errors where a __wakeup exists but is not essential when\n
         * mocking\n
         */\n
    }\n
\n
    public function __destruct()\n
    {\n
        /**\n
         * Overrides real class destructor in case if class was created without original constructor\n
         */\n
    }\n
\n
    public function mockery_getMethod($name)\n
    {\n
        foreach ($this->mockery_getMethods() as $method) {\n
            if ($method->getName() == $name) {\n
                return $method;\n
            }\n
        }\n
\n
        return null;\n
    }\n
\n
    /**\n
     * @param string $name Method name.\n
     *\n
     * @return mixed Generated return value based on the declared return value of the named method.\n
     */\n
    public function mockery_returnValueForMethod($name)\n
    {\n
        if (version_compare(PHP_VERSION, '7.0.0-dev') < 0) {\n
            return;\n
        }\n
\n
        $rm = $this->mockery_getMethod($name);\n
        if (!$rm || !$rm->hasReturnType()) {\n
            return;\n
        }\n
\n
        $returnType = $rm->getReturnType();\n
\n
        // Default return value for methods with nullable type is null\n
        if ($returnType->allowsNull()) {\n
            return null;\n
        }\n
\n
        $type = PHP_VERSION_ID >= 70100 ? $returnType->getName() : (string) $returnType;\n
        switch ($type) {\n
            case '':       return;\n
            case 'string': return '';\n
            case 'int':    return 0;\n
            case 'float':  return 0.0;\n
            case 'bool':   return false;\n
            case 'array':  return [];\n
\n
            case 'callable':\n
            case 'Closure':\n
                return function () {\n
                };\n
\n
            case 'Traversable':\n
            case 'Generator':\n
                // Remove eval() when minimum version >=5.5\n
                $generator = eval('return function () { yield; };');\n
                return $generator();\n
\n
            case 'self':\n
                return \Mockery::mock($rm->getDeclaringClass()->getName());\n
\n
            case 'void':\n
                return null;\n
\n
            case 'object':\n
                if (version_compare(PHP_VERSION, '7.2.0-dev') >= 0) {\n
                    return \Mockery::mock();\n
                }\n
\n
            default:\n
                return \Mockery::mock($type);\n
        }\n
    }\n
\n
    public function shouldHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->atLeast()->once();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return $director;\n
    }\n
\n
    public function shouldHaveBeenCalled()\n
    {\n
        return $this->shouldHaveReceived("__invoke");\n
    }\n
\n
    public function shouldNotHaveReceived($method = null, $args = null)\n
    {\n
        if ($method === null) {\n
            return new HigherOrderMessage($this, "shouldNotHaveReceived");\n
        }\n
\n
        $expectation = new \Mockery\VerificationExpectation($this, $method);\n
        if (null !== $args) {\n
            $expectation->withArgs($args);\n
        }\n
        $expectation->never();\n
        $director = new \Mockery\VerificationDirector($this->_mockery_getReceivedMethodCalls(), $expectation);\n
        $this->_mockery_expectations_count++;\n
        $director->verify();\n
        return null;\n
    }\n
\n
    public function shouldNotHaveBeenCalled(array $args = null)\n
    {\n
        return $this->shouldNotHaveReceived("__invoke", $args);\n
    }\n
\n
    protected static function _mockery_handleStaticMethodCall($method, array $args)\n
    {\n
        $associatedRealObject = \Mockery::fetchMock(__CLASS__);\n
        try {\n
            return $associatedRealObject->__call($method, $args);\n
        } catch (BadMethodCallException $e) {\n
            throw new BadMethodCallException(\n
                'Static method ' . $associatedRealObject->mockery_getName() . '::' . $method\n
                . '() does not exist on this mock object',\n
                null,\n
                $e\n
            );\n
        }\n
    }\n
\n
    protected function _mockery_getReceivedMethodCalls()\n
    {\n
        return $this->_mockery_receivedMethodCalls ?: $this->_mockery_receivedMethodCalls = new \Mockery\ReceivedMethodCalls();\n
    }\n
\n
    /**\n
     * Called when an instance Mock was created and its constructor is getting called\n
     *\n
     * @see \Mockery\Generator\StringManipulation\Pass\InstanceMockPass\n
     * @param array $args\n
     */\n
    protected function _mockery_constructorCalled(array $args)\n
    {\n
        if (!isset($this->_mockery_expectations['__construct']) /* _mockery_handleMethodCall runs the other checks */) {\n
            return;\n
        }\n
        $this->_mockery_handleMethodCall('__construct', $args);\n
    }\n
\n
    protected function _mockery_findExpectedMethodHandler($method)\n
    {\n
        if (isset($this->_mockery_expectations[$method])) {\n
            return $this->_mockery_expectations[$method];\n
        }\n
\n
        $lowerCasedMockeryExpectations = array_change_key_case($this->_mockery_expectations, CASE_LOWER);\n
        $lowerCasedMethod = strtolower($method);\n
\n
        if (isset($lowerCasedMockeryExpectations[$lowerCasedMethod])) {\n
            return $lowerCasedMockeryExpectations[$lowerCasedMethod];\n
        }\n
\n
        return null;\n
    }\n
\n
    protected function _mockery_handleMethodCall($method, array $args)\n
    {\n
        $this->_mockery_getReceivedMethodCalls()->push(new \Mockery\MethodCall($method, $args));\n
\n
        $rm = $this->mockery_getMethod($method);\n
        if ($rm && $rm->isProtected() && !$this->_mockery_allowMockingProtectedMethods) {\n
            if ($rm->isAbstract()) {\n
                return;\n
            }\n
\n
            try {\n
                $prototype = $rm->getPrototype();\n
                if ($prototype->isAbstract()) {\n
                    return;\n
                }\n
            } catch (\ReflectionException $re) {\n
                // noop - there is no hasPrototype method\n
            }\n
\n
            return call_user_func_array("parent::$method", $args);\n
        }\n
\n
        $handler = $this->_mockery_findExpectedMethodHandler($method);\n
\n
        if ($handler !== null && !$this->_mockery_disableExpectationMatching) {\n
            try {\n
                return $handler->call($args);\n
            } catch (\Mockery\Exception\NoMatchingExpectationException $e) {\n
                if (!$this->_mockery_ignoreMissing && !$this->_mockery_deferMissing) {\n
                    throw $e;\n
                }\n
            }\n
        }\n
\n
        if (!is_null($this->_mockery_partial) &&\n
            (method_exists($this->_mockery_partial, $method) || method_exists($this->_mockery_partial, '__call'))\n
        ) {\n
            return call_user_func_array(array($this->_mockery_partial, $method), $args);\n
        } elseif ($this->_mockery_deferMissing && is_callable("parent::$method")\n
            && (!$this->hasMethodOverloadingInParentClass() || method_exists(get_parent_class($this), $method))) {\n
            return call_user_func_array("parent::$method", $args);\n
        } elseif ($this->_mockery_deferMissing && method_exists(get_parent_class($this), '__call')) {\n
            return call_user_func('parent::__call', $method, $args);\n
        } elseif ($method == '__toString') {\n
            // __toString is special because we force its addition to the class API regardless of the\n
            // original implementation.  Thus, we should always return a string rather than honor\n
            // _mockery_ignoreMissing and break the API with an error.\n
            return sprintf("%s#%s", __CLASS__, spl_object_hash($this));\n
        } elseif ($this->_mockery_ignoreMissing) {\n
            if (\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed() || (method_exists($this->_mockery_partial, $method) || is_callable("parent::$method"))) {\n
                if ($this->_mockery_defaultReturnValue instanceof \Mockery\Undefined) {\n
                    return call_user_func_array(array($this->_mockery_defaultReturnValue, $method), $args);\n
                } elseif (null === $this->_mockery_defaultReturnValue) {\n
                    return $this->mockery_returnValueForMethod($method);\n
                }\n
\n
                return $this->_mockery_defaultReturnValue;\n
            }\n
        }\n
\n
        $message = 'Method ' . __CLASS__ . '::' . $method .\n
            '() does not exist on this mock object';\n
\n
        if (!is_null($rm)) {\n
            $message = 'Received ' . __CLASS__ .\n
                '::' . $method . '(), but no expectations were specified';\n
        }\n
\n
        $bmce = new BadMethodCallException($message);\n
        $this->_mockery_thrownExceptions[] = $bmce;\n
        throw $bmce;\n
    }\n
\n
    /**\n
     * Uses reflection to get the list of all\n
     * methods within the current mock object\n
     *\n
     * @return array\n
     */\n
    protected function mockery_getMethods()\n
    {\n
        if (static::$_mockery_methods && \Mockery::getConfiguration()->reflectionCacheEnabled()) {\n
            return static::$_mockery_methods;\n
        }\n
\n
        if (isset($this->_mockery_partial)) {\n
            $reflected = new \ReflectionObject($this->_mockery_partial);\n
        } else {\n
            $reflected = new \ReflectionClass($this);\n
        }\n
\n
        return static::$_mockery_methods = $reflected->getMethods();\n
    }\n
\n
    private function hasMethodOverloadingInParentClass()\n
    {\n
        // if there's __call any name would be callable\n
        return is_callable('parent::aFunctionNameThatNoOneWouldEverUseInRealLife12345');\n
    }\n
\n
    /**\n
     * @return array\n
     */\n
    private function getNonPublicMethods()\n
    {\n
        return array_map(\n
            function ($method) {\n
                return $method->getName();\n
            },\n
            array_filter($this->mockery_getMethods(), function ($method) {\n
                return !$method->isPublic();\n
            })\n
        );\n
    }\n
public function __construct(\Inpsyde\PayPalCommerce\ApiClient\Factory\AddressFactory $addressFactory){\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function fromWcCustomer(\WC_Customer $customer): \Inpsyde\PayPalCommerce\ApiClient\Entity\Shipping{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function fromWcOrder(\WC_Order $order): \Inpsyde\PayPalCommerce\ApiClient\Entity\Shipping{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    public function fromPayPalResponse(\stdClass $data): \Inpsyde\PayPalCommerce\ApiClient\Entity\Shipping{\n
$argc = func_num_args();\n
$argv = func_get_args();\n
$ret = $this->_mockery_handleMethodCall(__FUNCTION__, $argv);\n
return $ret;\n
}\n
\n
    }\n
'
                                        )
                                    )
                                )
                                '_loader' => Mockery\Loader\EvalLoader Object &0000000021e1ffcb000000005777935d ()
                                '_namedMocks' => Array &2231 ()
                            )
                            '_mockery_partial' => null
                            '_mockery_disableExpectationMatching' => false
                            '_mockery_mockableProperties' => Array &2232 ()
                            '_mockery_mockableMethods' => Array &2233 ()
                            '_mockery_allowMockingProtectedMethods' => false
                            '_mockery_receivedMethodCalls' => Mockery\ReceivedMethodCalls Object &0000000021e1f96a000000005777935d (
                                'methodCalls' => Array &2234 (
                                    0 => Mockery\MethodCall Object &0000000021e1f969000000005777935d (
                                        'method' => 'countryCode'
                                        'args' => Array &2235 ()
                                    )
                                    1 => Mockery\MethodCall Object &0000000021e1f967000000005777935d (
                                        'method' => 'countryCode'
                                        'args' => Array &2236 ()
                                    )
                                )
                            )
                            '_mockery_defaultReturnValue' => null
                            '_mockery_thrownExceptions' => Array &2237 ()
                            '_mockery_instanceMock' => false
                            'countryCode' => null
                            'addressLine1' => null
                            'addressLine2' => null
                            'adminArea1' => null
                            'adminArea2' => null
                            'postalCode' => null
                        )
                    )
                    '_closureQueue' => Array &2238 ()
                    '_setQueue' => Array &2239 ()
                    '_orderNumber' => null
                    '_globalOrderNumber' => null
                    '_throw' => false
                    '_globally' => false
                    '_passthru' => false
                )
            )
            '_expectedOrder' => null
            '_defaults' => Array &2240 ()
        )
    )
    '_mockery_expectations_count' => 0
    '_mockery_ignoreMissing' => false
    '_mockery_deferMissing' => false
    '_mockery_verified' => false
    '_mockery_name' => null
    '_mockery_allocatedOrder' => 0
    '_mockery_currentOrder' => 0
    '_mockery_groups' => Array &2241 ()
    '_mockery_container' => Mockery\Container Object &0000000021e1ffdb000000005777935d
    '_mockery_partial' => null
    '_mockery_disableExpectationMatching' => false
    '_mockery_mockableProperties' => Array &2242 ()
    '_mockery_mockableMethods' => Array &2243 ()
    '_mockery_allowMockingProtectedMethods' => false
    '_mockery_receivedMethodCalls' => Mockery\ReceivedMethodCalls Object &0000000021e1f96c000000005777935d (
        'methodCalls' => Array &2244 (
            0 => Mockery\MethodCall Object &0000000021e1f96b000000005777935d (
                'method' => 'address'
                'args' => Array &2245 ()
            )
            1 => Mockery\MethodCall Object &0000000021e1f968000000005777935d (
                'method' => 'address'
                'args' => Array &2246 ()
            )
        )
    )
    '_mockery_defaultReturnValue' => null
    '_mockery_thrownExceptions' => Array &2247 ()
    '_mockery_instanceMock' => false
    'name' => null
    'address' => null
) is null.

/home/inpsyde/projects/ppc-dev-website/public/wp-content/plugins/woocommerce-paypal-commerce-gateway/modules.local/ppcp-api-client/tests/PHPUnit/Factory/PurchaseUnitFactoryTest.php:367

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.
